#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BMTBLL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BMT")]
	public partial class BMTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessLevel(AccessLevel instance);
    partial void UpdateAccessLevel(AccessLevel instance);
    partial void DeleteAccessLevel(AccessLevel instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAnswerType(AnswerType instance);
    partial void UpdateAnswerType(AnswerType instance);
    partial void DeleteAnswerType(AnswerType instance);
    partial void InsertAnswerTypeEnum(AnswerTypeEnum instance);
    partial void UpdateAnswerTypeEnum(AnswerTypeEnum instance);
    partial void DeleteAnswerTypeEnum(AnswerTypeEnum instance);
    partial void InsertAnswerTypeWeightage(AnswerTypeWeightage instance);
    partial void UpdateAnswerTypeWeightage(AnswerTypeWeightage instance);
    partial void DeleteAnswerTypeWeightage(AnswerTypeWeightage instance);
    partial void InsertAssetType(AssetType instance);
    partial void UpdateAssetType(AssetType instance);
    partial void DeleteAssetType(AssetType instance);
    partial void InsertConsultantType(ConsultantType instance);
    partial void UpdateConsultantType(ConsultantType instance);
    partial void DeleteConsultantType(ConsultantType instance);
    partial void InsertConsultantUser(ConsultantUser instance);
    partial void UpdateConsultantUser(ConsultantUser instance);
    partial void DeleteConsultantUser(ConsultantUser instance);
    partial void InsertConsultingUserAccess(ConsultingUserAccess instance);
    partial void UpdateConsultingUserAccess(ConsultingUserAccess instance);
    partial void DeleteConsultingUserAccess(ConsultingUserAccess instance);
    partial void InsertCorporateElementList(CorporateElementList instance);
    partial void UpdateCorporateElementList(CorporateElementList instance);
    partial void DeleteCorporateElementList(CorporateElementList instance);
    partial void InsertCorporateElementSubmission(CorporateElementSubmission instance);
    partial void UpdateCorporateElementSubmission(CorporateElementSubmission instance);
    partial void DeleteCorporateElementSubmission(CorporateElementSubmission instance);
    partial void InsertCorporateKnowledgeBaseElement(CorporateKnowledgeBaseElement instance);
    partial void UpdateCorporateKnowledgeBaseElement(CorporateKnowledgeBaseElement instance);
    partial void DeleteCorporateKnowledgeBaseElement(CorporateKnowledgeBaseElement instance);
    partial void InsertCredential(Credential instance);
    partial void UpdateCredential(Credential instance);
    partial void DeleteCredential(Credential instance);
    partial void InsertCustomReport(CustomReport instance);
    partial void UpdateCustomReport(CustomReport instance);
    partial void DeleteCustomReport(CustomReport instance);
    partial void InsertEnterprise(Enterprise instance);
    partial void UpdateEnterprise(Enterprise instance);
    partial void DeleteEnterprise(Enterprise instance);
    partial void InsertEnterpriseLibrarySection(EnterpriseLibrarySection instance);
    partial void UpdateEnterpriseLibrarySection(EnterpriseLibrarySection instance);
    partial void DeleteEnterpriseLibrarySection(EnterpriseLibrarySection instance);
    partial void InsertEnterpriseReportSection(EnterpriseReportSection instance);
    partial void UpdateEnterpriseReportSection(EnterpriseReportSection instance);
    partial void DeleteEnterpriseReportSection(EnterpriseReportSection instance);
    partial void InsertEnterpriseToolSection(EnterpriseToolSection instance);
    partial void UpdateEnterpriseToolSection(EnterpriseToolSection instance);
    partial void DeleteEnterpriseToolSection(EnterpriseToolSection instance);
    partial void InsertFilledAnswer(FilledAnswer instance);
    partial void UpdateFilledAnswer(FilledAnswer instance);
    partial void DeleteFilledAnswer(FilledAnswer instance);
    partial void InsertFilledAnswersOption(FilledAnswersOption instance);
    partial void UpdateFilledAnswersOption(FilledAnswersOption instance);
    partial void DeleteFilledAnswersOption(FilledAnswersOption instance);
    partial void InsertFilledQuestionnaire(FilledQuestionnaire instance);
    partial void UpdateFilledQuestionnaire(FilledQuestionnaire instance);
    partial void DeleteFilledQuestionnaire(FilledQuestionnaire instance);
    partial void InsertFilledTemplateDocument(FilledTemplateDocument instance);
    partial void UpdateFilledTemplateDocument(FilledTemplateDocument instance);
    partial void DeleteFilledTemplateDocument(FilledTemplateDocument instance);
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    partial void InsertKnowledgeBase(KnowledgeBase instance);
    partial void UpdateKnowledgeBase(KnowledgeBase instance);
    partial void DeleteKnowledgeBase(KnowledgeBase instance);
    partial void InsertKnowledgeBaseTemplate(KnowledgeBaseTemplate instance);
    partial void UpdateKnowledgeBaseTemplate(KnowledgeBaseTemplate instance);
    partial void DeleteKnowledgeBaseTemplate(KnowledgeBaseTemplate instance);
    partial void InsertKnowledgeBaseType(KnowledgeBaseType instance);
    partial void UpdateKnowledgeBaseType(KnowledgeBaseType instance);
    partial void DeleteKnowledgeBaseType(KnowledgeBaseType instance);
    partial void InsertLibraryDocument(LibraryDocument instance);
    partial void UpdateLibraryDocument(LibraryDocument instance);
    partial void DeleteLibraryDocument(LibraryDocument instance);
    partial void InsertLibrarySection(LibrarySection instance);
    partial void UpdateLibrarySection(LibrarySection instance);
    partial void DeleteLibrarySection(LibrarySection instance);
    partial void InsertLoginRecord(LoginRecord instance);
    partial void UpdateLoginRecord(LoginRecord instance);
    partial void DeleteLoginRecord(LoginRecord instance);
    partial void InsertMedicalGroup(MedicalGroup instance);
    partial void UpdateMedicalGroup(MedicalGroup instance);
    partial void DeleteMedicalGroup(MedicalGroup instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPageContent(PageContent instance);
    partial void UpdatePageContent(PageContent instance);
    partial void DeletePageContent(PageContent instance);
    partial void InsertPractice(Practice instance);
    partial void UpdatePractice(Practice instance);
    partial void DeletePractice(Practice instance);
    partial void InsertPracticeConsultant(PracticeConsultant instance);
    partial void UpdatePracticeConsultant(PracticeConsultant instance);
    partial void DeletePracticeConsultant(PracticeConsultant instance);
    partial void InsertPracticeRole(PracticeRole instance);
    partial void UpdatePracticeRole(PracticeRole instance);
    partial void DeletePracticeRole(PracticeRole instance);
    partial void InsertPracticeSite(PracticeSite instance);
    partial void UpdatePracticeSite(PracticeSite instance);
    partial void DeletePracticeSite(PracticeSite instance);
    partial void InsertPracticeSiteSubmission(PracticeSiteSubmission instance);
    partial void UpdatePracticeSiteSubmission(PracticeSiteSubmission instance);
    partial void DeletePracticeSiteSubmission(PracticeSiteSubmission instance);
    partial void InsertPracticeSize(PracticeSize instance);
    partial void UpdatePracticeSize(PracticeSize instance);
    partial void DeletePracticeSize(PracticeSize instance);
    partial void InsertPracticeUser(PracticeUser instance);
    partial void UpdatePracticeUser(PracticeUser instance);
    partial void DeletePracticeUser(PracticeUser instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectAssignment(ProjectAssignment instance);
    partial void UpdateProjectAssignment(ProjectAssignment instance);
    partial void DeleteProjectAssignment(ProjectAssignment instance);
    partial void InsertProjectDocument(ProjectDocument instance);
    partial void UpdateProjectDocument(ProjectDocument instance);
    partial void DeleteProjectDocument(ProjectDocument instance);
    partial void InsertProjectSection(ProjectSection instance);
    partial void UpdateProjectSection(ProjectSection instance);
    partial void DeleteProjectSection(ProjectSection instance);
    partial void InsertProjectUsage(ProjectUsage instance);
    partial void UpdateProjectUsage(ProjectUsage instance);
    partial void DeleteProjectUsage(ProjectUsage instance);
    partial void InsertProviderType(ProviderType instance);
    partial void UpdateProviderType(ProviderType instance);
    partial void DeleteProviderType(ProviderType instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertReportSection(ReportSection instance);
    partial void UpdateReportSection(ReportSection instance);
    partial void DeleteReportSection(ReportSection instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertScoringRule(ScoringRule instance);
    partial void UpdateScoringRule(ScoringRule instance);
    partial void DeleteScoringRule(ScoringRule instance);
    partial void InsertSectionType(SectionType instance);
    partial void UpdateSectionType(SectionType instance);
    partial void DeleteSectionType(SectionType instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertStandardDocument(StandardDocument instance);
    partial void UpdateStandardDocument(StandardDocument instance);
    partial void DeleteStandardDocument(StandardDocument instance);
    partial void InsertStandardFolder(StandardFolder instance);
    partial void UpdateStandardFolder(StandardFolder instance);
    partial void DeleteStandardFolder(StandardFolder instance);
    partial void InsertSubmissionStatus(SubmissionStatus instance);
    partial void UpdateSubmissionStatus(SubmissionStatus instance);
    partial void DeleteSubmissionStatus(SubmissionStatus instance);
    partial void InsertSystemInfo(SystemInfo instance);
    partial void UpdateSystemInfo(SystemInfo instance);
    partial void DeleteSystemInfo(SystemInfo instance);
    partial void InsertTemplate(Template instance);
    partial void UpdateTemplate(Template instance);
    partial void DeleteTemplate(Template instance);
    partial void InsertTemplateCategory(TemplateCategory instance);
    partial void UpdateTemplateCategory(TemplateCategory instance);
    partial void DeleteTemplateCategory(TemplateCategory instance);
    partial void InsertTemplateDocument(TemplateDocument instance);
    partial void UpdateTemplateDocument(TemplateDocument instance);
    partial void DeleteTemplateDocument(TemplateDocument instance);
    partial void InsertTemplateOption(TemplateOption instance);
    partial void UpdateTemplateOption(TemplateOption instance);
    partial void DeleteTemplateOption(TemplateOption instance);
    partial void InsertTemplateOptionAssignment(TemplateOptionAssignment instance);
    partial void UpdateTemplateOptionAssignment(TemplateOptionAssignment instance);
    partial void DeleteTemplateOptionAssignment(TemplateOptionAssignment instance);
    partial void InsertTemplateSubmitAction(TemplateSubmitAction instance);
    partial void UpdateTemplateSubmitAction(TemplateSubmitAction instance);
    partial void DeleteTemplateSubmitAction(TemplateSubmitAction instance);
    partial void InsertTemplateType(TemplateType instance);
    partial void UpdateTemplateType(TemplateType instance);
    partial void DeleteTemplateType(TemplateType instance);
    partial void InsertToolDocument(ToolDocument instance);
    partial void UpdateToolDocument(ToolDocument instance);
    partial void DeleteToolDocument(ToolDocument instance);
    partial void InsertToolLevel(ToolLevel instance);
    partial void UpdateToolLevel(ToolLevel instance);
    partial void DeleteToolLevel(ToolLevel instance);
    partial void InsertToolSection(ToolSection instance);
    partial void UpdateToolSection(ToolSection instance);
    partial void DeleteToolSection(ToolSection instance);
    #endregion
		
		public BMTDataContext() : 
				base(global::BMTBLL.Properties.Settings.Default.BMTConnectionString9, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BMTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessLevel> AccessLevels
		{
			get
			{
				return this.GetTable<AccessLevel>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<AnswerType> AnswerTypes
		{
			get
			{
				return this.GetTable<AnswerType>();
			}
		}
		
		public System.Data.Linq.Table<AnswerTypeEnum> AnswerTypeEnums
		{
			get
			{
				return this.GetTable<AnswerTypeEnum>();
			}
		}
		
		public System.Data.Linq.Table<AnswerTypeWeightage> AnswerTypeWeightages
		{
			get
			{
				return this.GetTable<AnswerTypeWeightage>();
			}
		}
		
		public System.Data.Linq.Table<AssetType> AssetTypes
		{
			get
			{
				return this.GetTable<AssetType>();
			}
		}
		
		public System.Data.Linq.Table<ConsultantType> ConsultantTypes
		{
			get
			{
				return this.GetTable<ConsultantType>();
			}
		}
		
		public System.Data.Linq.Table<ConsultantUser> ConsultantUsers
		{
			get
			{
				return this.GetTable<ConsultantUser>();
			}
		}
		
		public System.Data.Linq.Table<ConsultingUserAccess> ConsultingUserAccesses
		{
			get
			{
				return this.GetTable<ConsultingUserAccess>();
			}
		}
		
		public System.Data.Linq.Table<CorporateElementList> CorporateElementLists
		{
			get
			{
				return this.GetTable<CorporateElementList>();
			}
		}
		
		public System.Data.Linq.Table<CorporateElementSubmission> CorporateElementSubmissions
		{
			get
			{
				return this.GetTable<CorporateElementSubmission>();
			}
		}
		
		public System.Data.Linq.Table<CorporateKnowledgeBaseElement> CorporateKnowledgeBaseElements
		{
			get
			{
				return this.GetTable<CorporateKnowledgeBaseElement>();
			}
		}
		
		public System.Data.Linq.Table<Credential> Credentials
		{
			get
			{
				return this.GetTable<Credential>();
			}
		}
		
		public System.Data.Linq.Table<CustomReport> CustomReports
		{
			get
			{
				return this.GetTable<CustomReport>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTypeMapping> DocumentTypeMappings
		{
			get
			{
				return this.GetTable<DocumentTypeMapping>();
			}
		}
		
		public System.Data.Linq.Table<Enterprise> Enterprises
		{
			get
			{
				return this.GetTable<Enterprise>();
			}
		}
		
		public System.Data.Linq.Table<EnterpriseLibrarySection> EnterpriseLibrarySections
		{
			get
			{
				return this.GetTable<EnterpriseLibrarySection>();
			}
		}
		
		public System.Data.Linq.Table<EnterpriseReportSection> EnterpriseReportSections
		{
			get
			{
				return this.GetTable<EnterpriseReportSection>();
			}
		}
		
		public System.Data.Linq.Table<EnterpriseToolSection> EnterpriseToolSections
		{
			get
			{
				return this.GetTable<EnterpriseToolSection>();
			}
		}
		
		public System.Data.Linq.Table<FilledAnswer> FilledAnswers
		{
			get
			{
				return this.GetTable<FilledAnswer>();
			}
		}
		
		public System.Data.Linq.Table<FilledAnswersOption> FilledAnswersOptions
		{
			get
			{
				return this.GetTable<FilledAnswersOption>();
			}
		}
		
		public System.Data.Linq.Table<FilledQuestionnaire> FilledQuestionnaires
		{
			get
			{
				return this.GetTable<FilledQuestionnaire>();
			}
		}
		
		public System.Data.Linq.Table<FilledTemplateDocument> FilledTemplateDocuments
		{
			get
			{
				return this.GetTable<FilledTemplateDocument>();
			}
		}
		
		public System.Data.Linq.Table<Form> Forms
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
		
		public System.Data.Linq.Table<KnowledgeBase> KnowledgeBases
		{
			get
			{
				return this.GetTable<KnowledgeBase>();
			}
		}
		
		public System.Data.Linq.Table<KnowledgeBaseTemplate> KnowledgeBaseTemplates
		{
			get
			{
				return this.GetTable<KnowledgeBaseTemplate>();
			}
		}
		
		public System.Data.Linq.Table<KnowledgeBaseType> KnowledgeBaseTypes
		{
			get
			{
				return this.GetTable<KnowledgeBaseType>();
			}
		}
		
		public System.Data.Linq.Table<LibraryDocument> LibraryDocuments
		{
			get
			{
				return this.GetTable<LibraryDocument>();
			}
		}
		
		public System.Data.Linq.Table<LibrarySection> LibrarySections
		{
			get
			{
				return this.GetTable<LibrarySection>();
			}
		}
		
		public System.Data.Linq.Table<LoginRecord> LoginRecords
		{
			get
			{
				return this.GetTable<LoginRecord>();
			}
		}
		
		public System.Data.Linq.Table<MedicalGroup> MedicalGroups
		{
			get
			{
				return this.GetTable<MedicalGroup>();
			}
		}
		
		public System.Data.Linq.Table<NCQASubmissionRequest> NCQASubmissionRequests
		{
			get
			{
				return this.GetTable<NCQASubmissionRequest>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PageContent> PageContents
		{
			get
			{
				return this.GetTable<PageContent>();
			}
		}
		
		public System.Data.Linq.Table<Practice> Practices
		{
			get
			{
				return this.GetTable<Practice>();
			}
		}
		
		public System.Data.Linq.Table<PracticeConsultant> PracticeConsultants
		{
			get
			{
				return this.GetTable<PracticeConsultant>();
			}
		}
		
		public System.Data.Linq.Table<PracticeRole> PracticeRoles
		{
			get
			{
				return this.GetTable<PracticeRole>();
			}
		}
		
		public System.Data.Linq.Table<PracticeSite> PracticeSites
		{
			get
			{
				return this.GetTable<PracticeSite>();
			}
		}
		
		public System.Data.Linq.Table<PracticeSiteSubmission> PracticeSiteSubmissions
		{
			get
			{
				return this.GetTable<PracticeSiteSubmission>();
			}
		}
		
		public System.Data.Linq.Table<PracticeSize> PracticeSizes
		{
			get
			{
				return this.GetTable<PracticeSize>();
			}
		}
		
		public System.Data.Linq.Table<PracticeUser> PracticeUsers
		{
			get
			{
				return this.GetTable<PracticeUser>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this.GetTable<ProjectAssignment>();
			}
		}
		
		public System.Data.Linq.Table<ProjectDocument> ProjectDocuments
		{
			get
			{
				return this.GetTable<ProjectDocument>();
			}
		}
		
		public System.Data.Linq.Table<ProjectSection> ProjectSections
		{
			get
			{
				return this.GetTable<ProjectSection>();
			}
		}
		
		public System.Data.Linq.Table<ProjectUsage> ProjectUsages
		{
			get
			{
				return this.GetTable<ProjectUsage>();
			}
		}
		
		public System.Data.Linq.Table<ProviderType> ProviderTypes
		{
			get
			{
				return this.GetTable<ProviderType>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<ReportSection> ReportSections
		{
			get
			{
				return this.GetTable<ReportSection>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ScoringRule> ScoringRules
		{
			get
			{
				return this.GetTable<ScoringRule>();
			}
		}
		
		public System.Data.Linq.Table<SectionType> SectionTypes
		{
			get
			{
				return this.GetTable<SectionType>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Specialities
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<StandardDocument> StandardDocuments
		{
			get
			{
				return this.GetTable<StandardDocument>();
			}
		}
		
		public System.Data.Linq.Table<StandardFolder> StandardFolders
		{
			get
			{
				return this.GetTable<StandardFolder>();
			}
		}
		
		public System.Data.Linq.Table<SubmissionStatus> SubmissionStatus
		{
			get
			{
				return this.GetTable<SubmissionStatus>();
			}
		}
		
		public System.Data.Linq.Table<SystemInfo> SystemInfos
		{
			get
			{
				return this.GetTable<SystemInfo>();
			}
		}
		
		public System.Data.Linq.Table<Template> Templates
		{
			get
			{
				return this.GetTable<Template>();
			}
		}
		
		public System.Data.Linq.Table<TemplateCategory> TemplateCategories
		{
			get
			{
				return this.GetTable<TemplateCategory>();
			}
		}
		
		public System.Data.Linq.Table<TemplateDocument> TemplateDocuments
		{
			get
			{
				return this.GetTable<TemplateDocument>();
			}
		}
		
		public System.Data.Linq.Table<TemplateOption> TemplateOptions
		{
			get
			{
				return this.GetTable<TemplateOption>();
			}
		}
		
		public System.Data.Linq.Table<TemplateOptionAssignment> TemplateOptionAssignments
		{
			get
			{
				return this.GetTable<TemplateOptionAssignment>();
			}
		}
		
		public System.Data.Linq.Table<TemplateSubmitAction> TemplateSubmitActions
		{
			get
			{
				return this.GetTable<TemplateSubmitAction>();
			}
		}
		
		public System.Data.Linq.Table<TemplateType> TemplateTypes
		{
			get
			{
				return this.GetTable<TemplateType>();
			}
		}
		
		public System.Data.Linq.Table<ToolDocument> ToolDocuments
		{
			get
			{
				return this.GetTable<ToolDocument>();
			}
		}
		
		public System.Data.Linq.Table<ToolLevel> ToolLevels
		{
			get
			{
				return this.GetTable<ToolLevel>();
			}
		}
		
		public System.Data.Linq.Table<ToolSection> ToolSections
		{
			get
			{
				return this.GetTable<ToolSection>();
			}
		}

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_All_KnowledgeBase_Template")]
        public List<KBTemplateElement> usp_Get_All_KnowledgeBase_Template([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_TemplateId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ProjectUsageId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_SiteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ParentId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_TemplateId, param_ProjectUsageId, param_SiteId, param_ParentId);
            return ((List<KBTemplateElement>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Save_FilledAnswers")]
        public int usp_Save_FilledAnswers([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_TemplateId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ProjectUsageId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_SiteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ParentKnowledgeBaseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Bit")] System.Nullable<bool> param_InsertParent)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_TemplateId, param_ProjectUsageId, param_SiteId, param_ParentKnowledgeBaseId, param_InsertParent);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_Answer_Type_Weightage")]
        public int usp_Get_Answer_Type_Weightage([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_AnsTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ProjectUsageId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_SiteId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_KBTempId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_AnsTypeId, param_ProjectUsageId, param_SiteId, param_KBTempId);
            return ((int)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_Group_Project_Status")]
        public ISingleResult<GroupProjectStatusDetails> usp_Get_Group_Project_Status([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_Factors, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_ConsultantIds, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_PracticeSizeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_MedicalGroupId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_Factors, param_ConsultantIds, param_PracticeSizeId, param_MedicalGroupId);
            return ((ISingleResult<GroupProjectStatusDetails>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_OverAll_Project_Status")]
        public ISingleResult<OverAllProjectStatusDetails> usp_Get_OverAll_Project_Status([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_Factors, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_ConsultantIds, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_MedicalGroupId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_Factors, param_ConsultantIds, param_MedicalGroupId);
            return ((ISingleResult<OverAllProjectStatusDetails>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_OverAllBar_Project_Status")]
        public ISingleResult<OverAllBarProjectStatusDetails> usp_Get_OverAllBar_Project_Status([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_Factors, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_ConsultantIds, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_PracticeSizeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_MedicalGroupId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_Factors, param_ConsultantIds, param_PracticeSizeId, param_MedicalGroupId);
            return ((ISingleResult<OverAllBarProjectStatusDetails>)(result.ReturnValue));
        }

        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_PCMH_Report_Data")]
        public ISingleResult<PCMHStatusReport> usp_Get_PCMH_Report_Data([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_Factors, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_ConsultantIds, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(MAX)")] string param_PracticeSizeId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(20)")] string param_PercentComplete, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_MedicalGroupId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_Factors, param_ConsultantIds, param_PracticeSizeId, param_PercentComplete, param_MedicalGroupId);
            return ((ISingleResult<PCMHStatusReport>)(result.ReturnValue));
        }
        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_All_Template_Documents")]
        public ISingleResult<usp_Get_All_Template_DocumentsResult> usp_Get_All_Template_Documents([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_TemplateId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_ProjectUsageId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_SiteId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_TemplateId, param_ProjectUsageId, param_SiteId);
            return ((ISingleResult<usp_Get_All_Template_DocumentsResult>)(result.ReturnValue));
        }
        [global::System.Data.Linq.Mapping.FunctionAttribute(Name = "dbo.usp_Get_Practice_Details")]
        public ISingleResult<PracticeDetails> usp_Get_Practice_Details([global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_EnterpriseId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "Int")] System.Nullable<int> param_UserId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType = "VarChar(100)")] string param_UserType)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param_EnterpriseId, param_UserId, param_UserType);
            return ((ISingleResult<PracticeDetails>)(result.ReturnValue));
        }
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessLevel")]
	public partial class AccessLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessLevelId;
		
		private string _AccessLevelName;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<KnowledgeBase> _KnowledgeBases;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntitySet<Template> _Templates;
		
		private EntitySet<TemplateOption> _TemplateOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    partial void OnAccessLevelNameChanging(string value);
    partial void OnAccessLevelNameChanged();
    #endregion
		
		public AccessLevel()
		{
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._KnowledgeBases = new EntitySet<KnowledgeBase>(new Action<KnowledgeBase>(this.attach_KnowledgeBases), new Action<KnowledgeBase>(this.detach_KnowledgeBases));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._TemplateOptions = new EntitySet<TemplateOption>(new Action<TemplateOption>(this.attach_TemplateOptions), new Action<TemplateOption>(this.detach_TemplateOptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccessLevelName
		{
			get
			{
				return this._AccessLevelName;
			}
			set
			{
				if ((this._AccessLevelName != value))
				{
					this.OnAccessLevelNameChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelName = value;
					this.SendPropertyChanged("AccessLevelName");
					this.OnAccessLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Form", Storage="_Forms", ThisKey="AccessLevelId", OtherKey="AccessLevelId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_KnowledgeBase", Storage="_KnowledgeBases", ThisKey="AccessLevelId", OtherKey="AccessId")]
		public EntitySet<KnowledgeBase> KnowledgeBases
		{
			get
			{
				return this._KnowledgeBases;
			}
			set
			{
				this._KnowledgeBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Project", Storage="_Projects", ThisKey="AccessLevelId", OtherKey="AccessLevelId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_ProjectSection", Storage="_ProjectSections", ThisKey="AccessLevelId", OtherKey="AccessLevelId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Template", Storage="_Templates", ThisKey="AccessLevelId", OtherKey="AccessLevelId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_TemplateOption", Storage="_TemplateOptions", ThisKey="AccessLevelId", OtherKey="AccessLevelId")]
		public EntitySet<TemplateOption> TemplateOptions
		{
			get
			{
				return this._TemplateOptions;
			}
			set
			{
				this._TemplateOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
		
		private void attach_KnowledgeBases(KnowledgeBase entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_KnowledgeBases(KnowledgeBase entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
		
		private void attach_TemplateOptions(TemplateOption entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = this;
		}
		
		private void detach_TemplateOptions(TemplateOption entity)
		{
			this.SendPropertyChanging();
			entity.AccessLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsActive;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _LastActivitydate;
		
		private int _RoleId;
		
		private System.Nullable<bool> _IsDisclaimerPass;
		
		private System.Nullable<bool> _IsSRADisclaimerPass;
		
		private System.Nullable<int> _HomeDashboard;
		
		private System.Xml.Linq.XElement _Preferences;
		
		private EntitySet<ConsultingUserAccess> _ConsultingUserAccesses;
		
		private EntitySet<FilledAnswer> _FilledAnswers;
		
		private EntitySet<LoginRecord> _LoginRecords;
		
		private EntitySet<PracticeSiteSubmission> _PracticeSiteSubmissions;
		
		private EntityRef<PracticeUser> _PracticeUser;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLastActivitydateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivitydateChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnIsDisclaimerPassChanging(System.Nullable<bool> value);
    partial void OnIsDisclaimerPassChanged();
    partial void OnIsSRADisclaimerPassChanging(System.Nullable<bool> value);
    partial void OnIsSRADisclaimerPassChanged();
    partial void OnHomeDashboardChanging(System.Nullable<int> value);
    partial void OnHomeDashboardChanged();
    partial void OnPreferencesChanging(System.Xml.Linq.XElement value);
    partial void OnPreferencesChanged();
    #endregion
		
		public User()
		{
			this._ConsultingUserAccesses = new EntitySet<ConsultingUserAccess>(new Action<ConsultingUserAccess>(this.attach_ConsultingUserAccesses), new Action<ConsultingUserAccess>(this.detach_ConsultingUserAccesses));
			this._FilledAnswers = new EntitySet<FilledAnswer>(new Action<FilledAnswer>(this.attach_FilledAnswers), new Action<FilledAnswer>(this.detach_FilledAnswers));
			this._LoginRecords = new EntitySet<LoginRecord>(new Action<LoginRecord>(this.attach_LoginRecords), new Action<LoginRecord>(this.detach_LoginRecords));
			this._PracticeSiteSubmissions = new EntitySet<PracticeSiteSubmission>(new Action<PracticeSiteSubmission>(this.attach_PracticeSiteSubmissions), new Action<PracticeSiteSubmission>(this.detach_PracticeSiteSubmissions));
			this._PracticeUser = default(EntityRef<PracticeUser>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivitydate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivitydate
		{
			get
			{
				return this._LastActivitydate;
			}
			set
			{
				if ((this._LastActivitydate != value))
				{
					this.OnLastActivitydateChanging(value);
					this.SendPropertyChanging();
					this._LastActivitydate = value;
					this.SendPropertyChanged("LastActivitydate");
					this.OnLastActivitydateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisclaimerPass", DbType="Bit")]
		public System.Nullable<bool> IsDisclaimerPass
		{
			get
			{
				return this._IsDisclaimerPass;
			}
			set
			{
				if ((this._IsDisclaimerPass != value))
				{
					this.OnIsDisclaimerPassChanging(value);
					this.SendPropertyChanging();
					this._IsDisclaimerPass = value;
					this.SendPropertyChanged("IsDisclaimerPass");
					this.OnIsDisclaimerPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSRADisclaimerPass", DbType="Bit")]
		public System.Nullable<bool> IsSRADisclaimerPass
		{
			get
			{
				return this._IsSRADisclaimerPass;
			}
			set
			{
				if ((this._IsSRADisclaimerPass != value))
				{
					this.OnIsSRADisclaimerPassChanging(value);
					this.SendPropertyChanging();
					this._IsSRADisclaimerPass = value;
					this.SendPropertyChanged("IsSRADisclaimerPass");
					this.OnIsSRADisclaimerPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeDashboard", DbType="Int")]
		public System.Nullable<int> HomeDashboard
		{
			get
			{
				return this._HomeDashboard;
			}
			set
			{
				if ((this._HomeDashboard != value))
				{
					this.OnHomeDashboardChanging(value);
					this.SendPropertyChanging();
					this._HomeDashboard = value;
					this.SendPropertyChanged("HomeDashboard");
					this.OnHomeDashboardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preferences", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Preferences
		{
			get
			{
				return this._Preferences;
			}
			set
			{
				if ((this._Preferences != value))
				{
					this.OnPreferencesChanging(value);
					this.SendPropertyChanging();
					this._Preferences = value;
					this.SendPropertyChanged("Preferences");
					this.OnPreferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConsultingUserAccess", Storage="_ConsultingUserAccesses", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ConsultingUserAccess> ConsultingUserAccesses
		{
			get
			{
				return this._ConsultingUserAccesses;
			}
			set
			{
				this._ConsultingUserAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FilledAnswer", Storage="_FilledAnswers", ThisKey="UserId", OtherKey="UpdatedBy")]
		public EntitySet<FilledAnswer> FilledAnswers
		{
			get
			{
				return this._FilledAnswers;
			}
			set
			{
				this._FilledAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginRecord", Storage="_LoginRecords", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<LoginRecord> LoginRecords
		{
			get
			{
				return this._LoginRecords;
			}
			set
			{
				this._LoginRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PracticeSiteSubmission", Storage="_PracticeSiteSubmissions", ThisKey="UserId", OtherKey="updatedby")]
		public EntitySet<PracticeSiteSubmission> PracticeSiteSubmissions
		{
			get
			{
				return this._PracticeSiteSubmissions;
			}
			set
			{
				this._PracticeSiteSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PracticeUser", Storage="_PracticeUser", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public PracticeUser PracticeUser
		{
			get
			{
				return this._PracticeUser.Entity;
			}
			set
			{
				PracticeUser previousValue = this._PracticeUser.Entity;
				if (((previousValue != value) 
							|| (this._PracticeUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeUser.Entity = null;
						previousValue.User = null;
					}
					this._PracticeUser.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("PracticeUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsultingUserAccesses(ConsultingUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ConsultingUserAccesses(ConsultingUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LoginRecords(LoginRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LoginRecords(LoginRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PracticeSiteSubmissions(PracticeSiteSubmission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PracticeSiteSubmissions(PracticeSiteSubmission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _PrimaryAddress;
		
		private string _SecondaryAddress;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Telephone;
		
		private string _Mobile;
		
		private string _Fax;
		
		private string _Email;
		
		private EntitySet<Enterprise> _Enterprises;
		
		private EntitySet<MedicalGroup> _MedicalGroups;
		
		private EntitySet<Practice> _Practices;
		
		private EntitySet<PracticeSite> _PracticeSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnPrimaryAddressChanging(string value);
    partial void OnPrimaryAddressChanged();
    partial void OnSecondaryAddressChanging(string value);
    partial void OnSecondaryAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Address()
		{
			this._Enterprises = new EntitySet<Enterprise>(new Action<Enterprise>(this.attach_Enterprises), new Action<Enterprise>(this.detach_Enterprises));
			this._MedicalGroups = new EntitySet<MedicalGroup>(new Action<MedicalGroup>(this.attach_MedicalGroups), new Action<MedicalGroup>(this.detach_MedicalGroups));
			this._Practices = new EntitySet<Practice>(new Action<Practice>(this.attach_Practices), new Action<Practice>(this.detach_Practices));
			this._PracticeSites = new EntitySet<PracticeSite>(new Action<PracticeSite>(this.attach_PracticeSites), new Action<PracticeSite>(this.detach_PracticeSites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PrimaryAddress
		{
			get
			{
				return this._PrimaryAddress;
			}
			set
			{
				if ((this._PrimaryAddress != value))
				{
					this.OnPrimaryAddressChanging(value);
					this.SendPropertyChanging();
					this._PrimaryAddress = value;
					this.SendPropertyChanged("PrimaryAddress");
					this.OnPrimaryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryAddress", DbType="VarChar(50)")]
		public string SecondaryAddress
		{
			get
			{
				return this._SecondaryAddress;
			}
			set
			{
				if ((this._SecondaryAddress != value))
				{
					this.OnSecondaryAddressChanging(value);
					this.SendPropertyChanging();
					this._SecondaryAddress = value;
					this.SendPropertyChanged("SecondaryAddress");
					this.OnSecondaryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(30)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(30)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(30)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Enterprise", Storage="_Enterprises", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Enterprise> Enterprises
		{
			get
			{
				return this._Enterprises;
			}
			set
			{
				this._Enterprises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_MedicalGroup", Storage="_MedicalGroups", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<MedicalGroup> MedicalGroups
		{
			get
			{
				return this._MedicalGroups;
			}
			set
			{
				this._MedicalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Practice", Storage="_Practices", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Practice> Practices
		{
			get
			{
				return this._Practices;
			}
			set
			{
				this._Practices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PracticeSite", Storage="_PracticeSites", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<PracticeSite> PracticeSites
		{
			get
			{
				return this._PracticeSites;
			}
			set
			{
				this._PracticeSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Enterprises(Enterprise entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Enterprises(Enterprise entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_MedicalGroups(MedicalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_MedicalGroups(MedicalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerType")]
	public partial class AnswerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerTypeId;
		
		private string _AnswerType1;
		
		private EntitySet<AnswerTypeEnum> _AnswerTypeEnums;
		
		private EntitySet<KnowledgeBaseTemplate> _KnowledgeBaseTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerTypeIdChanging(int value);
    partial void OnAnswerTypeIdChanged();
    partial void OnAnswerType1Changing(string value);
    partial void OnAnswerType1Changed();
    #endregion
		
		public AnswerType()
		{
			this._AnswerTypeEnums = new EntitySet<AnswerTypeEnum>(new Action<AnswerTypeEnum>(this.attach_AnswerTypeEnums), new Action<AnswerTypeEnum>(this.detach_AnswerTypeEnums));
			this._KnowledgeBaseTemplates = new EntitySet<KnowledgeBaseTemplate>(new Action<KnowledgeBaseTemplate>(this.attach_KnowledgeBaseTemplates), new Action<KnowledgeBaseTemplate>(this.detach_KnowledgeBaseTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerTypeId
		{
			get
			{
				return this._AnswerTypeId;
			}
			set
			{
				if ((this._AnswerTypeId != value))
				{
					this.OnAnswerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeId = value;
					this.SendPropertyChanged("AnswerTypeId");
					this.OnAnswerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AnswerType", Storage="_AnswerType1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AnswerType1
		{
			get
			{
				return this._AnswerType1;
			}
			set
			{
				if ((this._AnswerType1 != value))
				{
					this.OnAnswerType1Changing(value);
					this.SendPropertyChanging();
					this._AnswerType1 = value;
					this.SendPropertyChanged("AnswerType1");
					this.OnAnswerType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerType_AnswerTypeEnum", Storage="_AnswerTypeEnums", ThisKey="AnswerTypeId", OtherKey="AnswerTypeId")]
		public EntitySet<AnswerTypeEnum> AnswerTypeEnums
		{
			get
			{
				return this._AnswerTypeEnums;
			}
			set
			{
				this._AnswerTypeEnums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerType_KnowledgeBaseTemplate", Storage="_KnowledgeBaseTemplates", ThisKey="AnswerTypeId", OtherKey="AnswerTypeId")]
		public EntitySet<KnowledgeBaseTemplate> KnowledgeBaseTemplates
		{
			get
			{
				return this._KnowledgeBaseTemplates;
			}
			set
			{
				this._KnowledgeBaseTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerTypeEnums(AnswerTypeEnum entity)
		{
			this.SendPropertyChanging();
			entity.AnswerType = this;
		}
		
		private void detach_AnswerTypeEnums(AnswerTypeEnum entity)
		{
			this.SendPropertyChanging();
			entity.AnswerType = null;
		}
		
		private void attach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.AnswerType = this;
		}
		
		private void detach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.AnswerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerTypeEnum")]
	public partial class AnswerTypeEnum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerTypeEnumId;
		
		private int _AnswerTypeId;
		
		private string _DiscreteValue;
		
		private EntitySet<AnswerTypeWeightage> _AnswerTypeWeightages;
		
		private EntitySet<FilledAnswer> _FilledAnswers;
		
		private EntityRef<AnswerType> _AnswerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerTypeEnumIdChanging(int value);
    partial void OnAnswerTypeEnumIdChanged();
    partial void OnAnswerTypeIdChanging(int value);
    partial void OnAnswerTypeIdChanged();
    partial void OnDiscreteValueChanging(string value);
    partial void OnDiscreteValueChanged();
    #endregion
		
		public AnswerTypeEnum()
		{
			this._AnswerTypeWeightages = new EntitySet<AnswerTypeWeightage>(new Action<AnswerTypeWeightage>(this.attach_AnswerTypeWeightages), new Action<AnswerTypeWeightage>(this.detach_AnswerTypeWeightages));
			this._FilledAnswers = new EntitySet<FilledAnswer>(new Action<FilledAnswer>(this.attach_FilledAnswers), new Action<FilledAnswer>(this.detach_FilledAnswers));
			this._AnswerType = default(EntityRef<AnswerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeEnumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerTypeEnumId
		{
			get
			{
				return this._AnswerTypeEnumId;
			}
			set
			{
				if ((this._AnswerTypeEnumId != value))
				{
					this.OnAnswerTypeEnumIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeEnumId = value;
					this.SendPropertyChanged("AnswerTypeEnumId");
					this.OnAnswerTypeEnumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeId", DbType="Int NOT NULL")]
		public int AnswerTypeId
		{
			get
			{
				return this._AnswerTypeId;
			}
			set
			{
				if ((this._AnswerTypeId != value))
				{
					if (this._AnswerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeId = value;
					this.SendPropertyChanged("AnswerTypeId");
					this.OnAnswerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscreteValue", DbType="NVarChar(20)")]
		public string DiscreteValue
		{
			get
			{
				return this._DiscreteValue;
			}
			set
			{
				if ((this._DiscreteValue != value))
				{
					this.OnDiscreteValueChanging(value);
					this.SendPropertyChanging();
					this._DiscreteValue = value;
					this.SendPropertyChanged("DiscreteValue");
					this.OnDiscreteValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerTypeEnum_AnswerTypeWeightage", Storage="_AnswerTypeWeightages", ThisKey="AnswerTypeEnumId", OtherKey="AnswerTypeEnumId")]
		public EntitySet<AnswerTypeWeightage> AnswerTypeWeightages
		{
			get
			{
				return this._AnswerTypeWeightages;
			}
			set
			{
				this._AnswerTypeWeightages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerTypeEnum_FilledAnswer", Storage="_FilledAnswers", ThisKey="AnswerTypeEnumId", OtherKey="AnswerTypeEnumId")]
		public EntitySet<FilledAnswer> FilledAnswers
		{
			get
			{
				return this._FilledAnswers;
			}
			set
			{
				this._FilledAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerType_AnswerTypeEnum", Storage="_AnswerType", ThisKey="AnswerTypeId", OtherKey="AnswerTypeId", IsForeignKey=true)]
		public AnswerType AnswerType
		{
			get
			{
				return this._AnswerType.Entity;
			}
			set
			{
				AnswerType previousValue = this._AnswerType.Entity;
				if (((previousValue != value) 
							|| (this._AnswerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnswerType.Entity = null;
						previousValue.AnswerTypeEnums.Remove(this);
					}
					this._AnswerType.Entity = value;
					if ((value != null))
					{
						value.AnswerTypeEnums.Add(this);
						this._AnswerTypeId = value.AnswerTypeId;
					}
					else
					{
						this._AnswerTypeId = default(int);
					}
					this.SendPropertyChanged("AnswerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerTypeWeightages(AnswerTypeWeightage entity)
		{
			this.SendPropertyChanging();
			entity.AnswerTypeEnum = this;
		}
		
		private void detach_AnswerTypeWeightages(AnswerTypeWeightage entity)
		{
			this.SendPropertyChanging();
			entity.AnswerTypeEnum = null;
		}
		
		private void attach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.AnswerTypeEnum = this;
		}
		
		private void detach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.AnswerTypeEnum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnswerTypeWeightage")]
	public partial class AnswerTypeWeightage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerTypeWeightageId;
		
		private int _AnswerTypeEnumId;
		
		private int _KnowledgeBaseTemplateId;
		
		private int _Weightage;
		
		private EntityRef<AnswerTypeEnum> _AnswerTypeEnum;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerTypeWeightageIdChanging(int value);
    partial void OnAnswerTypeWeightageIdChanged();
    partial void OnAnswerTypeEnumIdChanging(int value);
    partial void OnAnswerTypeEnumIdChanged();
    partial void OnKnowledgeBaseTemplateIdChanging(int value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    partial void OnWeightageChanging(int value);
    partial void OnWeightageChanged();
    #endregion
		
		public AnswerTypeWeightage()
		{
			this._AnswerTypeEnum = default(EntityRef<AnswerTypeEnum>);
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeWeightageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerTypeWeightageId
		{
			get
			{
				return this._AnswerTypeWeightageId;
			}
			set
			{
				if ((this._AnswerTypeWeightageId != value))
				{
					this.OnAnswerTypeWeightageIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeWeightageId = value;
					this.SendPropertyChanged("AnswerTypeWeightageId");
					this.OnAnswerTypeWeightageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeEnumId", DbType="Int NOT NULL")]
		public int AnswerTypeEnumId
		{
			get
			{
				return this._AnswerTypeEnumId;
			}
			set
			{
				if ((this._AnswerTypeEnumId != value))
				{
					if (this._AnswerTypeEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerTypeEnumIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeEnumId = value;
					this.SendPropertyChanged("AnswerTypeEnumId");
					this.OnAnswerTypeEnumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int NOT NULL")]
		public int KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weightage", DbType="Int NOT NULL")]
		public int Weightage
		{
			get
			{
				return this._Weightage;
			}
			set
			{
				if ((this._Weightage != value))
				{
					this.OnWeightageChanging(value);
					this.SendPropertyChanging();
					this._Weightage = value;
					this.SendPropertyChanged("Weightage");
					this.OnWeightageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerTypeEnum_AnswerTypeWeightage", Storage="_AnswerTypeEnum", ThisKey="AnswerTypeEnumId", OtherKey="AnswerTypeEnumId", IsForeignKey=true)]
		public AnswerTypeEnum AnswerTypeEnum
		{
			get
			{
				return this._AnswerTypeEnum.Entity;
			}
			set
			{
				AnswerTypeEnum previousValue = this._AnswerTypeEnum.Entity;
				if (((previousValue != value) 
							|| (this._AnswerTypeEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnswerTypeEnum.Entity = null;
						previousValue.AnswerTypeWeightages.Remove(this);
					}
					this._AnswerTypeEnum.Entity = value;
					if ((value != null))
					{
						value.AnswerTypeWeightages.Add(this);
						this._AnswerTypeEnumId = value.AnswerTypeEnumId;
					}
					else
					{
						this._AnswerTypeEnumId = default(int);
					}
					this.SendPropertyChanged("AnswerTypeEnum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_AnswerTypeWeightage", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.AnswerTypeWeightages.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.AnswerTypeWeightages.Add(this);
						this._KnowledgeBaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgeBaseTemplateId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssetType")]
	public partial class AssetType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssetTypeId;
		
		private int _AssetParentId;
		
		private int _AssetCategoryId;
		
		private string _Name;
		
		private int _ValueKey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetTypeIdChanging(int value);
    partial void OnAssetTypeIdChanged();
    partial void OnAssetParentIdChanging(int value);
    partial void OnAssetParentIdChanged();
    partial void OnAssetCategoryIdChanging(int value);
    partial void OnAssetCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueKeyChanging(int value);
    partial void OnValueKeyChanged();
    #endregion
		
		public AssetType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssetTypeId
		{
			get
			{
				return this._AssetTypeId;
			}
			set
			{
				if ((this._AssetTypeId != value))
				{
					this.OnAssetTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AssetTypeId = value;
					this.SendPropertyChanged("AssetTypeId");
					this.OnAssetTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetParentId", DbType="Int NOT NULL")]
		public int AssetParentId
		{
			get
			{
				return this._AssetParentId;
			}
			set
			{
				if ((this._AssetParentId != value))
				{
					this.OnAssetParentIdChanging(value);
					this.SendPropertyChanging();
					this._AssetParentId = value;
					this.SendPropertyChanged("AssetParentId");
					this.OnAssetParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetCategoryId", DbType="Int NOT NULL")]
		public int AssetCategoryId
		{
			get
			{
				return this._AssetCategoryId;
			}
			set
			{
				if ((this._AssetCategoryId != value))
				{
					this.OnAssetCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AssetCategoryId = value;
					this.SendPropertyChanged("AssetCategoryId");
					this.OnAssetCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueKey", DbType="Int NOT NULL")]
		public int ValueKey
		{
			get
			{
				return this._ValueKey;
			}
			set
			{
				if ((this._ValueKey != value))
				{
					this.OnValueKeyChanging(value);
					this.SendPropertyChanging();
					this._ValueKey = value;
					this.SendPropertyChanged("ValueKey");
					this.OnValueKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsultantType")]
	public partial class ConsultantType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConsultantTypeId;
		
		private string _Name;
		
		private EntitySet<ConsultantUser> _ConsultantUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsultantTypeIdChanging(int value);
    partial void OnConsultantTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ConsultantType()
		{
			this._ConsultantUsers = new EntitySet<ConsultantUser>(new Action<ConsultantUser>(this.attach_ConsultantUsers), new Action<ConsultantUser>(this.detach_ConsultantUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsultantTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConsultantTypeId
		{
			get
			{
				return this._ConsultantTypeId;
			}
			set
			{
				if ((this._ConsultantTypeId != value))
				{
					this.OnConsultantTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ConsultantTypeId = value;
					this.SendPropertyChanged("ConsultantTypeId");
					this.OnConsultantTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsultantType_ConsultantUser", Storage="_ConsultantUsers", ThisKey="ConsultantTypeId", OtherKey="ConsultantTypeId")]
		public EntitySet<ConsultantUser> ConsultantUsers
		{
			get
			{
				return this._ConsultantUsers;
			}
			set
			{
				this._ConsultantUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsultantUsers(ConsultantUser entity)
		{
			this.SendPropertyChanging();
			entity.ConsultantType = this;
		}
		
		private void detach_ConsultantUsers(ConsultantUser entity)
		{
			this.SendPropertyChanging();
			entity.ConsultantType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsultantUser")]
	public partial class ConsultantUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<int> _ConsultantTypeId;
		
		private System.Nullable<bool> _Featured;
		
		private string _Website;
		
		private string _LogoPath;
		
		private string _Organization;
		
		private System.Nullable<int> _AddressId;
		
		private string _ServiceArea;
		
		private EntityRef<ConsultantType> _ConsultantType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnConsultantTypeIdChanging(System.Nullable<int> value);
    partial void OnConsultantTypeIdChanged();
    partial void OnFeaturedChanging(System.Nullable<bool> value);
    partial void OnFeaturedChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnLogoPathChanging(string value);
    partial void OnLogoPathChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnServiceAreaChanging(string value);
    partial void OnServiceAreaChanged();
    #endregion
		
		public ConsultantUser()
		{
			this._ConsultantType = default(EntityRef<ConsultantType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsultantTypeId", DbType="Int")]
		public System.Nullable<int> ConsultantTypeId
		{
			get
			{
				return this._ConsultantTypeId;
			}
			set
			{
				if ((this._ConsultantTypeId != value))
				{
					if (this._ConsultantType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsultantTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ConsultantTypeId = value;
					this.SendPropertyChanged("ConsultantTypeId");
					this.OnConsultantTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Featured", DbType="Bit")]
		public System.Nullable<bool> Featured
		{
			get
			{
				return this._Featured;
			}
			set
			{
				if ((this._Featured != value))
				{
					this.OnFeaturedChanging(value);
					this.SendPropertyChanging();
					this._Featured = value;
					this.SendPropertyChanged("Featured");
					this.OnFeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath", DbType="NVarChar(MAX)")]
		public string LogoPath
		{
			get
			{
				return this._LogoPath;
			}
			set
			{
				if ((this._LogoPath != value))
				{
					this.OnLogoPathChanging(value);
					this.SendPropertyChanging();
					this._LogoPath = value;
					this.SendPropertyChanged("LogoPath");
					this.OnLogoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organization", DbType="VarChar(50)")]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceArea", DbType="NVarChar(50)")]
		public string ServiceArea
		{
			get
			{
				return this._ServiceArea;
			}
			set
			{
				if ((this._ServiceArea != value))
				{
					this.OnServiceAreaChanging(value);
					this.SendPropertyChanging();
					this._ServiceArea = value;
					this.SendPropertyChanged("ServiceArea");
					this.OnServiceAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConsultantType_ConsultantUser", Storage="_ConsultantType", ThisKey="ConsultantTypeId", OtherKey="ConsultantTypeId", IsForeignKey=true)]
		public ConsultantType ConsultantType
		{
			get
			{
				return this._ConsultantType.Entity;
			}
			set
			{
				ConsultantType previousValue = this._ConsultantType.Entity;
				if (((previousValue != value) 
							|| (this._ConsultantType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConsultantType.Entity = null;
						previousValue.ConsultantUsers.Remove(this);
					}
					this._ConsultantType.Entity = value;
					if ((value != null))
					{
						value.ConsultantUsers.Add(this);
						this._ConsultantTypeId = value.ConsultantTypeId;
					}
					else
					{
						this._ConsultantTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ConsultantType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsultingUserAccess")]
	public partial class ConsultingUserAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConsultingUserAccessId;
		
		private int _UserId;
		
		private int _PracticeId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Practice> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsultingUserAccessIdChanging(int value);
    partial void OnConsultingUserAccessIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    #endregion
		
		public ConsultingUserAccess()
		{
			this._User = default(EntityRef<User>);
			this._Practice = default(EntityRef<Practice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsultingUserAccessId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConsultingUserAccessId
		{
			get
			{
				return this._ConsultingUserAccessId;
			}
			set
			{
				if ((this._ConsultingUserAccessId != value))
				{
					this.OnConsultingUserAccessIdChanging(value);
					this.SendPropertyChanging();
					this._ConsultingUserAccessId = value;
					this.SendPropertyChanged("ConsultingUserAccessId");
					this.OnConsultingUserAccessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int NOT NULL")]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConsultingUserAccess", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ConsultingUserAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ConsultingUserAccesses.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ConsultingUserAccess", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.ConsultingUserAccesses.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.ConsultingUserAccesses.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(int);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CorporateElementList")]
	public partial class CorporateElementList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CorporateElementId;
		
		private string _ElementName;
		
		private string _ElementDescription;
		
		private EntitySet<CorporateElementSubmission> _CorporateElementSubmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCorporateElementIdChanging(int value);
    partial void OnCorporateElementIdChanged();
    partial void OnElementNameChanging(string value);
    partial void OnElementNameChanged();
    partial void OnElementDescriptionChanging(string value);
    partial void OnElementDescriptionChanged();
    #endregion
		
		public CorporateElementList()
		{
			this._CorporateElementSubmissions = new EntitySet<CorporateElementSubmission>(new Action<CorporateElementSubmission>(this.attach_CorporateElementSubmissions), new Action<CorporateElementSubmission>(this.detach_CorporateElementSubmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorporateElementId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CorporateElementId
		{
			get
			{
				return this._CorporateElementId;
			}
			set
			{
				if ((this._CorporateElementId != value))
				{
					this.OnCorporateElementIdChanging(value);
					this.SendPropertyChanging();
					this._CorporateElementId = value;
					this.SendPropertyChanged("CorporateElementId");
					this.OnCorporateElementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ElementName
		{
			get
			{
				return this._ElementName;
			}
			set
			{
				if ((this._ElementName != value))
				{
					this.OnElementNameChanging(value);
					this.SendPropertyChanging();
					this._ElementName = value;
					this.SendPropertyChanged("ElementName");
					this.OnElementNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElementDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ElementDescription
		{
			get
			{
				return this._ElementDescription;
			}
			set
			{
				if ((this._ElementDescription != value))
				{
					this.OnElementDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ElementDescription = value;
					this.SendPropertyChanged("ElementDescription");
					this.OnElementDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CorporateElementList_CorporateElementSubmission", Storage="_CorporateElementSubmissions", ThisKey="CorporateElementId", OtherKey="CorporateElementId")]
		public EntitySet<CorporateElementSubmission> CorporateElementSubmissions
		{
			get
			{
				return this._CorporateElementSubmissions;
			}
			set
			{
				this._CorporateElementSubmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CorporateElementSubmissions(CorporateElementSubmission entity)
		{
			this.SendPropertyChanging();
			entity.CorporateElementList = this;
		}
		
		private void detach_CorporateElementSubmissions(CorporateElementSubmission entity)
		{
			this.SendPropertyChanging();
			entity.CorporateElementList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CorporateElementSubmission")]
	public partial class CorporateElementSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubmissionId;
		
		private System.Nullable<int> _PracticeId;
		
		private System.Nullable<int> _CorporateElementId;
		
		private EntityRef<CorporateElementList> _CorporateElementList;
		
		private EntityRef<Practice> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionIdChanging(int value);
    partial void OnSubmissionIdChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    partial void OnCorporateElementIdChanging(System.Nullable<int> value);
    partial void OnCorporateElementIdChanged();
    #endregion
		
		public CorporateElementSubmission()
		{
			this._CorporateElementList = default(EntityRef<CorporateElementList>);
			this._Practice = default(EntityRef<Practice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubmissionId
		{
			get
			{
				return this._SubmissionId;
			}
			set
			{
				if ((this._SubmissionId != value))
				{
					this.OnSubmissionIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionId = value;
					this.SendPropertyChanged("SubmissionId");
					this.OnSubmissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorporateElementId", DbType="Int")]
		public System.Nullable<int> CorporateElementId
		{
			get
			{
				return this._CorporateElementId;
			}
			set
			{
				if ((this._CorporateElementId != value))
				{
					if (this._CorporateElementList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCorporateElementIdChanging(value);
					this.SendPropertyChanging();
					this._CorporateElementId = value;
					this.SendPropertyChanged("CorporateElementId");
					this.OnCorporateElementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CorporateElementList_CorporateElementSubmission", Storage="_CorporateElementList", ThisKey="CorporateElementId", OtherKey="CorporateElementId", IsForeignKey=true)]
		public CorporateElementList CorporateElementList
		{
			get
			{
				return this._CorporateElementList.Entity;
			}
			set
			{
				CorporateElementList previousValue = this._CorporateElementList.Entity;
				if (((previousValue != value) 
							|| (this._CorporateElementList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CorporateElementList.Entity = null;
						previousValue.CorporateElementSubmissions.Remove(this);
					}
					this._CorporateElementList.Entity = value;
					if ((value != null))
					{
						value.CorporateElementSubmissions.Add(this);
						this._CorporateElementId = value.CorporateElementId;
					}
					else
					{
						this._CorporateElementId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CorporateElementList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_CorporateElementSubmission", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.CorporateElementSubmissions.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.CorporateElementSubmissions.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CorporateKnowledgeBaseElement")]
	public partial class CorporateKnowledgeBaseElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CorporateKnowledgeBaseElementId;
		
		private int _PracticeId;
		
		private int _KnowledgeBaseTemplateId;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
		private EntityRef<Practice> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCorporateKnowledgeBaseElementIdChanging(int value);
    partial void OnCorporateKnowledgeBaseElementIdChanged();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    partial void OnKnowledgeBaseTemplateIdChanging(int value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    #endregion
		
		public CorporateKnowledgeBaseElement()
		{
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			this._Practice = default(EntityRef<Practice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorporateKnowledgeBaseElementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CorporateKnowledgeBaseElementId
		{
			get
			{
				return this._CorporateKnowledgeBaseElementId;
			}
			set
			{
				if ((this._CorporateKnowledgeBaseElementId != value))
				{
					this.OnCorporateKnowledgeBaseElementIdChanging(value);
					this.SendPropertyChanging();
					this._CorporateKnowledgeBaseElementId = value;
					this.SendPropertyChanged("CorporateKnowledgeBaseElementId");
					this.OnCorporateKnowledgeBaseElementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int NOT NULL")]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int NOT NULL")]
		public int KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_CorporateKnowledgeBaseElement", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.CorporateKnowledgeBaseElements.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.CorporateKnowledgeBaseElements.Add(this);
						this._KnowledgeBaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgeBaseTemplateId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_CorporateKnowledgeBaseElement", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.CorporateKnowledgeBaseElements.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.CorporateKnowledgeBaseElements.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(int);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Credential")]
	public partial class Credential : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CredentialId;
		
		private string _Name;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCredentialIdChanging(int value);
    partial void OnCredentialIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Credential()
		{
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CredentialId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CredentialId
		{
			get
			{
				return this._CredentialId;
			}
			set
			{
				if ((this._CredentialId != value))
				{
					this.OnCredentialIdChanging(value);
					this.SendPropertyChanging();
					this._CredentialId = value;
					this.SendPropertyChanged("CredentialId");
					this.OnCredentialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Credential_PracticeUser", Storage="_PracticeUsers", ThisKey="CredentialId", OtherKey="CredentialId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Credential = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Credential = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomReport")]
	public partial class CustomReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostumReportId;
		
		private int _ReportSectionId;
		
		private int _UserId;
		
		private System.Xml.Linq.XElement _XML;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostumReportIdChanging(int value);
    partial void OnCostumReportIdChanged();
    partial void OnReportSectionIdChanging(int value);
    partial void OnReportSectionIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnXMLChanging(System.Xml.Linq.XElement value);
    partial void OnXMLChanged();
    #endregion
		
		public CustomReport()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostumReportId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CostumReportId
		{
			get
			{
				return this._CostumReportId;
			}
			set
			{
				if ((this._CostumReportId != value))
				{
					this.OnCostumReportIdChanging(value);
					this.SendPropertyChanging();
					this._CostumReportId = value;
					this.SendPropertyChanged("CostumReportId");
					this.OnCostumReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportSectionId", DbType="Int NOT NULL")]
		public int ReportSectionId
		{
			get
			{
				return this._ReportSectionId;
			}
			set
			{
				if ((this._ReportSectionId != value))
				{
					this.OnReportSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ReportSectionId = value;
					this.SendPropertyChanged("ReportSectionId");
					this.OnReportSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XML", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement XML
		{
			get
			{
				return this._XML;
			}
			set
			{
				if ((this._XML != value))
				{
					this.OnXMLChanging(value);
					this.SendPropertyChanging();
					this._XML = value;
					this.SendPropertyChanged("XML");
					this.OnXMLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTypeMapping")]
	public partial class DocumentTypeMapping
	{
		
		private int _DocumentTypeMappingId;
		
		private string _DocumentType;
		
		private string _MappingName;
		
		public DocumentTypeMapping()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeMappingId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int DocumentTypeMappingId
		{
			get
			{
				return this._DocumentTypeMappingId;
			}
			set
			{
				if ((this._DocumentTypeMappingId != value))
				{
					this._DocumentTypeMappingId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this._DocumentType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MappingName
		{
			get
			{
				return this._MappingName;
			}
			set
			{
				if ((this._MappingName != value))
				{
					this._MappingName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enterprise")]
	public partial class Enterprise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnterpriseId;
		
		private string _Name;
		
		private System.Nullable<int> _AddressId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private EntitySet<EnterpriseLibrarySection> _EnterpriseLibrarySections;
		
		private EntitySet<EnterpriseReportSection> _EnterpriseReportSections;
		
		private EntitySet<EnterpriseToolSection> _EnterpriseToolSections;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<MedicalGroup> _MedicalGroups;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<ProjectAssignment> _ProjectAssignments;
		
		private EntitySet<SystemInfo> _SystemInfos;
		
		private EntitySet<Template> _Templates;
		
		private EntitySet<TemplateOptionAssignment> _TemplateOptionAssignments;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterpriseIdChanging(int value);
    partial void OnEnterpriseIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Enterprise()
		{
			this._EnterpriseLibrarySections = new EntitySet<EnterpriseLibrarySection>(new Action<EnterpriseLibrarySection>(this.attach_EnterpriseLibrarySections), new Action<EnterpriseLibrarySection>(this.detach_EnterpriseLibrarySections));
			this._EnterpriseReportSections = new EntitySet<EnterpriseReportSection>(new Action<EnterpriseReportSection>(this.attach_EnterpriseReportSections), new Action<EnterpriseReportSection>(this.detach_EnterpriseReportSections));
			this._EnterpriseToolSections = new EntitySet<EnterpriseToolSection>(new Action<EnterpriseToolSection>(this.attach_EnterpriseToolSections), new Action<EnterpriseToolSection>(this.detach_EnterpriseToolSections));
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._MedicalGroups = new EntitySet<MedicalGroup>(new Action<MedicalGroup>(this.attach_MedicalGroups), new Action<MedicalGroup>(this.detach_MedicalGroups));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._ProjectAssignments = new EntitySet<ProjectAssignment>(new Action<ProjectAssignment>(this.attach_ProjectAssignments), new Action<ProjectAssignment>(this.detach_ProjectAssignments));
			this._SystemInfos = new EntitySet<SystemInfo>(new Action<SystemInfo>(this.attach_SystemInfos), new Action<SystemInfo>(this.detach_SystemInfos));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._TemplateOptionAssignments = new EntitySet<TemplateOptionAssignment>(new Action<TemplateOptionAssignment>(this.attach_TemplateOptionAssignments), new Action<TemplateOptionAssignment>(this.detach_TemplateOptionAssignments));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseLibrarySection", Storage="_EnterpriseLibrarySections", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<EnterpriseLibrarySection> EnterpriseLibrarySections
		{
			get
			{
				return this._EnterpriseLibrarySections;
			}
			set
			{
				this._EnterpriseLibrarySections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseReportSection", Storage="_EnterpriseReportSections", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<EnterpriseReportSection> EnterpriseReportSections
		{
			get
			{
				return this._EnterpriseReportSections;
			}
			set
			{
				this._EnterpriseReportSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseToolSection", Storage="_EnterpriseToolSections", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<EnterpriseToolSection> EnterpriseToolSections
		{
			get
			{
				return this._EnterpriseToolSections;
			}
			set
			{
				this._EnterpriseToolSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Form", Storage="_Forms", ThisKey="EnterpriseId", OtherKey="fkEnterpriseId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_MedicalGroup", Storage="_MedicalGroups", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<MedicalGroup> MedicalGroups
		{
			get
			{
				return this._MedicalGroups;
			}
			set
			{
				this._MedicalGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Page", Storage="_Pages", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_ProjectAssignment", Storage="_ProjectAssignments", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this._ProjectAssignments;
			}
			set
			{
				this._ProjectAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_SystemInfo", Storage="_SystemInfos", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<SystemInfo> SystemInfos
		{
			get
			{
				return this._SystemInfos;
			}
			set
			{
				this._SystemInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Template", Storage="_Templates", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_TemplateOptionAssignment", Storage="_TemplateOptionAssignments", ThisKey="EnterpriseId", OtherKey="EnterpriseId")]
		public EntitySet<TemplateOptionAssignment> TemplateOptionAssignments
		{
			get
			{
				return this._TemplateOptionAssignments;
			}
			set
			{
				this._TemplateOptionAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Enterprise", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Enterprises.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Enterprises.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_EnterpriseReportSections(EnterpriseReportSection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_EnterpriseReportSections(EnterpriseReportSection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_MedicalGroups(MedicalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_MedicalGroups(MedicalGroup entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_SystemInfos(SystemInfo entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_SystemInfos(SystemInfo entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
		
		private void attach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = this;
		}
		
		private void detach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Enterprise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterpriseLibrarySection")]
	public partial class EnterpriseLibrarySection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LibrarySectionId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private int _EnterpriseId;
		
		private int _EnterpriseLibrarySectionId;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<LibrarySection> _LibrarySection;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLibrarySectionIdChanging(int value);
    partial void OnLibrarySectionIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnEnterpriseIdChanging(int value);
    partial void OnEnterpriseIdChanged();
    partial void OnEnterpriseLibrarySectionIdChanging(int value);
    partial void OnEnterpriseLibrarySectionIdChanged();
    #endregion
		
		public EnterpriseLibrarySection()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			this._LibrarySection = default(EntityRef<LibrarySection>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibrarySectionId", DbType="Int NOT NULL")]
		public int LibrarySectionId
		{
			get
			{
				return this._LibrarySectionId;
			}
			set
			{
				if ((this._LibrarySectionId != value))
				{
					if (this._LibrarySection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibrarySectionIdChanging(value);
					this.SendPropertyChanging();
					this._LibrarySectionId = value;
					this.SendPropertyChanged("LibrarySectionId");
					this.OnLibrarySectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int NOT NULL")]
		public int EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseLibrarySectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnterpriseLibrarySectionId
		{
			get
			{
				return this._EnterpriseLibrarySectionId;
			}
			set
			{
				if ((this._EnterpriseLibrarySectionId != value))
				{
					this.OnEnterpriseLibrarySectionIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseLibrarySectionId = value;
					this.SendPropertyChanged("EnterpriseLibrarySectionId");
					this.OnEnterpriseLibrarySectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseLibrarySection", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.EnterpriseLibrarySections.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.EnterpriseLibrarySections.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(int);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_EnterpriseLibrarySection", Storage="_LibrarySection", ThisKey="LibrarySectionId", OtherKey="LibrarySectionId", IsForeignKey=true)]
		public LibrarySection LibrarySection
		{
			get
			{
				return this._LibrarySection.Entity;
			}
			set
			{
				LibrarySection previousValue = this._LibrarySection.Entity;
				if (((previousValue != value) 
							|| (this._LibrarySection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LibrarySection.Entity = null;
						previousValue.EnterpriseLibrarySections.Remove(this);
					}
					this._LibrarySection.Entity = value;
					if ((value != null))
					{
						value.EnterpriseLibrarySections.Add(this);
						this._LibrarySectionId = value.LibrarySectionId;
					}
					else
					{
						this._LibrarySectionId = default(int);
					}
					this.SendPropertyChanged("LibrarySection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseLibrarySection", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.EnterpriseLibrarySections.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.EnterpriseLibrarySections.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterpriseReportSection")]
	public partial class EnterpriseReportSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportSectionId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private int _EnterpriseId;
		
		private int _EnterpriseReportSectionId;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportSectionIdChanging(int value);
    partial void OnReportSectionIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnEnterpriseIdChanging(int value);
    partial void OnEnterpriseIdChanged();
    partial void OnEnterpriseReportSectionIdChanging(int value);
    partial void OnEnterpriseReportSectionIdChanged();
    #endregion
		
		public EnterpriseReportSection()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportSectionId", DbType="Int NOT NULL")]
		public int ReportSectionId
		{
			get
			{
				return this._ReportSectionId;
			}
			set
			{
				if ((this._ReportSectionId != value))
				{
					this.OnReportSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ReportSectionId = value;
					this.SendPropertyChanged("ReportSectionId");
					this.OnReportSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int NOT NULL")]
		public int EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseReportSectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnterpriseReportSectionId
		{
			get
			{
				return this._EnterpriseReportSectionId;
			}
			set
			{
				if ((this._EnterpriseReportSectionId != value))
				{
					this.OnEnterpriseReportSectionIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseReportSectionId = value;
					this.SendPropertyChanged("EnterpriseReportSectionId");
					this.OnEnterpriseReportSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseReportSection", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.EnterpriseReportSections.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.EnterpriseReportSections.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(int);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseReportSection", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.EnterpriseReportSections.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.EnterpriseReportSections.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterpriseToolSection")]
	public partial class EnterpriseToolSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToolSectionId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private int _EnterpriseId;
		
		private int _EnterpriseToolSectionId;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<ToolSection> _ToolSection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolSectionIdChanging(int value);
    partial void OnToolSectionIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnEnterpriseIdChanging(int value);
    partial void OnEnterpriseIdChanged();
    partial void OnEnterpriseToolSectionIdChanging(int value);
    partial void OnEnterpriseToolSectionIdChanged();
    #endregion
		
		public EnterpriseToolSection()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._ToolSection = default(EntityRef<ToolSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolSectionId", DbType="Int NOT NULL")]
		public int ToolSectionId
		{
			get
			{
				return this._ToolSectionId;
			}
			set
			{
				if ((this._ToolSectionId != value))
				{
					if (this._ToolSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ToolSectionId = value;
					this.SendPropertyChanged("ToolSectionId");
					this.OnToolSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int NOT NULL")]
		public int EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseToolSectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnterpriseToolSectionId
		{
			get
			{
				return this._EnterpriseToolSectionId;
			}
			set
			{
				if ((this._EnterpriseToolSectionId != value))
				{
					this.OnEnterpriseToolSectionIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseToolSectionId = value;
					this.SendPropertyChanged("EnterpriseToolSectionId");
					this.OnEnterpriseToolSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_EnterpriseToolSection", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.EnterpriseToolSections.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.EnterpriseToolSections.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(int);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseToolSection", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.EnterpriseToolSections.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.EnterpriseToolSections.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_EnterpriseToolSection", Storage="_ToolSection", ThisKey="ToolSectionId", OtherKey="ToolSectionId", IsForeignKey=true)]
		public ToolSection ToolSection
		{
			get
			{
				return this._ToolSection.Entity;
			}
			set
			{
				ToolSection previousValue = this._ToolSection.Entity;
				if (((previousValue != value) 
							|| (this._ToolSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolSection.Entity = null;
						previousValue.EnterpriseToolSections.Remove(this);
					}
					this._ToolSection.Entity = value;
					if ((value != null))
					{
						value.EnterpriseToolSections.Add(this);
						this._ToolSectionId = value.ToolSectionId;
					}
					else
					{
						this._ToolSectionId = default(int);
					}
					this.SendPropertyChanged("ToolSection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FilledAnswers")]
	public partial class FilledAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FilledAnswersId;
		
		private int _KnowledgeBaseTemplateId;
		
		private System.Nullable<int> _AnswerTypeEnumId;
		
		private System.DateTime _LastUpdated;
		
		private int _UpdatedBy;
		
		private System.Nullable<bool> _Complete;
		
		private string _DataBoxComments;
		
		private string _DefaultScore;
		
		private System.Nullable<int> _PoliciesDocumentCount;
		
		private System.Nullable<int> _ReportsDocumentCount;
		
		private System.Nullable<int> _ScreenShotsDocumentCount;
		
		private System.Nullable<int> _LogsOrToolsDocumentCount;
		
		private System.Nullable<int> _OtherDocumentsCount;
		
		private string _PrivateNotes;
		
		private string _ReviewNotes;
		
		private string _EvaluationNotes;
		
		private int _ProjectUsageId;
		
		private int _PracticeSiteId;
		
		private EntitySet<FilledTemplateDocument> _FilledTemplateDocuments;
		
		private EntityRef<AnswerTypeEnum> _AnswerTypeEnum;
		
		private EntityRef<User> _User;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
		private EntityRef<PracticeSite> _PracticeSite;
		
		private EntityRef<ProjectUsage> _ProjectUsage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilledAnswersIdChanging(int value);
    partial void OnFilledAnswersIdChanged();
    partial void OnKnowledgeBaseTemplateIdChanging(int value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    partial void OnAnswerTypeEnumIdChanging(System.Nullable<int> value);
    partial void OnAnswerTypeEnumIdChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(int value);
    partial void OnUpdatedByChanged();
    partial void OnCompleteChanging(System.Nullable<bool> value);
    partial void OnCompleteChanged();
    partial void OnDataBoxCommentsChanging(string value);
    partial void OnDataBoxCommentsChanged();
    partial void OnDefaultScoreChanging(string value);
    partial void OnDefaultScoreChanged();
    partial void OnPoliciesDocumentCountChanging(System.Nullable<int> value);
    partial void OnPoliciesDocumentCountChanged();
    partial void OnReportsDocumentCountChanging(System.Nullable<int> value);
    partial void OnReportsDocumentCountChanged();
    partial void OnScreenShotsDocumentCountChanging(System.Nullable<int> value);
    partial void OnScreenShotsDocumentCountChanged();
    partial void OnLogsOrToolsDocumentCountChanging(System.Nullable<int> value);
    partial void OnLogsOrToolsDocumentCountChanged();
    partial void OnOtherDocumentsCountChanging(System.Nullable<int> value);
    partial void OnOtherDocumentsCountChanged();
    partial void OnPrivateNotesChanging(string value);
    partial void OnPrivateNotesChanged();
    partial void OnReviewNotesChanging(string value);
    partial void OnReviewNotesChanged();
    partial void OnEvaluationNotesChanging(string value);
    partial void OnEvaluationNotesChanged();
    partial void OnProjectUsageIdChanging(int value);
    partial void OnProjectUsageIdChanged();
    partial void OnPracticeSiteIdChanging(int value);
    partial void OnPracticeSiteIdChanged();
    #endregion
		
		public FilledAnswer()
		{
			this._FilledTemplateDocuments = new EntitySet<FilledTemplateDocument>(new Action<FilledTemplateDocument>(this.attach_FilledTemplateDocuments), new Action<FilledTemplateDocument>(this.detach_FilledTemplateDocuments));
			this._AnswerTypeEnum = default(EntityRef<AnswerTypeEnum>);
			this._User = default(EntityRef<User>);
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			this._PracticeSite = default(EntityRef<PracticeSite>);
			this._ProjectUsage = default(EntityRef<ProjectUsage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledAnswersId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FilledAnswersId
		{
			get
			{
				return this._FilledAnswersId;
			}
			set
			{
				if ((this._FilledAnswersId != value))
				{
					this.OnFilledAnswersIdChanging(value);
					this.SendPropertyChanging();
					this._FilledAnswersId = value;
					this.SendPropertyChanged("FilledAnswersId");
					this.OnFilledAnswersIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int NOT NULL")]
		public int KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeEnumId", DbType="Int")]
		public System.Nullable<int> AnswerTypeEnumId
		{
			get
			{
				return this._AnswerTypeEnumId;
			}
			set
			{
				if ((this._AnswerTypeEnumId != value))
				{
					if (this._AnswerTypeEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerTypeEnumIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeEnumId = value;
					this.SendPropertyChanged("AnswerTypeEnumId");
					this.OnAnswerTypeEnumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int NOT NULL")]
		public int UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="Bit")]
		public System.Nullable<bool> Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxComments", DbType="NVarChar(MAX)")]
		public string DataBoxComments
		{
			get
			{
				return this._DataBoxComments;
			}
			set
			{
				if ((this._DataBoxComments != value))
				{
					this.OnDataBoxCommentsChanging(value);
					this.SendPropertyChanging();
					this._DataBoxComments = value;
					this.SendPropertyChanged("DataBoxComments");
					this.OnDataBoxCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultScore", DbType="NVarChar(20)")]
		public string DefaultScore
		{
			get
			{
				return this._DefaultScore;
			}
			set
			{
				if ((this._DefaultScore != value))
				{
					this.OnDefaultScoreChanging(value);
					this.SendPropertyChanging();
					this._DefaultScore = value;
					this.SendPropertyChanged("DefaultScore");
					this.OnDefaultScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoliciesDocumentCount", DbType="Int")]
		public System.Nullable<int> PoliciesDocumentCount
		{
			get
			{
				return this._PoliciesDocumentCount;
			}
			set
			{
				if ((this._PoliciesDocumentCount != value))
				{
					this.OnPoliciesDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._PoliciesDocumentCount = value;
					this.SendPropertyChanged("PoliciesDocumentCount");
					this.OnPoliciesDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportsDocumentCount", DbType="Int")]
		public System.Nullable<int> ReportsDocumentCount
		{
			get
			{
				return this._ReportsDocumentCount;
			}
			set
			{
				if ((this._ReportsDocumentCount != value))
				{
					this.OnReportsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._ReportsDocumentCount = value;
					this.SendPropertyChanged("ReportsDocumentCount");
					this.OnReportsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenShotsDocumentCount", DbType="Int")]
		public System.Nullable<int> ScreenShotsDocumentCount
		{
			get
			{
				return this._ScreenShotsDocumentCount;
			}
			set
			{
				if ((this._ScreenShotsDocumentCount != value))
				{
					this.OnScreenShotsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._ScreenShotsDocumentCount = value;
					this.SendPropertyChanged("ScreenShotsDocumentCount");
					this.OnScreenShotsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogsOrToolsDocumentCount", DbType="Int")]
		public System.Nullable<int> LogsOrToolsDocumentCount
		{
			get
			{
				return this._LogsOrToolsDocumentCount;
			}
			set
			{
				if ((this._LogsOrToolsDocumentCount != value))
				{
					this.OnLogsOrToolsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._LogsOrToolsDocumentCount = value;
					this.SendPropertyChanged("LogsOrToolsDocumentCount");
					this.OnLogsOrToolsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherDocumentsCount", DbType="Int")]
		public System.Nullable<int> OtherDocumentsCount
		{
			get
			{
				return this._OtherDocumentsCount;
			}
			set
			{
				if ((this._OtherDocumentsCount != value))
				{
					this.OnOtherDocumentsCountChanging(value);
					this.SendPropertyChanging();
					this._OtherDocumentsCount = value;
					this.SendPropertyChanged("OtherDocumentsCount");
					this.OnOtherDocumentsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateNotes", DbType="NVarChar(MAX)")]
		public string PrivateNotes
		{
			get
			{
				return this._PrivateNotes;
			}
			set
			{
				if ((this._PrivateNotes != value))
				{
					this.OnPrivateNotesChanging(value);
					this.SendPropertyChanging();
					this._PrivateNotes = value;
					this.SendPropertyChanged("PrivateNotes");
					this.OnPrivateNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewNotes", DbType="NVarChar(MAX)")]
		public string ReviewNotes
		{
			get
			{
				return this._ReviewNotes;
			}
			set
			{
				if ((this._ReviewNotes != value))
				{
					this.OnReviewNotesChanging(value);
					this.SendPropertyChanging();
					this._ReviewNotes = value;
					this.SendPropertyChanged("ReviewNotes");
					this.OnReviewNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationNotes", DbType="NVarChar(MAX)")]
		public string EvaluationNotes
		{
			get
			{
				return this._EvaluationNotes;
			}
			set
			{
				if ((this._EvaluationNotes != value))
				{
					this.OnEvaluationNotesChanging(value);
					this.SendPropertyChanging();
					this._EvaluationNotes = value;
					this.SendPropertyChanged("EvaluationNotes");
					this.OnEvaluationNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", DbType="Int NOT NULL")]
		public int ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					if (this._ProjectUsage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectUsageIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectUsageId = value;
					this.SendPropertyChanged("ProjectUsageId");
					this.OnProjectUsageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int NOT NULL")]
		public int PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					if (this._PracticeSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FilledAnswer_FilledTemplateDocument", Storage="_FilledTemplateDocuments", ThisKey="FilledAnswersId", OtherKey="FilledAnswerId")]
		public EntitySet<FilledTemplateDocument> FilledTemplateDocuments
		{
			get
			{
				return this._FilledTemplateDocuments;
			}
			set
			{
				this._FilledTemplateDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerTypeEnum_FilledAnswer", Storage="_AnswerTypeEnum", ThisKey="AnswerTypeEnumId", OtherKey="AnswerTypeEnumId", IsForeignKey=true)]
		public AnswerTypeEnum AnswerTypeEnum
		{
			get
			{
				return this._AnswerTypeEnum.Entity;
			}
			set
			{
				AnswerTypeEnum previousValue = this._AnswerTypeEnum.Entity;
				if (((previousValue != value) 
							|| (this._AnswerTypeEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnswerTypeEnum.Entity = null;
						previousValue.FilledAnswers.Remove(this);
					}
					this._AnswerTypeEnum.Entity = value;
					if ((value != null))
					{
						value.FilledAnswers.Add(this);
						this._AnswerTypeEnumId = value.AnswerTypeEnumId;
					}
					else
					{
						this._AnswerTypeEnumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AnswerTypeEnum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FilledAnswer", Storage="_User", ThisKey="UpdatedBy", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FilledAnswers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FilledAnswers.Add(this);
						this._UpdatedBy = value.UserId;
					}
					else
					{
						this._UpdatedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledAnswer", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.FilledAnswers.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.FilledAnswers.Add(this);
						this._KnowledgeBaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgeBaseTemplateId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_FilledAnswer", Storage="_PracticeSite", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId", IsForeignKey=true)]
		public PracticeSite PracticeSite
		{
			get
			{
				return this._PracticeSite.Entity;
			}
			set
			{
				PracticeSite previousValue = this._PracticeSite.Entity;
				if (((previousValue != value) 
							|| (this._PracticeSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeSite.Entity = null;
						previousValue.FilledAnswers.Remove(this);
					}
					this._PracticeSite.Entity = value;
					if ((value != null))
					{
						value.FilledAnswers.Add(this);
						this._PracticeSiteId = value.PracticeSiteId;
					}
					else
					{
						this._PracticeSiteId = default(int);
					}
					this.SendPropertyChanged("PracticeSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_FilledAnswer", Storage="_ProjectUsage", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId", IsForeignKey=true)]
		public ProjectUsage ProjectUsage
		{
			get
			{
				return this._ProjectUsage.Entity;
			}
			set
			{
				ProjectUsage previousValue = this._ProjectUsage.Entity;
				if (((previousValue != value) 
							|| (this._ProjectUsage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectUsage.Entity = null;
						previousValue.FilledAnswers.Remove(this);
					}
					this._ProjectUsage.Entity = value;
					if ((value != null))
					{
						value.FilledAnswers.Add(this);
						this._ProjectUsageId = value.ProjectUsageId;
					}
					else
					{
						this._ProjectUsageId = default(int);
					}
					this.SendPropertyChanged("ProjectUsage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.FilledAnswer = this;
		}
		
		private void detach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.FilledAnswer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FilledAnswersOptions")]
	public partial class FilledAnswersOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pkFilledAnswersOptionId;
		
		private int _OptionId;
		
		private int _KnowledgebaseTemplateId;
		
		private System.Nullable<int> _AnswerTypeEnumId;
		
		private System.Nullable<bool> _Complete;
		
		private string _DataBoxComments;
		
		private string _DefaultScore;
		
		private System.Nullable<int> _PoliciesDocumentCount;
		
		private System.Nullable<int> _ReportsDocumentCount;
		
		private System.Nullable<int> _ScreenShotsDocumentCount;
		
		private System.Nullable<int> _LogsOrToolsDocumentCount;
		
		private System.Nullable<int> _OtherDocumentsCount;
		
		private string _PrivateNotes;
		
		private string _ReviewNotes;
		
		private string _EvaluationNotes;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
		private EntityRef<TemplateOption> _TemplateOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkFilledAnswersOptionIdChanging(int value);
    partial void OnpkFilledAnswersOptionIdChanged();
    partial void OnOptionIdChanging(int value);
    partial void OnOptionIdChanged();
    partial void OnKnowledgebaseTemplateIdChanging(int value);
    partial void OnKnowledgebaseTemplateIdChanged();
    partial void OnAnswerTypeEnumIdChanging(System.Nullable<int> value);
    partial void OnAnswerTypeEnumIdChanged();
    partial void OnCompleteChanging(System.Nullable<bool> value);
    partial void OnCompleteChanged();
    partial void OnDataBoxCommentsChanging(string value);
    partial void OnDataBoxCommentsChanged();
    partial void OnDefaultScoreChanging(string value);
    partial void OnDefaultScoreChanged();
    partial void OnPoliciesDocumentCountChanging(System.Nullable<int> value);
    partial void OnPoliciesDocumentCountChanged();
    partial void OnReportsDocumentCountChanging(System.Nullable<int> value);
    partial void OnReportsDocumentCountChanged();
    partial void OnScreenShotsDocumentCountChanging(System.Nullable<int> value);
    partial void OnScreenShotsDocumentCountChanged();
    partial void OnLogsOrToolsDocumentCountChanging(System.Nullable<int> value);
    partial void OnLogsOrToolsDocumentCountChanged();
    partial void OnOtherDocumentsCountChanging(System.Nullable<int> value);
    partial void OnOtherDocumentsCountChanged();
    partial void OnPrivateNotesChanging(string value);
    partial void OnPrivateNotesChanged();
    partial void OnReviewNotesChanging(string value);
    partial void OnReviewNotesChanged();
    partial void OnEvaluationNotesChanging(string value);
    partial void OnEvaluationNotesChanged();
    #endregion
		
		public FilledAnswersOption()
		{
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			this._TemplateOption = default(EntityRef<TemplateOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pkFilledAnswersOptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pkFilledAnswersOptionId
		{
			get
			{
				return this._pkFilledAnswersOptionId;
			}
			set
			{
				if ((this._pkFilledAnswersOptionId != value))
				{
					this.OnpkFilledAnswersOptionIdChanging(value);
					this.SendPropertyChanging();
					this._pkFilledAnswersOptionId = value;
					this.SendPropertyChanged("pkFilledAnswersOptionId");
					this.OnpkFilledAnswersOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionId", DbType="Int NOT NULL")]
		public int OptionId
		{
			get
			{
				return this._OptionId;
			}
			set
			{
				if ((this._OptionId != value))
				{
					if (this._TemplateOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionIdChanging(value);
					this.SendPropertyChanging();
					this._OptionId = value;
					this.SendPropertyChanged("OptionId");
					this.OnOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgebaseTemplateId", DbType="Int NOT NULL")]
		public int KnowledgebaseTemplateId
		{
			get
			{
				return this._KnowledgebaseTemplateId;
			}
			set
			{
				if ((this._KnowledgebaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgebaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgebaseTemplateId = value;
					this.SendPropertyChanged("KnowledgebaseTemplateId");
					this.OnKnowledgebaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeEnumId", DbType="Int")]
		public System.Nullable<int> AnswerTypeEnumId
		{
			get
			{
				return this._AnswerTypeEnumId;
			}
			set
			{
				if ((this._AnswerTypeEnumId != value))
				{
					this.OnAnswerTypeEnumIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeEnumId = value;
					this.SendPropertyChanged("AnswerTypeEnumId");
					this.OnAnswerTypeEnumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="Bit")]
		public System.Nullable<bool> Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxComments", DbType="NVarChar(MAX)")]
		public string DataBoxComments
		{
			get
			{
				return this._DataBoxComments;
			}
			set
			{
				if ((this._DataBoxComments != value))
				{
					this.OnDataBoxCommentsChanging(value);
					this.SendPropertyChanging();
					this._DataBoxComments = value;
					this.SendPropertyChanged("DataBoxComments");
					this.OnDataBoxCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultScore", DbType="NVarChar(20)")]
		public string DefaultScore
		{
			get
			{
				return this._DefaultScore;
			}
			set
			{
				if ((this._DefaultScore != value))
				{
					this.OnDefaultScoreChanging(value);
					this.SendPropertyChanging();
					this._DefaultScore = value;
					this.SendPropertyChanged("DefaultScore");
					this.OnDefaultScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoliciesDocumentCount", DbType="Int")]
		public System.Nullable<int> PoliciesDocumentCount
		{
			get
			{
				return this._PoliciesDocumentCount;
			}
			set
			{
				if ((this._PoliciesDocumentCount != value))
				{
					this.OnPoliciesDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._PoliciesDocumentCount = value;
					this.SendPropertyChanged("PoliciesDocumentCount");
					this.OnPoliciesDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportsDocumentCount", DbType="Int")]
		public System.Nullable<int> ReportsDocumentCount
		{
			get
			{
				return this._ReportsDocumentCount;
			}
			set
			{
				if ((this._ReportsDocumentCount != value))
				{
					this.OnReportsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._ReportsDocumentCount = value;
					this.SendPropertyChanged("ReportsDocumentCount");
					this.OnReportsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenShotsDocumentCount", DbType="Int")]
		public System.Nullable<int> ScreenShotsDocumentCount
		{
			get
			{
				return this._ScreenShotsDocumentCount;
			}
			set
			{
				if ((this._ScreenShotsDocumentCount != value))
				{
					this.OnScreenShotsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._ScreenShotsDocumentCount = value;
					this.SendPropertyChanged("ScreenShotsDocumentCount");
					this.OnScreenShotsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogsOrToolsDocumentCount", DbType="Int")]
		public System.Nullable<int> LogsOrToolsDocumentCount
		{
			get
			{
				return this._LogsOrToolsDocumentCount;
			}
			set
			{
				if ((this._LogsOrToolsDocumentCount != value))
				{
					this.OnLogsOrToolsDocumentCountChanging(value);
					this.SendPropertyChanging();
					this._LogsOrToolsDocumentCount = value;
					this.SendPropertyChanged("LogsOrToolsDocumentCount");
					this.OnLogsOrToolsDocumentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherDocumentsCount", DbType="Int")]
		public System.Nullable<int> OtherDocumentsCount
		{
			get
			{
				return this._OtherDocumentsCount;
			}
			set
			{
				if ((this._OtherDocumentsCount != value))
				{
					this.OnOtherDocumentsCountChanging(value);
					this.SendPropertyChanging();
					this._OtherDocumentsCount = value;
					this.SendPropertyChanged("OtherDocumentsCount");
					this.OnOtherDocumentsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateNotes", DbType="NVarChar(MAX)")]
		public string PrivateNotes
		{
			get
			{
				return this._PrivateNotes;
			}
			set
			{
				if ((this._PrivateNotes != value))
				{
					this.OnPrivateNotesChanging(value);
					this.SendPropertyChanging();
					this._PrivateNotes = value;
					this.SendPropertyChanged("PrivateNotes");
					this.OnPrivateNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewNotes", DbType="NVarChar(MAX)")]
		public string ReviewNotes
		{
			get
			{
				return this._ReviewNotes;
			}
			set
			{
				if ((this._ReviewNotes != value))
				{
					this.OnReviewNotesChanging(value);
					this.SendPropertyChanging();
					this._ReviewNotes = value;
					this.SendPropertyChanged("ReviewNotes");
					this.OnReviewNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationNotes", DbType="NVarChar(MAX)")]
		public string EvaluationNotes
		{
			get
			{
				return this._EvaluationNotes;
			}
			set
			{
				if ((this._EvaluationNotes != value))
				{
					this.OnEvaluationNotesChanging(value);
					this.SendPropertyChanging();
					this._EvaluationNotes = value;
					this.SendPropertyChanged("EvaluationNotes");
					this.OnEvaluationNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledAnswersOption", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgebaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.FilledAnswersOptions.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.FilledAnswersOptions.Add(this);
						this._KnowledgebaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgebaseTemplateId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_FilledAnswersOption", Storage="_TemplateOption", ThisKey="OptionId", OtherKey="TemplateOptionId", IsForeignKey=true)]
		public TemplateOption TemplateOption
		{
			get
			{
				return this._TemplateOption.Entity;
			}
			set
			{
				TemplateOption previousValue = this._TemplateOption.Entity;
				if (((previousValue != value) 
							|| (this._TemplateOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateOption.Entity = null;
						previousValue.FilledAnswersOptions.Remove(this);
					}
					this._TemplateOption.Entity = value;
					if ((value != null))
					{
						value.FilledAnswersOptions.Add(this);
						this._OptionId = value.TemplateOptionId;
					}
					else
					{
						this._OptionId = default(int);
					}
					this.SendPropertyChanged("TemplateOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FilledQuestionnaire")]
	public partial class FilledQuestionnaire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FilledQuestionnareId;
		
		private int _FormId;
		
		private int _ProjectUsageId;
		
		private System.Nullable<int> _PracticeSiteId;
		
		private System.Xml.Linq.XElement _Answers;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<int> _UserId;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<PracticeSite> _PracticeSite;
		
		private EntityRef<ProjectUsage> _ProjectUsage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilledQuestionnareIdChanging(int value);
    partial void OnFilledQuestionnareIdChanged();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnProjectUsageIdChanging(int value);
    partial void OnProjectUsageIdChanged();
    partial void OnPracticeSiteIdChanging(System.Nullable<int> value);
    partial void OnPracticeSiteIdChanged();
    partial void OnAnswersChanging(System.Xml.Linq.XElement value);
    partial void OnAnswersChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    #endregion
		
		public FilledQuestionnaire()
		{
			this._Form = default(EntityRef<Form>);
			this._PracticeSite = default(EntityRef<PracticeSite>);
			this._ProjectUsage = default(EntityRef<ProjectUsage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledQuestionnareId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FilledQuestionnareId
		{
			get
			{
				return this._FilledQuestionnareId;
			}
			set
			{
				if ((this._FilledQuestionnareId != value))
				{
					this.OnFilledQuestionnareIdChanging(value);
					this.SendPropertyChanging();
					this._FilledQuestionnareId = value;
					this.SendPropertyChanged("FilledQuestionnareId");
					this.OnFilledQuestionnareIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", DbType="Int NOT NULL")]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", DbType="Int NOT NULL")]
		public int ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					if (this._ProjectUsage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectUsageIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectUsageId = value;
					this.SendPropertyChanged("ProjectUsageId");
					this.OnProjectUsageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int")]
		public System.Nullable<int> PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					if (this._PracticeSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answers", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				if ((this._Answers != value))
				{
					this.OnAnswersChanging(value);
					this.SendPropertyChanging();
					this._Answers = value;
					this.SendPropertyChanged("Answers");
					this.OnAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_FilledQuestionnaire", Storage="_Form", ThisKey="FormId", OtherKey="FormId", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.FilledQuestionnaires.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.FilledQuestionnaires.Add(this);
						this._FormId = value.FormId;
					}
					else
					{
						this._FormId = default(int);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_FilledQuestionnaire", Storage="_PracticeSite", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId", IsForeignKey=true)]
		public PracticeSite PracticeSite
		{
			get
			{
				return this._PracticeSite.Entity;
			}
			set
			{
				PracticeSite previousValue = this._PracticeSite.Entity;
				if (((previousValue != value) 
							|| (this._PracticeSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeSite.Entity = null;
						previousValue.FilledQuestionnaires.Remove(this);
					}
					this._PracticeSite.Entity = value;
					if ((value != null))
					{
						value.FilledQuestionnaires.Add(this);
						this._PracticeSiteId = value.PracticeSiteId;
					}
					else
					{
						this._PracticeSiteId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PracticeSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_FilledQuestionnaire", Storage="_ProjectUsage", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId", IsForeignKey=true)]
		public ProjectUsage ProjectUsage
		{
			get
			{
				return this._ProjectUsage.Entity;
			}
			set
			{
				ProjectUsage previousValue = this._ProjectUsage.Entity;
				if (((previousValue != value) 
							|| (this._ProjectUsage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectUsage.Entity = null;
						previousValue.FilledQuestionnaires.Remove(this);
					}
					this._ProjectUsage.Entity = value;
					if ((value != null))
					{
						value.FilledQuestionnaires.Add(this);
						this._ProjectUsageId = value.ProjectUsageId;
					}
					else
					{
						this._ProjectUsageId = default(int);
					}
					this.SendPropertyChanged("ProjectUsage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FilledTemplateDocument")]
	public partial class FilledTemplateDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FilledDocumentId;
		
		private System.Nullable<int> _FilledAnswerId;
		
		private int _DocumentId;
		
		private System.Nullable<int> _KnowledgeBaseTemplateId;
		
		private EntityRef<FilledAnswer> _FilledAnswer;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
		private EntityRef<TemplateDocument> _TemplateDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilledDocumentIdChanging(int value);
    partial void OnFilledDocumentIdChanged();
    partial void OnFilledAnswerIdChanging(System.Nullable<int> value);
    partial void OnFilledAnswerIdChanged();
    partial void OnDocumentIdChanging(int value);
    partial void OnDocumentIdChanged();
    partial void OnKnowledgeBaseTemplateIdChanging(System.Nullable<int> value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    #endregion
		
		public FilledTemplateDocument()
		{
			this._FilledAnswer = default(EntityRef<FilledAnswer>);
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			this._TemplateDocument = default(EntityRef<TemplateDocument>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledDocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FilledDocumentId
		{
			get
			{
				return this._FilledDocumentId;
			}
			set
			{
				if ((this._FilledDocumentId != value))
				{
					this.OnFilledDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._FilledDocumentId = value;
					this.SendPropertyChanged("FilledDocumentId");
					this.OnFilledDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledAnswerId", DbType="Int")]
		public System.Nullable<int> FilledAnswerId
		{
			get
			{
				return this._FilledAnswerId;
			}
			set
			{
				if ((this._FilledAnswerId != value))
				{
					if (this._FilledAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilledAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._FilledAnswerId = value;
					this.SendPropertyChanged("FilledAnswerId");
					this.OnFilledAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", DbType="Int NOT NULL")]
		public int DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					if (this._TemplateDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentId = value;
					this.SendPropertyChanged("DocumentId");
					this.OnDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int")]
		public System.Nullable<int> KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FilledAnswer_FilledTemplateDocument", Storage="_FilledAnswer", ThisKey="FilledAnswerId", OtherKey="FilledAnswersId", IsForeignKey=true)]
		public FilledAnswer FilledAnswer
		{
			get
			{
				return this._FilledAnswer.Entity;
			}
			set
			{
				FilledAnswer previousValue = this._FilledAnswer.Entity;
				if (((previousValue != value) 
							|| (this._FilledAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FilledAnswer.Entity = null;
						previousValue.FilledTemplateDocuments.Remove(this);
					}
					this._FilledAnswer.Entity = value;
					if ((value != null))
					{
						value.FilledTemplateDocuments.Add(this);
						this._FilledAnswerId = value.FilledAnswersId;
					}
					else
					{
						this._FilledAnswerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FilledAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledTemplateDocument", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.FilledTemplateDocuments.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.FilledTemplateDocuments.Add(this);
						this._KnowledgeBaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgeBaseTemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateDocument_FilledTemplateDocument", Storage="_TemplateDocument", ThisKey="DocumentId", OtherKey="DocumentId", IsForeignKey=true)]
		public TemplateDocument TemplateDocument
		{
			get
			{
				return this._TemplateDocument.Entity;
			}
			set
			{
				TemplateDocument previousValue = this._TemplateDocument.Entity;
				if (((previousValue != value) 
							|| (this._TemplateDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateDocument.Entity = null;
						previousValue.FilledTemplateDocuments.Remove(this);
					}
					this._TemplateDocument.Entity = value;
					if ((value != null))
					{
						value.FilledTemplateDocuments.Add(this);
						this._DocumentId = value.DocumentId;
					}
					else
					{
						this._DocumentId = default(int);
					}
					this.SendPropertyChanged("TemplateDocument");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Form")]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormId;
		
		private string _Type;
		
		private System.Xml.Linq.XElement _Questionnaire;
		
		private int _AccessLevelId;
		
		private int _ToolLevelId;
		
		private string _Name;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _fkMedicalGroupId;
		
		private System.Nullable<int> _fkEnterpriseId;
		
		private System.Nullable<int> _fkPracticeId;
		
		private EntitySet<FilledQuestionnaire> _FilledQuestionnaires;
		
		private EntitySet<ProjectDocument> _ProjectDocuments;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<ToolLevel> _ToolLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormIdChanging(int value);
    partial void OnFormIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnQuestionnaireChanging(System.Xml.Linq.XElement value);
    partial void OnQuestionnaireChanged();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    partial void OnToolLevelIdChanging(int value);
    partial void OnToolLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnfkMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnfkMedicalGroupIdChanged();
    partial void OnfkEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnfkEnterpriseIdChanged();
    partial void OnfkPracticeIdChanging(System.Nullable<int> value);
    partial void OnfkPracticeIdChanged();
    #endregion
		
		public Form()
		{
			this._FilledQuestionnaires = new EntitySet<FilledQuestionnaire>(new Action<FilledQuestionnaire>(this.attach_FilledQuestionnaires), new Action<FilledQuestionnaire>(this.detach_FilledQuestionnaires));
			this._ProjectDocuments = new EntitySet<ProjectDocument>(new Action<ProjectDocument>(this.attach_ProjectDocuments), new Action<ProjectDocument>(this.detach_ProjectDocuments));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._AccessLevel = default(EntityRef<AccessLevel>);
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._Practice = default(EntityRef<Practice>);
			this._ToolLevel = default(EntityRef<ToolLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questionnaire", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Questionnaire
		{
			get
			{
				return this._Questionnaire;
			}
			set
			{
				if ((this._Questionnaire != value))
				{
					this.OnQuestionnaireChanging(value);
					this.SendPropertyChanging();
					this._Questionnaire = value;
					this.SendPropertyChanged("Questionnaire");
					this.OnQuestionnaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", DbType="Int NOT NULL")]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolLevelId", DbType="Int NOT NULL")]
		public int ToolLevelId
		{
			get
			{
				return this._ToolLevelId;
			}
			set
			{
				if ((this._ToolLevelId != value))
				{
					if (this._ToolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolLevelIdChanging(value);
					this.SendPropertyChanging();
					this._ToolLevelId = value;
					this.SendPropertyChanged("ToolLevelId");
					this.OnToolLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkMedicalGroupId", DbType="Int")]
		public System.Nullable<int> fkMedicalGroupId
		{
			get
			{
				return this._fkMedicalGroupId;
			}
			set
			{
				if ((this._fkMedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfkMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._fkMedicalGroupId = value;
					this.SendPropertyChanged("fkMedicalGroupId");
					this.OnfkMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkEnterpriseId", DbType="Int")]
		public System.Nullable<int> fkEnterpriseId
		{
			get
			{
				return this._fkEnterpriseId;
			}
			set
			{
				if ((this._fkEnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfkEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._fkEnterpriseId = value;
					this.SendPropertyChanged("fkEnterpriseId");
					this.OnfkEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkPracticeId", DbType="Int")]
		public System.Nullable<int> fkPracticeId
		{
			get
			{
				return this._fkPracticeId;
			}
			set
			{
				if ((this._fkPracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfkPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._fkPracticeId = value;
					this.SendPropertyChanged("fkPracticeId");
					this.OnfkPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_FilledQuestionnaire", Storage="_FilledQuestionnaires", ThisKey="FormId", OtherKey="FormId")]
		public EntitySet<FilledQuestionnaire> FilledQuestionnaires
		{
			get
			{
				return this._FilledQuestionnaires;
			}
			set
			{
				this._FilledQuestionnaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_ProjectDocument", Storage="_ProjectDocuments", ThisKey="FormId", OtherKey="FormId")]
		public EntitySet<ProjectDocument> ProjectDocuments
		{
			get
			{
				return this._ProjectDocuments;
			}
			set
			{
				this._ProjectDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_ProjectSection", Storage="_ProjectSections", ThisKey="FormId", OtherKey="FormId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Form", Storage="_AccessLevel", ThisKey="AccessLevelId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._AccessLevelId = value.AccessLevelId;
					}
					else
					{
						this._AccessLevelId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Form", Storage="_Enterprise", ThisKey="fkEnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._fkEnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._fkEnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Form", Storage="_MedicalGroup", ThisKey="fkMedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._fkMedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._fkMedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Form", Storage="_Practice", ThisKey="fkPracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._fkPracticeId = value.PracticeId;
					}
					else
					{
						this._fkPracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_Form", Storage="_ToolLevel", ThisKey="ToolLevelId", OtherKey="ToolLevelId", IsForeignKey=true)]
		public ToolLevel ToolLevel
		{
			get
			{
				return this._ToolLevel.Entity;
			}
			set
			{
				ToolLevel previousValue = this._ToolLevel.Entity;
				if (((previousValue != value) 
							|| (this._ToolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolLevel.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._ToolLevel.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._ToolLevelId = value.ToolLevelId;
					}
					else
					{
						this._ToolLevelId = default(int);
					}
					this.SendPropertyChanged("ToolLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
		
		private void attach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KnowledgeBase")]
	public partial class KnowledgeBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KnowledgeBaseId;
		
		private int _KnowledgeBaseTypeId;
		
		private string _Name;
		
		private string _TabName;
		
		private string _DisplayName;
		
		private string _InstructionText;
		
		private int _AccessId;
		
		private System.Nullable<bool> _MustPass;
		
		private int _CreatedBy;
		
		private bool _IsActive;
		
		private EntitySet<KnowledgeBaseTemplate> _KnowledgeBaseTemplates;
		
		private EntitySet<KnowledgeBaseTemplate> _KnowledgeBaseTemplates1;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
		private EntityRef<KnowledgeBaseType> _KnowledgeBaseType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKnowledgeBaseIdChanging(int value);
    partial void OnKnowledgeBaseIdChanged();
    partial void OnKnowledgeBaseTypeIdChanging(int value);
    partial void OnKnowledgeBaseTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTabNameChanging(string value);
    partial void OnTabNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnInstructionTextChanging(string value);
    partial void OnInstructionTextChanged();
    partial void OnAccessIdChanging(int value);
    partial void OnAccessIdChanged();
    partial void OnMustPassChanging(System.Nullable<bool> value);
    partial void OnMustPassChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public KnowledgeBase()
		{
			this._KnowledgeBaseTemplates = new EntitySet<KnowledgeBaseTemplate>(new Action<KnowledgeBaseTemplate>(this.attach_KnowledgeBaseTemplates), new Action<KnowledgeBaseTemplate>(this.detach_KnowledgeBaseTemplates));
			this._KnowledgeBaseTemplates1 = new EntitySet<KnowledgeBaseTemplate>(new Action<KnowledgeBaseTemplate>(this.attach_KnowledgeBaseTemplates1), new Action<KnowledgeBaseTemplate>(this.detach_KnowledgeBaseTemplates1));
			this._AccessLevel = default(EntityRef<AccessLevel>);
			this._KnowledgeBaseType = default(EntityRef<KnowledgeBaseType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KnowledgeBaseId
		{
			get
			{
				return this._KnowledgeBaseId;
			}
			set
			{
				if ((this._KnowledgeBaseId != value))
				{
					this.OnKnowledgeBaseIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseId = value;
					this.SendPropertyChanged("KnowledgeBaseId");
					this.OnKnowledgeBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTypeId", DbType="Int NOT NULL")]
		public int KnowledgeBaseTypeId
		{
			get
			{
				return this._KnowledgeBaseTypeId;
			}
			set
			{
				if ((this._KnowledgeBaseTypeId != value))
				{
					if (this._KnowledgeBaseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTypeIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTypeId = value;
					this.SendPropertyChanged("KnowledgeBaseTypeId");
					this.OnKnowledgeBaseTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabName", DbType="NVarChar(100)")]
		public string TabName
		{
			get
			{
				return this._TabName;
			}
			set
			{
				if ((this._TabName != value))
				{
					this.OnTabNameChanging(value);
					this.SendPropertyChanging();
					this._TabName = value;
					this.SendPropertyChanged("TabName");
					this.OnTabNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(250)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionText", DbType="NVarChar(MAX)")]
		public string InstructionText
		{
			get
			{
				return this._InstructionText;
			}
			set
			{
				if ((this._InstructionText != value))
				{
					this.OnInstructionTextChanging(value);
					this.SendPropertyChanging();
					this._InstructionText = value;
					this.SendPropertyChanged("InstructionText");
					this.OnInstructionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessId", DbType="Int NOT NULL")]
		public int AccessId
		{
			get
			{
				return this._AccessId;
			}
			set
			{
				if ((this._AccessId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessIdChanging(value);
					this.SendPropertyChanging();
					this._AccessId = value;
					this.SendPropertyChanged("AccessId");
					this.OnAccessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustPass", DbType="Bit")]
		public System.Nullable<bool> MustPass
		{
			get
			{
				return this._MustPass;
			}
			set
			{
				if ((this._MustPass != value))
				{
					this.OnMustPassChanging(value);
					this.SendPropertyChanging();
					this._MustPass = value;
					this.SendPropertyChanged("MustPass");
					this.OnMustPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBase_KnowledgeBaseTemplate", Storage="_KnowledgeBaseTemplates", ThisKey="KnowledgeBaseId", OtherKey="KnowledgeBaseId")]
		public EntitySet<KnowledgeBaseTemplate> KnowledgeBaseTemplates
		{
			get
			{
				return this._KnowledgeBaseTemplates;
			}
			set
			{
				this._KnowledgeBaseTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBase_KnowledgeBaseTemplate1", Storage="_KnowledgeBaseTemplates1", ThisKey="KnowledgeBaseId", OtherKey="ParentKnowledgeBaseId")]
		public EntitySet<KnowledgeBaseTemplate> KnowledgeBaseTemplates1
		{
			get
			{
				return this._KnowledgeBaseTemplates1;
			}
			set
			{
				this._KnowledgeBaseTemplates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_KnowledgeBase", Storage="_AccessLevel", ThisKey="AccessId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.KnowledgeBases.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBases.Add(this);
						this._AccessId = value.AccessLevelId;
					}
					else
					{
						this._AccessId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseType_KnowledgeBase", Storage="_KnowledgeBaseType", ThisKey="KnowledgeBaseTypeId", OtherKey="KnowledgeBaseTypeId", IsForeignKey=true)]
		public KnowledgeBaseType KnowledgeBaseType
		{
			get
			{
				return this._KnowledgeBaseType.Entity;
			}
			set
			{
				KnowledgeBaseType previousValue = this._KnowledgeBaseType.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseType.Entity = null;
						previousValue.KnowledgeBases.Remove(this);
					}
					this._KnowledgeBaseType.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBases.Add(this);
						this._KnowledgeBaseTypeId = value.KnowledgeBaseTypeId;
					}
					else
					{
						this._KnowledgeBaseTypeId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBase = this;
		}
		
		private void detach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBase = null;
		}
		
		private void attach_KnowledgeBaseTemplates1(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBase1 = this;
		}
		
		private void detach_KnowledgeBaseTemplates1(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBase1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KnowledgeBaseTemplate")]
	public partial class KnowledgeBaseTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KnowledgeBaseTemplateId;
		
		private int _KnowledgeBaseId;
		
		private int _TemplateId;
		
		private System.Nullable<int> _ParentKnowledgeBaseId;
		
		private int _Sequence;
		
		private System.Nullable<int> _AnswerTypeId;
		
		private System.Nullable<int> _MaxPoints;
		
		private System.Nullable<bool> _IsCritical;
		
		private string _CriticalTooltip;
		
		private System.Nullable<bool> _IsDataBox;
		
		private string _DataBoxHeader;
		
		private System.Nullable<bool> _IsCorporateElement;
		
		private bool _IsInfoDocEnable;
		
		private System.Nullable<int> _ReferencePages;
		
		private EntitySet<AnswerTypeWeightage> _AnswerTypeWeightages;
		
		private EntitySet<CorporateKnowledgeBaseElement> _CorporateKnowledgeBaseElements;
		
		private EntitySet<FilledAnswer> _FilledAnswers;
		
		private EntitySet<FilledAnswersOption> _FilledAnswersOptions;
		
		private EntitySet<FilledTemplateDocument> _FilledTemplateDocuments;
		
		private EntitySet<ScoringRule> _ScoringRules;
		
		private EntityRef<AnswerType> _AnswerType;
		
		private EntityRef<KnowledgeBase> _KnowledgeBase;
		
		private EntityRef<KnowledgeBase> _KnowledgeBase1;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKnowledgeBaseTemplateIdChanging(int value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    partial void OnKnowledgeBaseIdChanging(int value);
    partial void OnKnowledgeBaseIdChanged();
    partial void OnTemplateIdChanging(int value);
    partial void OnTemplateIdChanged();
    partial void OnParentKnowledgeBaseIdChanging(System.Nullable<int> value);
    partial void OnParentKnowledgeBaseIdChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnAnswerTypeIdChanging(System.Nullable<int> value);
    partial void OnAnswerTypeIdChanged();
    partial void OnMaxPointsChanging(System.Nullable<int> value);
    partial void OnMaxPointsChanged();
    partial void OnIsCriticalChanging(System.Nullable<bool> value);
    partial void OnIsCriticalChanged();
    partial void OnCriticalTooltipChanging(string value);
    partial void OnCriticalTooltipChanged();
    partial void OnIsDataBoxChanging(System.Nullable<bool> value);
    partial void OnIsDataBoxChanged();
    partial void OnDataBoxHeaderChanging(string value);
    partial void OnDataBoxHeaderChanged();
    partial void OnIsCorporateElementChanging(System.Nullable<bool> value);
    partial void OnIsCorporateElementChanged();
    partial void OnIsInfoDocEnableChanging(bool value);
    partial void OnIsInfoDocEnableChanged();
    partial void OnReferencePagesChanging(System.Nullable<int> value);
    partial void OnReferencePagesChanged();
    #endregion
		
		public KnowledgeBaseTemplate()
		{
			this._AnswerTypeWeightages = new EntitySet<AnswerTypeWeightage>(new Action<AnswerTypeWeightage>(this.attach_AnswerTypeWeightages), new Action<AnswerTypeWeightage>(this.detach_AnswerTypeWeightages));
			this._CorporateKnowledgeBaseElements = new EntitySet<CorporateKnowledgeBaseElement>(new Action<CorporateKnowledgeBaseElement>(this.attach_CorporateKnowledgeBaseElements), new Action<CorporateKnowledgeBaseElement>(this.detach_CorporateKnowledgeBaseElements));
			this._FilledAnswers = new EntitySet<FilledAnswer>(new Action<FilledAnswer>(this.attach_FilledAnswers), new Action<FilledAnswer>(this.detach_FilledAnswers));
			this._FilledAnswersOptions = new EntitySet<FilledAnswersOption>(new Action<FilledAnswersOption>(this.attach_FilledAnswersOptions), new Action<FilledAnswersOption>(this.detach_FilledAnswersOptions));
			this._FilledTemplateDocuments = new EntitySet<FilledTemplateDocument>(new Action<FilledTemplateDocument>(this.attach_FilledTemplateDocuments), new Action<FilledTemplateDocument>(this.detach_FilledTemplateDocuments));
			this._ScoringRules = new EntitySet<ScoringRule>(new Action<ScoringRule>(this.attach_ScoringRules), new Action<ScoringRule>(this.detach_ScoringRules));
			this._AnswerType = default(EntityRef<AnswerType>);
			this._KnowledgeBase = default(EntityRef<KnowledgeBase>);
			this._KnowledgeBase1 = default(EntityRef<KnowledgeBase>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseId", DbType="Int NOT NULL")]
		public int KnowledgeBaseId
		{
			get
			{
				return this._KnowledgeBaseId;
			}
			set
			{
				if ((this._KnowledgeBaseId != value))
				{
					if (this._KnowledgeBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseId = value;
					this.SendPropertyChanged("KnowledgeBaseId");
					this.OnKnowledgeBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int NOT NULL")]
		public int TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKnowledgeBaseId", DbType="Int")]
		public System.Nullable<int> ParentKnowledgeBaseId
		{
			get
			{
				return this._ParentKnowledgeBaseId;
			}
			set
			{
				if ((this._ParentKnowledgeBaseId != value))
				{
					if (this._KnowledgeBase1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentKnowledgeBaseIdChanging(value);
					this.SendPropertyChanging();
					this._ParentKnowledgeBaseId = value;
					this.SendPropertyChanged("ParentKnowledgeBaseId");
					this.OnParentKnowledgeBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeId", DbType="Int")]
		public System.Nullable<int> AnswerTypeId
		{
			get
			{
				return this._AnswerTypeId;
			}
			set
			{
				if ((this._AnswerTypeId != value))
				{
					if (this._AnswerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeId = value;
					this.SendPropertyChanged("AnswerTypeId");
					this.OnAnswerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPoints", DbType="Int")]
		public System.Nullable<int> MaxPoints
		{
			get
			{
				return this._MaxPoints;
			}
			set
			{
				if ((this._MaxPoints != value))
				{
					this.OnMaxPointsChanging(value);
					this.SendPropertyChanging();
					this._MaxPoints = value;
					this.SendPropertyChanged("MaxPoints");
					this.OnMaxPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCritical", DbType="Bit")]
		public System.Nullable<bool> IsCritical
		{
			get
			{
				return this._IsCritical;
			}
			set
			{
				if ((this._IsCritical != value))
				{
					this.OnIsCriticalChanging(value);
					this.SendPropertyChanging();
					this._IsCritical = value;
					this.SendPropertyChanged("IsCritical");
					this.OnIsCriticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CriticalTooltip", DbType="NVarChar(250)")]
		public string CriticalTooltip
		{
			get
			{
				return this._CriticalTooltip;
			}
			set
			{
				if ((this._CriticalTooltip != value))
				{
					this.OnCriticalTooltipChanging(value);
					this.SendPropertyChanging();
					this._CriticalTooltip = value;
					this.SendPropertyChanged("CriticalTooltip");
					this.OnCriticalTooltipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDataBox", DbType="Bit")]
		public System.Nullable<bool> IsDataBox
		{
			get
			{
				return this._IsDataBox;
			}
			set
			{
				if ((this._IsDataBox != value))
				{
					this.OnIsDataBoxChanging(value);
					this.SendPropertyChanging();
					this._IsDataBox = value;
					this.SendPropertyChanged("IsDataBox");
					this.OnIsDataBoxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxHeader", DbType="VarChar(100)")]
		public string DataBoxHeader
		{
			get
			{
				return this._DataBoxHeader;
			}
			set
			{
				if ((this._DataBoxHeader != value))
				{
					this.OnDataBoxHeaderChanging(value);
					this.SendPropertyChanging();
					this._DataBoxHeader = value;
					this.SendPropertyChanged("DataBoxHeader");
					this.OnDataBoxHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorporateElement", DbType="Bit")]
		public System.Nullable<bool> IsCorporateElement
		{
			get
			{
				return this._IsCorporateElement;
			}
			set
			{
				if ((this._IsCorporateElement != value))
				{
					this.OnIsCorporateElementChanging(value);
					this.SendPropertyChanging();
					this._IsCorporateElement = value;
					this.SendPropertyChanged("IsCorporateElement");
					this.OnIsCorporateElementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInfoDocEnable", DbType="Bit NOT NULL")]
		public bool IsInfoDocEnable
		{
			get
			{
				return this._IsInfoDocEnable;
			}
			set
			{
				if ((this._IsInfoDocEnable != value))
				{
					this.OnIsInfoDocEnableChanging(value);
					this.SendPropertyChanging();
					this._IsInfoDocEnable = value;
					this.SendPropertyChanged("IsInfoDocEnable");
					this.OnIsInfoDocEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencePages", DbType="Int")]
		public System.Nullable<int> ReferencePages
		{
			get
			{
				return this._ReferencePages;
			}
			set
			{
				if ((this._ReferencePages != value))
				{
					this.OnReferencePagesChanging(value);
					this.SendPropertyChanging();
					this._ReferencePages = value;
					this.SendPropertyChanged("ReferencePages");
					this.OnReferencePagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_AnswerTypeWeightage", Storage="_AnswerTypeWeightages", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId")]
		public EntitySet<AnswerTypeWeightage> AnswerTypeWeightages
		{
			get
			{
				return this._AnswerTypeWeightages;
			}
			set
			{
				this._AnswerTypeWeightages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_CorporateKnowledgeBaseElement", Storage="_CorporateKnowledgeBaseElements", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId")]
		public EntitySet<CorporateKnowledgeBaseElement> CorporateKnowledgeBaseElements
		{
			get
			{
				return this._CorporateKnowledgeBaseElements;
			}
			set
			{
				this._CorporateKnowledgeBaseElements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledAnswer", Storage="_FilledAnswers", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId")]
		public EntitySet<FilledAnswer> FilledAnswers
		{
			get
			{
				return this._FilledAnswers;
			}
			set
			{
				this._FilledAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledAnswersOption", Storage="_FilledAnswersOptions", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgebaseTemplateId")]
		public EntitySet<FilledAnswersOption> FilledAnswersOptions
		{
			get
			{
				return this._FilledAnswersOptions;
			}
			set
			{
				this._FilledAnswersOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_FilledTemplateDocument", Storage="_FilledTemplateDocuments", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId")]
		public EntitySet<FilledTemplateDocument> FilledTemplateDocuments
		{
			get
			{
				return this._FilledTemplateDocuments;
			}
			set
			{
				this._FilledTemplateDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_ScoringRule", Storage="_ScoringRules", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId")]
		public EntitySet<ScoringRule> ScoringRules
		{
			get
			{
				return this._ScoringRules;
			}
			set
			{
				this._ScoringRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnswerType_KnowledgeBaseTemplate", Storage="_AnswerType", ThisKey="AnswerTypeId", OtherKey="AnswerTypeId", IsForeignKey=true)]
		public AnswerType AnswerType
		{
			get
			{
				return this._AnswerType.Entity;
			}
			set
			{
				AnswerType previousValue = this._AnswerType.Entity;
				if (((previousValue != value) 
							|| (this._AnswerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnswerType.Entity = null;
						previousValue.KnowledgeBaseTemplates.Remove(this);
					}
					this._AnswerType.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBaseTemplates.Add(this);
						this._AnswerTypeId = value.AnswerTypeId;
					}
					else
					{
						this._AnswerTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AnswerType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBase_KnowledgeBaseTemplate", Storage="_KnowledgeBase", ThisKey="KnowledgeBaseId", OtherKey="KnowledgeBaseId", IsForeignKey=true)]
		public KnowledgeBase KnowledgeBase
		{
			get
			{
				return this._KnowledgeBase.Entity;
			}
			set
			{
				KnowledgeBase previousValue = this._KnowledgeBase.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBase.Entity = null;
						previousValue.KnowledgeBaseTemplates.Remove(this);
					}
					this._KnowledgeBase.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBaseTemplates.Add(this);
						this._KnowledgeBaseId = value.KnowledgeBaseId;
					}
					else
					{
						this._KnowledgeBaseId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBase_KnowledgeBaseTemplate1", Storage="_KnowledgeBase1", ThisKey="ParentKnowledgeBaseId", OtherKey="KnowledgeBaseId", IsForeignKey=true)]
		public KnowledgeBase KnowledgeBase1
		{
			get
			{
				return this._KnowledgeBase1.Entity;
			}
			set
			{
				KnowledgeBase previousValue = this._KnowledgeBase1.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBase1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBase1.Entity = null;
						previousValue.KnowledgeBaseTemplates1.Remove(this);
					}
					this._KnowledgeBase1.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBaseTemplates1.Add(this);
						this._ParentKnowledgeBaseId = value.KnowledgeBaseId;
					}
					else
					{
						this._ParentKnowledgeBaseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("KnowledgeBase1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_KnowledgeBaseTemplate", Storage="_Template", ThisKey="TemplateId", OtherKey="TemplateId", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.KnowledgeBaseTemplates.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBaseTemplates.Add(this);
						this._TemplateId = value.TemplateId;
					}
					else
					{
						this._TemplateId = default(int);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnswerTypeWeightages(AnswerTypeWeightage entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_AnswerTypeWeightages(AnswerTypeWeightage entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
		
		private void attach_CorporateKnowledgeBaseElements(CorporateKnowledgeBaseElement entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_CorporateKnowledgeBaseElements(CorporateKnowledgeBaseElement entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
		
		private void attach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
		
		private void attach_FilledAnswersOptions(FilledAnswersOption entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_FilledAnswersOptions(FilledAnswersOption entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
		
		private void attach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
		
		private void attach_ScoringRules(ScoringRule entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = this;
		}
		
		private void detach_ScoringRules(ScoringRule entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KnowledgeBaseType")]
	public partial class KnowledgeBaseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KnowledgeBaseTypeId;
		
		private string _KnowledgeBaseType1;
		
		private int _TemplateTypeId;
		
		private EntitySet<KnowledgeBase> _KnowledgeBases;
		
		private EntityRef<TemplateType> _TemplateType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKnowledgeBaseTypeIdChanging(int value);
    partial void OnKnowledgeBaseTypeIdChanged();
    partial void OnKnowledgeBaseType1Changing(string value);
    partial void OnKnowledgeBaseType1Changed();
    partial void OnTemplateTypeIdChanging(int value);
    partial void OnTemplateTypeIdChanged();
    #endregion
		
		public KnowledgeBaseType()
		{
			this._KnowledgeBases = new EntitySet<KnowledgeBase>(new Action<KnowledgeBase>(this.attach_KnowledgeBases), new Action<KnowledgeBase>(this.detach_KnowledgeBases));
			this._TemplateType = default(EntityRef<TemplateType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KnowledgeBaseTypeId
		{
			get
			{
				return this._KnowledgeBaseTypeId;
			}
			set
			{
				if ((this._KnowledgeBaseTypeId != value))
				{
					this.OnKnowledgeBaseTypeIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTypeId = value;
					this.SendPropertyChanged("KnowledgeBaseTypeId");
					this.OnKnowledgeBaseTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="KnowledgeBaseType", Storage="_KnowledgeBaseType1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string KnowledgeBaseType1
		{
			get
			{
				return this._KnowledgeBaseType1;
			}
			set
			{
				if ((this._KnowledgeBaseType1 != value))
				{
					this.OnKnowledgeBaseType1Changing(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseType1 = value;
					this.SendPropertyChanged("KnowledgeBaseType1");
					this.OnKnowledgeBaseType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateTypeId", DbType="Int NOT NULL")]
		public int TemplateTypeId
		{
			get
			{
				return this._TemplateTypeId;
			}
			set
			{
				if ((this._TemplateTypeId != value))
				{
					if (this._TemplateType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeId = value;
					this.SendPropertyChanged("TemplateTypeId");
					this.OnTemplateTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseType_KnowledgeBase", Storage="_KnowledgeBases", ThisKey="KnowledgeBaseTypeId", OtherKey="KnowledgeBaseTypeId")]
		public EntitySet<KnowledgeBase> KnowledgeBases
		{
			get
			{
				return this._KnowledgeBases;
			}
			set
			{
				this._KnowledgeBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateType_KnowledgeBaseType", Storage="_TemplateType", ThisKey="TemplateTypeId", OtherKey="TemplateTypeId", IsForeignKey=true)]
		public TemplateType TemplateType
		{
			get
			{
				return this._TemplateType.Entity;
			}
			set
			{
				TemplateType previousValue = this._TemplateType.Entity;
				if (((previousValue != value) 
							|| (this._TemplateType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateType.Entity = null;
						previousValue.KnowledgeBaseTypes.Remove(this);
					}
					this._TemplateType.Entity = value;
					if ((value != null))
					{
						value.KnowledgeBaseTypes.Add(this);
						this._TemplateTypeId = value.TemplateTypeId;
					}
					else
					{
						this._TemplateTypeId = default(int);
					}
					this.SendPropertyChanged("TemplateType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeBases(KnowledgeBase entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseType = this;
		}
		
		private void detach_KnowledgeBases(KnowledgeBase entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeBaseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LibraryDocument")]
	public partial class LibraryDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LibraryDocumentId;
		
		private System.Nullable<int> _LibrarySectionId;
		
		private string _Name;
		
		private string _Link;
		
		private System.DateTime _UploadedDate;
		
		private int _UploadedBy;
		
		private string _Image;
		
		private string _description;
		
		private System.Nullable<int> _PracticeId;
		
		private EntityRef<LibrarySection> _LibrarySection;
		
		private EntityRef<Practice> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLibraryDocumentIdChanging(int value);
    partial void OnLibraryDocumentIdChanged();
    partial void OnLibrarySectionIdChanging(System.Nullable<int> value);
    partial void OnLibrarySectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnUploadedDateChanging(System.DateTime value);
    partial void OnUploadedDateChanged();
    partial void OnUploadedByChanging(int value);
    partial void OnUploadedByChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    #endregion
		
		public LibraryDocument()
		{
			this._LibrarySection = default(EntityRef<LibrarySection>);
			this._Practice = default(EntityRef<Practice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryDocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LibraryDocumentId
		{
			get
			{
				return this._LibraryDocumentId;
			}
			set
			{
				if ((this._LibraryDocumentId != value))
				{
					this.OnLibraryDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._LibraryDocumentId = value;
					this.SendPropertyChanged("LibraryDocumentId");
					this.OnLibraryDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibrarySectionId", DbType="Int")]
		public System.Nullable<int> LibrarySectionId
		{
			get
			{
				return this._LibrarySectionId;
			}
			set
			{
				if ((this._LibrarySectionId != value))
				{
					if (this._LibrarySection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibrarySectionIdChanging(value);
					this.SendPropertyChanging();
					this._LibrarySectionId = value;
					this.SendPropertyChanged("LibrarySectionId");
					this.OnLibrarySectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedDate
		{
			get
			{
				return this._UploadedDate;
			}
			set
			{
				if ((this._UploadedDate != value))
				{
					this.OnUploadedDateChanging(value);
					this.SendPropertyChanging();
					this._UploadedDate = value;
					this.SendPropertyChanged("UploadedDate");
					this.OnUploadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="Int NOT NULL")]
		public int UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(500)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_LibraryDocument", Storage="_LibrarySection", ThisKey="LibrarySectionId", OtherKey="LibrarySectionId", IsForeignKey=true)]
		public LibrarySection LibrarySection
		{
			get
			{
				return this._LibrarySection.Entity;
			}
			set
			{
				LibrarySection previousValue = this._LibrarySection.Entity;
				if (((previousValue != value) 
							|| (this._LibrarySection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LibrarySection.Entity = null;
						previousValue.LibraryDocuments.Remove(this);
					}
					this._LibrarySection.Entity = value;
					if ((value != null))
					{
						value.LibraryDocuments.Add(this);
						this._LibrarySectionId = value.LibrarySectionId;
					}
					else
					{
						this._LibrarySectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LibrarySection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_LibraryDocument", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.LibraryDocuments.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.LibraryDocuments.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LibrarySection")]
	public partial class LibrarySection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LibrarySectionId;
		
		private System.Nullable<int> _ParentLibrarySectionId;
		
		private string _Name;
		
		private string _ContentType;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private EntitySet<EnterpriseLibrarySection> _EnterpriseLibrarySections;
		
		private EntitySet<LibraryDocument> _LibraryDocuments;
		
		private EntitySet<LibrarySection> _LibrarySections;
		
		private EntityRef<LibrarySection> _LibrarySection1;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLibrarySectionIdChanging(int value);
    partial void OnLibrarySectionIdChanged();
    partial void OnParentLibrarySectionIdChanging(System.Nullable<int> value);
    partial void OnParentLibrarySectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    #endregion
		
		public LibrarySection()
		{
			this._EnterpriseLibrarySections = new EntitySet<EnterpriseLibrarySection>(new Action<EnterpriseLibrarySection>(this.attach_EnterpriseLibrarySections), new Action<EnterpriseLibrarySection>(this.detach_EnterpriseLibrarySections));
			this._LibraryDocuments = new EntitySet<LibraryDocument>(new Action<LibraryDocument>(this.attach_LibraryDocuments), new Action<LibraryDocument>(this.detach_LibraryDocuments));
			this._LibrarySections = new EntitySet<LibrarySection>(new Action<LibrarySection>(this.attach_LibrarySections), new Action<LibrarySection>(this.detach_LibrarySections));
			this._LibrarySection1 = default(EntityRef<LibrarySection>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibrarySectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LibrarySectionId
		{
			get
			{
				return this._LibrarySectionId;
			}
			set
			{
				if ((this._LibrarySectionId != value))
				{
					this.OnLibrarySectionIdChanging(value);
					this.SendPropertyChanging();
					this._LibrarySectionId = value;
					this.SendPropertyChanged("LibrarySectionId");
					this.OnLibrarySectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentLibrarySectionId", DbType="Int")]
		public System.Nullable<int> ParentLibrarySectionId
		{
			get
			{
				return this._ParentLibrarySectionId;
			}
			set
			{
				if ((this._ParentLibrarySectionId != value))
				{
					if (this._LibrarySection1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentLibrarySectionIdChanging(value);
					this.SendPropertyChanging();
					this._ParentLibrarySectionId = value;
					this.SendPropertyChanged("ParentLibrarySectionId");
					this.OnParentLibrarySectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_EnterpriseLibrarySection", Storage="_EnterpriseLibrarySections", ThisKey="LibrarySectionId", OtherKey="LibrarySectionId")]
		public EntitySet<EnterpriseLibrarySection> EnterpriseLibrarySections
		{
			get
			{
				return this._EnterpriseLibrarySections;
			}
			set
			{
				this._EnterpriseLibrarySections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_LibraryDocument", Storage="_LibraryDocuments", ThisKey="LibrarySectionId", OtherKey="LibrarySectionId")]
		public EntitySet<LibraryDocument> LibraryDocuments
		{
			get
			{
				return this._LibraryDocuments;
			}
			set
			{
				this._LibraryDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_LibrarySection", Storage="_LibrarySections", ThisKey="LibrarySectionId", OtherKey="ParentLibrarySectionId")]
		public EntitySet<LibrarySection> LibrarySections
		{
			get
			{
				return this._LibrarySections;
			}
			set
			{
				this._LibrarySections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LibrarySection_LibrarySection", Storage="_LibrarySection1", ThisKey="ParentLibrarySectionId", OtherKey="LibrarySectionId", IsForeignKey=true)]
		public LibrarySection LibrarySection1
		{
			get
			{
				return this._LibrarySection1.Entity;
			}
			set
			{
				LibrarySection previousValue = this._LibrarySection1.Entity;
				if (((previousValue != value) 
							|| (this._LibrarySection1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LibrarySection1.Entity = null;
						previousValue.LibrarySections.Remove(this);
					}
					this._LibrarySection1.Entity = value;
					if ((value != null))
					{
						value.LibrarySections.Add(this);
						this._ParentLibrarySectionId = value.LibrarySectionId;
					}
					else
					{
						this._ParentLibrarySectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LibrarySection1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_LibrarySection", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.LibrarySections.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.LibrarySections.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection = this;
		}
		
		private void detach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection = null;
		}
		
		private void attach_LibraryDocuments(LibraryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection = this;
		}
		
		private void detach_LibraryDocuments(LibraryDocument entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection = null;
		}
		
		private void attach_LibrarySections(LibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection1 = this;
		}
		
		private void detach_LibrarySections(LibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.LibrarySection1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginRecord")]
	public partial class LoginRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoginRecordId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginRecordIdChanging(int value);
    partial void OnLoginRecordIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    #endregion
		
		public LoginRecord()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginRecordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoginRecordId
		{
			get
			{
				return this._LoginRecordId;
			}
			set
			{
				if ((this._LoginRecordId != value))
				{
					this.OnLoginRecordIdChanging(value);
					this.SendPropertyChanging();
					this._LoginRecordId = value;
					this.SendPropertyChanged("LoginRecordId");
					this.OnLoginRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginRecord", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LoginRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LoginRecords.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalGroup")]
	public partial class MedicalGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicalGroupId;
		
		private int _EnterpriseId;
		
		private string _Name;
		
		private System.Nullable<int> _AddressId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private EntitySet<EnterpriseLibrarySection> _EnterpriseLibrarySections;
		
		private EntitySet<EnterpriseReportSection> _EnterpriseReportSections;
		
		private EntitySet<EnterpriseToolSection> _EnterpriseToolSections;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<LibrarySection> _LibrarySections;
		
		private EntitySet<Practice> _Practices;
		
		private EntitySet<ProjectAssignment> _ProjectAssignments;
		
		private EntitySet<Template> _Templates;
		
		private EntitySet<TemplateOptionAssignment> _TemplateOptionAssignments;
		
		private EntitySet<ToolSection> _ToolSections;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Enterprise> _Enterprise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicalGroupIdChanging(int value);
    partial void OnMedicalGroupIdChanged();
    partial void OnEnterpriseIdChanging(int value);
    partial void OnEnterpriseIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    #endregion
		
		public MedicalGroup()
		{
			this._EnterpriseLibrarySections = new EntitySet<EnterpriseLibrarySection>(new Action<EnterpriseLibrarySection>(this.attach_EnterpriseLibrarySections), new Action<EnterpriseLibrarySection>(this.detach_EnterpriseLibrarySections));
			this._EnterpriseReportSections = new EntitySet<EnterpriseReportSection>(new Action<EnterpriseReportSection>(this.attach_EnterpriseReportSections), new Action<EnterpriseReportSection>(this.detach_EnterpriseReportSections));
			this._EnterpriseToolSections = new EntitySet<EnterpriseToolSection>(new Action<EnterpriseToolSection>(this.attach_EnterpriseToolSections), new Action<EnterpriseToolSection>(this.detach_EnterpriseToolSections));
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._LibrarySections = new EntitySet<LibrarySection>(new Action<LibrarySection>(this.attach_LibrarySections), new Action<LibrarySection>(this.detach_LibrarySections));
			this._Practices = new EntitySet<Practice>(new Action<Practice>(this.attach_Practices), new Action<Practice>(this.detach_Practices));
			this._ProjectAssignments = new EntitySet<ProjectAssignment>(new Action<ProjectAssignment>(this.attach_ProjectAssignments), new Action<ProjectAssignment>(this.detach_ProjectAssignments));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._TemplateOptionAssignments = new EntitySet<TemplateOptionAssignment>(new Action<TemplateOptionAssignment>(this.attach_TemplateOptionAssignments), new Action<TemplateOptionAssignment>(this.detach_TemplateOptionAssignments));
			this._ToolSections = new EntitySet<ToolSection>(new Action<ToolSection>(this.attach_ToolSections), new Action<ToolSection>(this.detach_ToolSections));
			this._Address = default(EntityRef<Address>);
			this._Enterprise = default(EntityRef<Enterprise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int NOT NULL")]
		public int EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseLibrarySection", Storage="_EnterpriseLibrarySections", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<EnterpriseLibrarySection> EnterpriseLibrarySections
		{
			get
			{
				return this._EnterpriseLibrarySections;
			}
			set
			{
				this._EnterpriseLibrarySections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseReportSection", Storage="_EnterpriseReportSections", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<EnterpriseReportSection> EnterpriseReportSections
		{
			get
			{
				return this._EnterpriseReportSections;
			}
			set
			{
				this._EnterpriseReportSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_EnterpriseToolSection", Storage="_EnterpriseToolSections", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<EnterpriseToolSection> EnterpriseToolSections
		{
			get
			{
				return this._EnterpriseToolSections;
			}
			set
			{
				this._EnterpriseToolSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Form", Storage="_Forms", ThisKey="MedicalGroupId", OtherKey="fkMedicalGroupId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_LibrarySection", Storage="_LibrarySections", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<LibrarySection> LibrarySections
		{
			get
			{
				return this._LibrarySections;
			}
			set
			{
				this._LibrarySections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Practice", Storage="_Practices", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<Practice> Practices
		{
			get
			{
				return this._Practices;
			}
			set
			{
				this._Practices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_ProjectAssignment", Storage="_ProjectAssignments", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this._ProjectAssignments;
			}
			set
			{
				this._ProjectAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Template", Storage="_Templates", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_TemplateOptionAssignment", Storage="_TemplateOptionAssignments", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<TemplateOptionAssignment> TemplateOptionAssignments
		{
			get
			{
				return this._TemplateOptionAssignments;
			}
			set
			{
				this._TemplateOptionAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_ToolSection", Storage="_ToolSections", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId")]
		public EntitySet<ToolSection> ToolSections
		{
			get
			{
				return this._ToolSections;
			}
			set
			{
				this._ToolSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_MedicalGroup", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.MedicalGroups.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.MedicalGroups.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_MedicalGroup", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.MedicalGroups.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.MedicalGroups.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(int);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_EnterpriseLibrarySections(EnterpriseLibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_EnterpriseReportSections(EnterpriseReportSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_EnterpriseReportSections(EnterpriseReportSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_LibrarySections(LibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_LibrarySections(LibrarySection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
		
		private void attach_ToolSections(ToolSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = this;
		}
		
		private void detach_ToolSections(ToolSection entity)
		{
			this.SendPropertyChanging();
			entity.MedicalGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NCQASubmissionRequest")]
	public partial class NCQASubmissionRequest
	{
		
		private string _ISSLicenseNumber;
		
		private string _UserName;
		
		private string _Password;
		
		private int _StatusId;
		
		private System.DateTime _RequestedOn;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private System.Nullable<int> _updatedby;
		
		private System.Nullable<System.DateTime> _Completedon;
		
		private int _ProjectUsageId;
		
		private int _PracticeSiteId;
		
		public NCQASubmissionRequest()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISSLicenseNumber", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ISSLicenseNumber
		{
			get
			{
				return this._ISSLicenseNumber;
			}
			set
			{
				if ((this._ISSLicenseNumber != value))
				{
					this._ISSLicenseNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this._StatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedOn", DbType="DateTime NOT NULL")]
		public System.DateTime RequestedOn
		{
			get
			{
				return this._RequestedOn;
			}
			set
			{
				if ((this._RequestedOn != value))
				{
					this._RequestedOn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this._LastUpdated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedby", DbType="Int")]
		public System.Nullable<int> updatedby
		{
			get
			{
				return this._updatedby;
			}
			set
			{
				if ((this._updatedby != value))
				{
					this._updatedby = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Completedon
		{
			get
			{
				return this._Completedon;
			}
			set
			{
				if ((this._Completedon != value))
				{
					this._Completedon = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", DbType="Int NOT NULL")]
		public int ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					this._ProjectUsageId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int NOT NULL")]
		public int PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					this._PracticeSiteId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private string _Name;
		
		private System.Nullable<int> _RoleId;
		
		private System.Nullable<bool> _Configurable;
		
		private System.Nullable<int> _EnterpriseId;
		
		private EntitySet<PageContent> _PageContents;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnConfigurableChanging(System.Nullable<bool> value);
    partial void OnConfigurableChanged();
    partial void OnEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnEnterpriseIdChanged();
    #endregion
		
		public Page()
		{
			this._PageContents = new EntitySet<PageContent>(new Action<PageContent>(this.attach_PageContents), new Action<PageContent>(this.detach_PageContents));
			this._Enterprise = default(EntityRef<Enterprise>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Configurable", DbType="Bit")]
		public System.Nullable<bool> Configurable
		{
			get
			{
				return this._Configurable;
			}
			set
			{
				if ((this._Configurable != value))
				{
					this.OnConfigurableChanging(value);
					this.SendPropertyChanging();
					this._Configurable = value;
					this.SendPropertyChanged("Configurable");
					this.OnConfigurableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int")]
		public System.Nullable<int> EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageContent", Storage="_PageContents", ThisKey="PageId", OtherKey="PageId")]
		public EntitySet<PageContent> PageContents
		{
			get
			{
				return this._PageContents;
			}
			set
			{
				this._PageContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Page", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Page", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PageContents(PageContent entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageContent")]
	public partial class PageContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageContentId;
		
		private int _PageId;
		
		private string _Content;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private System.Nullable<int> _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageContentIdChanging(int value);
    partial void OnPageContentIdChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    partial void OnLastUpdatedByChanging(System.Nullable<int> value);
    partial void OnLastUpdatedByChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    #endregion
		
		public PageContent()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageContentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageContentId
		{
			get
			{
				return this._PageContentId;
			}
			set
			{
				if ((this._PageContentId != value))
				{
					this.OnPageContentIdChanging(value);
					this.SendPropertyChanging();
					this._PageContentId = value;
					this.SendPropertyChanged("PageContentId");
					this.OnPageContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageId", DbType="Int NOT NULL")]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int")]
		public System.Nullable<int> LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PageContent", Storage="_Page", ThisKey="PageId", OtherKey="PageId", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PageContents.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PageContents.Add(this);
						this._PageId = value.PageId;
					}
					else
					{
						this._PageId = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Practice")]
	public partial class Practice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeId;
		
		private int _MedicalGroupId;
		
		private string _Name;
		
		private System.Nullable<int> _AddressId;
		
		private System.Nullable<int> _PracticeSizeId;
		
		private System.Nullable<int> _SpecialityId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private string _ContactName;
		
		private System.Nullable<int> _PracticeSiteId;
		
		private System.Nullable<bool> _IsCorporate;
		
		private EntitySet<ConsultingUserAccess> _ConsultingUserAccesses;
		
		private EntitySet<CorporateElementSubmission> _CorporateElementSubmissions;
		
		private EntitySet<CorporateKnowledgeBaseElement> _CorporateKnowledgeBaseElements;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<LibraryDocument> _LibraryDocuments;
		
		private EntitySet<PracticeSite> _PracticeSites;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
		private EntitySet<ProjectAssignment> _ProjectAssignments;
		
		private EntitySet<ProjectUsage> _ProjectUsages;
		
		private EntitySet<Template> _Templates;
		
		private EntitySet<TemplateOptionAssignment> _TemplateOptionAssignments;
		
		private EntitySet<ToolDocument> _ToolDocuments;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<PracticeSize> _PracticeSize;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    partial void OnMedicalGroupIdChanging(int value);
    partial void OnMedicalGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnPracticeSizeIdChanging(System.Nullable<int> value);
    partial void OnPracticeSizeIdChanged();
    partial void OnSpecialityIdChanging(System.Nullable<int> value);
    partial void OnSpecialityIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnPracticeSiteIdChanging(System.Nullable<int> value);
    partial void OnPracticeSiteIdChanged();
    partial void OnIsCorporateChanging(System.Nullable<bool> value);
    partial void OnIsCorporateChanged();
    #endregion
		
		public Practice()
		{
			this._ConsultingUserAccesses = new EntitySet<ConsultingUserAccess>(new Action<ConsultingUserAccess>(this.attach_ConsultingUserAccesses), new Action<ConsultingUserAccess>(this.detach_ConsultingUserAccesses));
			this._CorporateElementSubmissions = new EntitySet<CorporateElementSubmission>(new Action<CorporateElementSubmission>(this.attach_CorporateElementSubmissions), new Action<CorporateElementSubmission>(this.detach_CorporateElementSubmissions));
			this._CorporateKnowledgeBaseElements = new EntitySet<CorporateKnowledgeBaseElement>(new Action<CorporateKnowledgeBaseElement>(this.attach_CorporateKnowledgeBaseElements), new Action<CorporateKnowledgeBaseElement>(this.detach_CorporateKnowledgeBaseElements));
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._LibraryDocuments = new EntitySet<LibraryDocument>(new Action<LibraryDocument>(this.attach_LibraryDocuments), new Action<LibraryDocument>(this.detach_LibraryDocuments));
			this._PracticeSites = new EntitySet<PracticeSite>(new Action<PracticeSite>(this.attach_PracticeSites), new Action<PracticeSite>(this.detach_PracticeSites));
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			this._ProjectAssignments = new EntitySet<ProjectAssignment>(new Action<ProjectAssignment>(this.attach_ProjectAssignments), new Action<ProjectAssignment>(this.detach_ProjectAssignments));
			this._ProjectUsages = new EntitySet<ProjectUsage>(new Action<ProjectUsage>(this.attach_ProjectUsages), new Action<ProjectUsage>(this.detach_ProjectUsages));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._TemplateOptionAssignments = new EntitySet<TemplateOptionAssignment>(new Action<TemplateOptionAssignment>(this.attach_TemplateOptionAssignments), new Action<TemplateOptionAssignment>(this.detach_TemplateOptionAssignments));
			this._ToolDocuments = new EntitySet<ToolDocument>(new Action<ToolDocument>(this.attach_ToolDocuments), new Action<ToolDocument>(this.detach_ToolDocuments));
			this._Address = default(EntityRef<Address>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._PracticeSize = default(EntityRef<PracticeSize>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int NOT NULL")]
		public int MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSizeId", DbType="Int")]
		public System.Nullable<int> PracticeSizeId
		{
			get
			{
				return this._PracticeSizeId;
			}
			set
			{
				if ((this._PracticeSizeId != value))
				{
					if (this._PracticeSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeSizeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSizeId = value;
					this.SendPropertyChanged("PracticeSizeId");
					this.OnPracticeSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", DbType="Int")]
		public System.Nullable<int> SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int")]
		public System.Nullable<int> PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorporate", DbType="Bit")]
		public System.Nullable<bool> IsCorporate
		{
			get
			{
				return this._IsCorporate;
			}
			set
			{
				if ((this._IsCorporate != value))
				{
					this.OnIsCorporateChanging(value);
					this.SendPropertyChanging();
					this._IsCorporate = value;
					this.SendPropertyChanged("IsCorporate");
					this.OnIsCorporateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ConsultingUserAccess", Storage="_ConsultingUserAccesses", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<ConsultingUserAccess> ConsultingUserAccesses
		{
			get
			{
				return this._ConsultingUserAccesses;
			}
			set
			{
				this._ConsultingUserAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_CorporateElementSubmission", Storage="_CorporateElementSubmissions", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<CorporateElementSubmission> CorporateElementSubmissions
		{
			get
			{
				return this._CorporateElementSubmissions;
			}
			set
			{
				this._CorporateElementSubmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_CorporateKnowledgeBaseElement", Storage="_CorporateKnowledgeBaseElements", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<CorporateKnowledgeBaseElement> CorporateKnowledgeBaseElements
		{
			get
			{
				return this._CorporateKnowledgeBaseElements;
			}
			set
			{
				this._CorporateKnowledgeBaseElements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Form", Storage="_Forms", ThisKey="PracticeId", OtherKey="fkPracticeId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_LibraryDocument", Storage="_LibraryDocuments", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<LibraryDocument> LibraryDocuments
		{
			get
			{
				return this._LibraryDocuments;
			}
			set
			{
				this._LibraryDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_PracticeSite", Storage="_PracticeSites", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<PracticeSite> PracticeSites
		{
			get
			{
				return this._PracticeSites;
			}
			set
			{
				this._PracticeSites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_PracticeUser", Storage="_PracticeUsers", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ProjectAssignment", Storage="_ProjectAssignments", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this._ProjectAssignments;
			}
			set
			{
				this._ProjectAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ProjectUsage", Storage="_ProjectUsages", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<ProjectUsage> ProjectUsages
		{
			get
			{
				return this._ProjectUsages;
			}
			set
			{
				this._ProjectUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Template", Storage="_Templates", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_TemplateOptionAssignment", Storage="_TemplateOptionAssignments", ThisKey="PracticeId", OtherKey="PracticeId")]
		public EntitySet<TemplateOptionAssignment> TemplateOptionAssignments
		{
			get
			{
				return this._TemplateOptionAssignments;
			}
			set
			{
				this._TemplateOptionAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ToolDocument", Storage="_ToolDocuments", ThisKey="PracticeId", OtherKey="PraticeId")]
		public EntitySet<ToolDocument> ToolDocuments
		{
			get
			{
				return this._ToolDocuments;
			}
			set
			{
				this._ToolDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Practice", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Practices.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Practices.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Practice", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.Practices.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.Practices.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(int);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSize_Practice", Storage="_PracticeSize", ThisKey="PracticeSizeId", OtherKey="PracticeSizeId", IsForeignKey=true)]
		public PracticeSize PracticeSize
		{
			get
			{
				return this._PracticeSize.Entity;
			}
			set
			{
				PracticeSize previousValue = this._PracticeSize.Entity;
				if (((previousValue != value) 
							|| (this._PracticeSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeSize.Entity = null;
						previousValue.Practices.Remove(this);
					}
					this._PracticeSize.Entity = value;
					if ((value != null))
					{
						value.Practices.Add(this);
						this._PracticeSizeId = value.PracticeSizeId;
					}
					else
					{
						this._PracticeSizeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PracticeSize");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Practice", Storage="_Speciality", ThisKey="SpecialityId", OtherKey="SpecialityId", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Practices.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Practices.Add(this);
						this._SpecialityId = value.SpecialityId;
					}
					else
					{
						this._SpecialityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConsultingUserAccesses(ConsultingUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_ConsultingUserAccesses(ConsultingUserAccess entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_CorporateElementSubmissions(CorporateElementSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_CorporateElementSubmissions(CorporateElementSubmission entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_CorporateKnowledgeBaseElements(CorporateKnowledgeBaseElement entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_CorporateKnowledgeBaseElements(CorporateKnowledgeBaseElement entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_LibraryDocuments(LibraryDocument entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_LibraryDocuments(LibraryDocument entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_ProjectUsages(ProjectUsage entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_ProjectUsages(ProjectUsage entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
		
		private void attach_ToolDocuments(ToolDocument entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_ToolDocuments(ToolDocument entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeConsultant")]
	public partial class PracticeConsultant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeConsultantId;
		
		private int _PracticeId;
		
		private System.Nullable<int> _ConsultantId;
		
		private System.Nullable<int> _RelationshipId;
		
		private System.Xml.Linq.XElement _XmlData;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeConsultantIdChanging(int value);
    partial void OnPracticeConsultantIdChanged();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    partial void OnConsultantIdChanging(System.Nullable<int> value);
    partial void OnConsultantIdChanged();
    partial void OnRelationshipIdChanging(System.Nullable<int> value);
    partial void OnRelationshipIdChanged();
    partial void OnXmlDataChanging(System.Xml.Linq.XElement value);
    partial void OnXmlDataChanged();
    #endregion
		
		public PracticeConsultant()
		{
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeConsultantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeConsultantId
		{
			get
			{
				return this._PracticeConsultantId;
			}
			set
			{
				if ((this._PracticeConsultantId != value))
				{
					this.OnPracticeConsultantIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeConsultantId = value;
					this.SendPropertyChanged("PracticeConsultantId");
					this.OnPracticeConsultantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int NOT NULL")]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsultantId", DbType="Int")]
		public System.Nullable<int> ConsultantId
		{
			get
			{
				return this._ConsultantId;
			}
			set
			{
				if ((this._ConsultantId != value))
				{
					this.OnConsultantIdChanging(value);
					this.SendPropertyChanging();
					this._ConsultantId = value;
					this.SendPropertyChanged("ConsultantId");
					this.OnConsultantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", DbType="Int")]
		public System.Nullable<int> RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlData", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement XmlData
		{
			get
			{
				return this._XmlData;
			}
			set
			{
				if ((this._XmlData != value))
				{
					this.OnXmlDataChanging(value);
					this.SendPropertyChanging();
					this._XmlData = value;
					this.SendPropertyChanged("XmlData");
					this.OnXmlDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_PracticeConsultant", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.PracticeConsultants.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.PracticeConsultants.Add(this);
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeRole")]
	public partial class PracticeRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeRoleId;
		
		private string _Name;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeRoleIdChanging(int value);
    partial void OnPracticeRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PracticeRole()
		{
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeRoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeRoleId
		{
			get
			{
				return this._PracticeRoleId;
			}
			set
			{
				if ((this._PracticeRoleId != value))
				{
					this.OnPracticeRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeRoleId = value;
					this.SendPropertyChanged("PracticeRoleId");
					this.OnPracticeRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeRole_PracticeUser", Storage="_PracticeUsers", ThisKey="PracticeRoleId", OtherKey="PracticeRoleId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRole = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.PracticeRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeSite")]
	public partial class PracticeSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeSiteId;
		
		private int _PracticeId;
		
		private string _Name;
		
		private System.Nullable<int> _AddressId;
		
		private System.Nullable<int> _SpecialityId;
		
		private System.Nullable<int> _NumberOfProviders;
		
		private string _SiteGroupNPI;
		
		private bool _IsMainSite;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private string _ContactName;
		
		private EntitySet<FilledAnswer> _FilledAnswers;
		
		private EntitySet<FilledQuestionnaire> _FilledQuestionnaires;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeSiteIdChanging(int value);
    partial void OnPracticeSiteIdChanged();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIdChanging(System.Nullable<int> value);
    partial void OnAddressIdChanged();
    partial void OnSpecialityIdChanging(System.Nullable<int> value);
    partial void OnSpecialityIdChanged();
    partial void OnNumberOfProvidersChanging(System.Nullable<int> value);
    partial void OnNumberOfProvidersChanged();
    partial void OnSiteGroupNPIChanging(string value);
    partial void OnSiteGroupNPIChanged();
    partial void OnIsMainSiteChanging(bool value);
    partial void OnIsMainSiteChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    #endregion
		
		public PracticeSite()
		{
			this._FilledAnswers = new EntitySet<FilledAnswer>(new Action<FilledAnswer>(this.attach_FilledAnswers), new Action<FilledAnswer>(this.detach_FilledAnswers));
			this._FilledQuestionnaires = new EntitySet<FilledQuestionnaire>(new Action<FilledQuestionnaire>(this.attach_FilledQuestionnaires), new Action<FilledQuestionnaire>(this.detach_FilledQuestionnaires));
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			this._Practice = default(EntityRef<Practice>);
			this._Address = default(EntityRef<Address>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int NOT NULL")]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int")]
		public System.Nullable<int> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", DbType="Int")]
		public System.Nullable<int> SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfProviders", DbType="Int")]
		public System.Nullable<int> NumberOfProviders
		{
			get
			{
				return this._NumberOfProviders;
			}
			set
			{
				if ((this._NumberOfProviders != value))
				{
					this.OnNumberOfProvidersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfProviders = value;
					this.SendPropertyChanged("NumberOfProviders");
					this.OnNumberOfProvidersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteGroupNPI", DbType="VarChar(50)")]
		public string SiteGroupNPI
		{
			get
			{
				return this._SiteGroupNPI;
			}
			set
			{
				if ((this._SiteGroupNPI != value))
				{
					this.OnSiteGroupNPIChanging(value);
					this.SendPropertyChanging();
					this._SiteGroupNPI = value;
					this.SendPropertyChanged("SiteGroupNPI");
					this.OnSiteGroupNPIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMainSite", DbType="Bit NOT NULL")]
		public bool IsMainSite
		{
			get
			{
				return this._IsMainSite;
			}
			set
			{
				if ((this._IsMainSite != value))
				{
					this.OnIsMainSiteChanging(value);
					this.SendPropertyChanging();
					this._IsMainSite = value;
					this.SendPropertyChanged("IsMainSite");
					this.OnIsMainSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_FilledAnswer", Storage="_FilledAnswers", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId")]
		public EntitySet<FilledAnswer> FilledAnswers
		{
			get
			{
				return this._FilledAnswers;
			}
			set
			{
				this._FilledAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_FilledQuestionnaire", Storage="_FilledQuestionnaires", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId")]
		public EntitySet<FilledQuestionnaire> FilledQuestionnaires
		{
			get
			{
				return this._FilledQuestionnaires;
			}
			set
			{
				this._FilledQuestionnaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_PracticeUser", Storage="_PracticeUsers", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_PracticeSite", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.PracticeSites.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.PracticeSites.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(int);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PracticeSite", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.PracticeSites.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.PracticeSites.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_PracticeSite", Storage="_Speciality", ThisKey="SpecialityId", OtherKey="SpecialityId", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.PracticeSites.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.PracticeSites.Add(this);
						this._SpecialityId = value.SpecialityId;
					}
					else
					{
						this._SpecialityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = this;
		}
		
		private void detach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = null;
		}
		
		private void attach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = this;
		}
		
		private void detach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = null;
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeSiteSubmission")]
	public partial class PracticeSiteSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeSiteSubmissionId;
		
		private int _PracticeSiteId;
		
		private int _TemplateId;
		
		private System.Nullable<bool> _Reviewed;
		
		private System.Nullable<bool> _Submitted;
		
		private System.Nullable<bool> _Recognized;
		
		private System.Nullable<System.DateTime> _SubmittedOn;
		
		private System.Nullable<System.DateTime> _RecognizedOn;
		
		private string _RecognizedLevel;
		
		private System.Nullable<int> _StatusId;
		
		private System.Xml.Linq.XElement _APICredentials;
		
		private System.Nullable<System.DateTime> _RequestedOn;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private System.Nullable<int> _updatedby;
		
		private System.Nullable<System.DateTime> _Completedon;
		
		private EntityRef<User> _User;
		
		private EntityRef<SubmissionStatus> _SubmissionStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeSiteSubmissionIdChanging(int value);
    partial void OnPracticeSiteSubmissionIdChanged();
    partial void OnPracticeSiteIdChanging(int value);
    partial void OnPracticeSiteIdChanged();
    partial void OnTemplateIdChanging(int value);
    partial void OnTemplateIdChanged();
    partial void OnReviewedChanging(System.Nullable<bool> value);
    partial void OnReviewedChanged();
    partial void OnSubmittedChanging(System.Nullable<bool> value);
    partial void OnSubmittedChanged();
    partial void OnRecognizedChanging(System.Nullable<bool> value);
    partial void OnRecognizedChanged();
    partial void OnSubmittedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmittedOnChanged();
    partial void OnRecognizedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnRecognizedOnChanged();
    partial void OnRecognizedLevelChanging(string value);
    partial void OnRecognizedLevelChanged();
    partial void OnStatusIdChanging(System.Nullable<int> value);
    partial void OnStatusIdChanged();
    partial void OnAPICredentialsChanging(System.Xml.Linq.XElement value);
    partial void OnAPICredentialsChanged();
    partial void OnRequestedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestedOnChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnupdatedbyChanging(System.Nullable<int> value);
    partial void OnupdatedbyChanged();
    partial void OnCompletedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedonChanged();
    #endregion
		
		public PracticeSiteSubmission()
		{
			this._User = default(EntityRef<User>);
			this._SubmissionStatus = default(EntityRef<SubmissionStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteSubmissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeSiteSubmissionId
		{
			get
			{
				return this._PracticeSiteSubmissionId;
			}
			set
			{
				if ((this._PracticeSiteSubmissionId != value))
				{
					this.OnPracticeSiteSubmissionIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteSubmissionId = value;
					this.SendPropertyChanged("PracticeSiteSubmissionId");
					this.OnPracticeSiteSubmissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int NOT NULL")]
		public int PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int NOT NULL")]
		public int TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reviewed", DbType="Bit")]
		public System.Nullable<bool> Reviewed
		{
			get
			{
				return this._Reviewed;
			}
			set
			{
				if ((this._Reviewed != value))
				{
					this.OnReviewedChanging(value);
					this.SendPropertyChanging();
					this._Reviewed = value;
					this.SendPropertyChanged("Reviewed");
					this.OnReviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submitted", DbType="Bit")]
		public System.Nullable<bool> Submitted
		{
			get
			{
				return this._Submitted;
			}
			set
			{
				if ((this._Submitted != value))
				{
					this.OnSubmittedChanging(value);
					this.SendPropertyChanging();
					this._Submitted = value;
					this.SendPropertyChanged("Submitted");
					this.OnSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recognized", DbType="Bit")]
		public System.Nullable<bool> Recognized
		{
			get
			{
				return this._Recognized;
			}
			set
			{
				if ((this._Recognized != value))
				{
					this.OnRecognizedChanging(value);
					this.SendPropertyChanging();
					this._Recognized = value;
					this.SendPropertyChanged("Recognized");
					this.OnRecognizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmittedOn
		{
			get
			{
				return this._SubmittedOn;
			}
			set
			{
				if ((this._SubmittedOn != value))
				{
					this.OnSubmittedOnChanging(value);
					this.SendPropertyChanging();
					this._SubmittedOn = value;
					this.SendPropertyChanged("SubmittedOn");
					this.OnSubmittedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecognizedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecognizedOn
		{
			get
			{
				return this._RecognizedOn;
			}
			set
			{
				if ((this._RecognizedOn != value))
				{
					this.OnRecognizedOnChanging(value);
					this.SendPropertyChanging();
					this._RecognizedOn = value;
					this.SendPropertyChanged("RecognizedOn");
					this.OnRecognizedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecognizedLevel", DbType="VarChar(10)")]
		public string RecognizedLevel
		{
			get
			{
				return this._RecognizedLevel;
			}
			set
			{
				if ((this._RecognizedLevel != value))
				{
					this.OnRecognizedLevelChanging(value);
					this.SendPropertyChanging();
					this._RecognizedLevel = value;
					this.SendPropertyChanged("RecognizedLevel");
					this.OnRecognizedLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int")]
		public System.Nullable<int> StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._SubmissionStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APICredentials", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement APICredentials
		{
			get
			{
				return this._APICredentials;
			}
			set
			{
				if ((this._APICredentials != value))
				{
					this.OnAPICredentialsChanging(value);
					this.SendPropertyChanging();
					this._APICredentials = value;
					this.SendPropertyChanged("APICredentials");
					this.OnAPICredentialsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestedOn
		{
			get
			{
				return this._RequestedOn;
			}
			set
			{
				if ((this._RequestedOn != value))
				{
					this.OnRequestedOnChanging(value);
					this.SendPropertyChanging();
					this._RequestedOn = value;
					this.SendPropertyChanged("RequestedOn");
					this.OnRequestedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedby", DbType="Int")]
		public System.Nullable<int> updatedby
		{
			get
			{
				return this._updatedby;
			}
			set
			{
				if ((this._updatedby != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnupdatedbyChanging(value);
					this.SendPropertyChanging();
					this._updatedby = value;
					this.SendPropertyChanged("updatedby");
					this.OnupdatedbyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completedon", DbType="DateTime")]
		public System.Nullable<System.DateTime> Completedon
		{
			get
			{
				return this._Completedon;
			}
			set
			{
				if ((this._Completedon != value))
				{
					this.OnCompletedonChanging(value);
					this.SendPropertyChanging();
					this._Completedon = value;
					this.SendPropertyChanged("Completedon");
					this.OnCompletedonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PracticeSiteSubmission", Storage="_User", ThisKey="updatedby", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PracticeSiteSubmissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PracticeSiteSubmissions.Add(this);
						this._updatedby = value.UserId;
					}
					else
					{
						this._updatedby = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubmissionStatus_PracticeSiteSubmission", Storage="_SubmissionStatus", ThisKey="StatusId", OtherKey="SubmissionStatusId", IsForeignKey=true)]
		public SubmissionStatus SubmissionStatus
		{
			get
			{
				return this._SubmissionStatus.Entity;
			}
			set
			{
				SubmissionStatus previousValue = this._SubmissionStatus.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionStatus.Entity = null;
						previousValue.PracticeSiteSubmissions.Remove(this);
					}
					this._SubmissionStatus.Entity = value;
					if ((value != null))
					{
						value.PracticeSiteSubmissions.Add(this);
						this._StatusId = value.SubmissionStatusId;
					}
					else
					{
						this._StatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubmissionStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeSize")]
	public partial class PracticeSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeSizeId;
		
		private string _PracticeSize1;
		
		private EntitySet<Practice> _Practices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeSizeIdChanging(int value);
    partial void OnPracticeSizeIdChanged();
    partial void OnPracticeSize1Changing(string value);
    partial void OnPracticeSize1Changed();
    #endregion
		
		public PracticeSize()
		{
			this._Practices = new EntitySet<Practice>(new Action<Practice>(this.attach_Practices), new Action<Practice>(this.detach_Practices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSizeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PracticeSizeId
		{
			get
			{
				return this._PracticeSizeId;
			}
			set
			{
				if ((this._PracticeSizeId != value))
				{
					this.OnPracticeSizeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSizeId = value;
					this.SendPropertyChanged("PracticeSizeId");
					this.OnPracticeSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PracticeSize", Storage="_PracticeSize1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PracticeSize1
		{
			get
			{
				return this._PracticeSize1;
			}
			set
			{
				if ((this._PracticeSize1 != value))
				{
					this.OnPracticeSize1Changing(value);
					this.SendPropertyChanging();
					this._PracticeSize1 = value;
					this.SendPropertyChanged("PracticeSize1");
					this.OnPracticeSize1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSize_Practice", Storage="_Practices", ThisKey="PracticeSizeId", OtherKey="PracticeSizeId")]
		public EntitySet<Practice> Practices
		{
			get
			{
				return this._Practices;
			}
			set
			{
				this._Practices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSize = this;
		}
		
		private void detach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.PracticeSize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PracticeUser")]
	public partial class PracticeUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _ProviderTypeId;
		
		private System.Nullable<int> _CredentialId;
		
		private System.Nullable<int> _SpecialityId;
		
		private System.Nullable<int> _PracticeId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.Nullable<System.DateTime> _BPRPExpiryDate;
		
		private System.Nullable<System.DateTime> _DRPExpiryDate;
		
		private System.Nullable<System.DateTime> _HSRPExpiryDate;
		
		private int _PracticeSiteId;
		
		private System.Nullable<int> _PracticeRoleId;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<PracticeRole> _PracticeRole;
		
		private EntityRef<PracticeSite> _PracticeSite;
		
		private EntityRef<Credential> _Credential;
		
		private EntityRef<User> _User;
		
		private EntityRef<ProviderType> _ProviderType;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnProviderTypeIdChanging(System.Nullable<int> value);
    partial void OnProviderTypeIdChanged();
    partial void OnCredentialIdChanging(System.Nullable<int> value);
    partial void OnCredentialIdChanged();
    partial void OnSpecialityIdChanging(System.Nullable<int> value);
    partial void OnSpecialityIdChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnBPRPExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBPRPExpiryDateChanged();
    partial void OnDRPExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDRPExpiryDateChanged();
    partial void OnHSRPExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHSRPExpiryDateChanged();
    partial void OnPracticeSiteIdChanging(int value);
    partial void OnPracticeSiteIdChanged();
    partial void OnPracticeRoleIdChanging(System.Nullable<int> value);
    partial void OnPracticeRoleIdChanged();
    #endregion
		
		public PracticeUser()
		{
			this._Practice = default(EntityRef<Practice>);
			this._PracticeRole = default(EntityRef<PracticeRole>);
			this._PracticeSite = default(EntityRef<PracticeSite>);
			this._Credential = default(EntityRef<Credential>);
			this._User = default(EntityRef<User>);
			this._ProviderType = default(EntityRef<ProviderType>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderTypeId", DbType="Int")]
		public System.Nullable<int> ProviderTypeId
		{
			get
			{
				return this._ProviderTypeId;
			}
			set
			{
				if ((this._ProviderTypeId != value))
				{
					if (this._ProviderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderTypeId = value;
					this.SendPropertyChanged("ProviderTypeId");
					this.OnProviderTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CredentialId", DbType="Int")]
		public System.Nullable<int> CredentialId
		{
			get
			{
				return this._CredentialId;
			}
			set
			{
				if ((this._CredentialId != value))
				{
					if (this._Credential.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCredentialIdChanging(value);
					this.SendPropertyChanging();
					this._CredentialId = value;
					this.SendPropertyChanged("CredentialId");
					this.OnCredentialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", DbType="Int")]
		public System.Nullable<int> SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BPRPExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BPRPExpiryDate
		{
			get
			{
				return this._BPRPExpiryDate;
			}
			set
			{
				if ((this._BPRPExpiryDate != value))
				{
					this.OnBPRPExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._BPRPExpiryDate = value;
					this.SendPropertyChanged("BPRPExpiryDate");
					this.OnBPRPExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRPExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DRPExpiryDate
		{
			get
			{
				return this._DRPExpiryDate;
			}
			set
			{
				if ((this._DRPExpiryDate != value))
				{
					this.OnDRPExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._DRPExpiryDate = value;
					this.SendPropertyChanged("DRPExpiryDate");
					this.OnDRPExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSRPExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HSRPExpiryDate
		{
			get
			{
				return this._HSRPExpiryDate;
			}
			set
			{
				if ((this._HSRPExpiryDate != value))
				{
					this.OnHSRPExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._HSRPExpiryDate = value;
					this.SendPropertyChanged("HSRPExpiryDate");
					this.OnHSRPExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int NOT NULL")]
		public int PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					if (this._PracticeSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeSiteIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeSiteId = value;
					this.SendPropertyChanged("PracticeSiteId");
					this.OnPracticeSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeRoleId", DbType="Int")]
		public System.Nullable<int> PracticeRoleId
		{
			get
			{
				return this._PracticeRoleId;
			}
			set
			{
				if ((this._PracticeRoleId != value))
				{
					if (this._PracticeRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeRoleId = value;
					this.SendPropertyChanged("PracticeRoleId");
					this.OnPracticeRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_PracticeUser", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeRole_PracticeUser", Storage="_PracticeRole", ThisKey="PracticeRoleId", OtherKey="PracticeRoleId", IsForeignKey=true)]
		public PracticeRole PracticeRole
		{
			get
			{
				return this._PracticeRole.Entity;
			}
			set
			{
				PracticeRole previousValue = this._PracticeRole.Entity;
				if (((previousValue != value) 
							|| (this._PracticeRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeRole.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._PracticeRole.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._PracticeRoleId = value.PracticeRoleId;
					}
					else
					{
						this._PracticeRoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PracticeRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PracticeSite_PracticeUser", Storage="_PracticeSite", ThisKey="PracticeSiteId", OtherKey="PracticeSiteId", IsForeignKey=true)]
		public PracticeSite PracticeSite
		{
			get
			{
				return this._PracticeSite.Entity;
			}
			set
			{
				PracticeSite previousValue = this._PracticeSite.Entity;
				if (((previousValue != value) 
							|| (this._PracticeSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PracticeSite.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._PracticeSite.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._PracticeSiteId = value.PracticeSiteId;
					}
					else
					{
						this._PracticeSiteId = default(int);
					}
					this.SendPropertyChanged("PracticeSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Credential_PracticeUser", Storage="_Credential", ThisKey="CredentialId", OtherKey="CredentialId", IsForeignKey=true)]
		public Credential Credential
		{
			get
			{
				return this._Credential.Entity;
			}
			set
			{
				Credential previousValue = this._Credential.Entity;
				if (((previousValue != value) 
							|| (this._Credential.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Credential.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._Credential.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._CredentialId = value.CredentialId;
					}
					else
					{
						this._CredentialId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Credential");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PracticeUser", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PracticeUser = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PracticeUser = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProviderType_PracticeUser", Storage="_ProviderType", ThisKey="ProviderTypeId", OtherKey="ProviderTypeId", IsForeignKey=true)]
		public ProviderType ProviderType
		{
			get
			{
				return this._ProviderType.Entity;
			}
			set
			{
				ProviderType previousValue = this._ProviderType.Entity;
				if (((previousValue != value) 
							|| (this._ProviderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProviderType.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._ProviderType.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._ProviderTypeId = value.ProviderTypeId;
					}
					else
					{
						this._ProviderTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProviderType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_PracticeUser", Storage="_Speciality", ThisKey="SpecialityId", OtherKey="SpecialityId", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.PracticeUsers.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.PracticeUsers.Add(this);
						this._SpecialityId = value.SpecialityId;
					}
					else
					{
						this._SpecialityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private string _Name;
		
		private string _Description;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private System.Nullable<int> _LastUpdatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdatedOn;
		
		private int _AccessLevelId;
		
		private EntitySet<ProjectAssignment> _ProjectAssignments;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntitySet<ProjectUsage> _ProjectUsages;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnLastUpdatedByChanging(System.Nullable<int> value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedOnChanged();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    #endregion
		
		public Project()
		{
			this._ProjectAssignments = new EntitySet<ProjectAssignment>(new Action<ProjectAssignment>(this.attach_ProjectAssignments), new Action<ProjectAssignment>(this.detach_ProjectAssignments));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._ProjectUsages = new EntitySet<ProjectUsage>(new Action<ProjectUsage>(this.attach_ProjectUsages), new Action<ProjectUsage>(this.detach_ProjectUsages));
			this._AccessLevel = default(EntityRef<AccessLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int")]
		public System.Nullable<int> LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdatedOn
		{
			get
			{
				return this._LastUpdatedOn;
			}
			set
			{
				if ((this._LastUpdatedOn != value))
				{
					this.OnLastUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedOn = value;
					this.SendPropertyChanged("LastUpdatedOn");
					this.OnLastUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", DbType="Int NOT NULL")]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAssignment", Storage="_ProjectAssignments", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this._ProjectAssignments;
			}
			set
			{
				this._ProjectAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectSection", Storage="_ProjectSections", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUsage", Storage="_ProjectUsages", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectUsage> ProjectUsages
		{
			get
			{
				return this._ProjectUsages;
			}
			set
			{
				this._ProjectUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Project", Storage="_AccessLevel", ThisKey="AccessLevelId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._AccessLevelId = value.AccessLevelId;
					}
					else
					{
						this._AccessLevelId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectUsages(ProjectUsage entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectUsages(ProjectUsage entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectAssignment")]
	public partial class ProjectAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectAssignmentId;
		
		private System.Nullable<int> _ProjectId;
		
		private System.Nullable<int> _ProjectSectionId;
		
		private System.Nullable<int> _EnterpriseId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private System.Nullable<int> _PracticeId;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<ProjectSection> _ProjectSection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectAssignmentIdChanging(int value);
    partial void OnProjectAssignmentIdChanged();
    partial void OnProjectIdChanging(System.Nullable<int> value);
    partial void OnProjectIdChanged();
    partial void OnProjectSectionIdChanging(System.Nullable<int> value);
    partial void OnProjectSectionIdChanged();
    partial void OnEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnEnterpriseIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    #endregion
		
		public ProjectAssignment()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._Practice = default(EntityRef<Practice>);
			this._Project = default(EntityRef<Project>);
			this._ProjectSection = default(EntityRef<ProjectSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectAssignmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectAssignmentId
		{
			get
			{
				return this._ProjectAssignmentId;
			}
			set
			{
				if ((this._ProjectAssignmentId != value))
				{
					this.OnProjectAssignmentIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectAssignmentId = value;
					this.SendPropertyChanged("ProjectAssignmentId");
					this.OnProjectAssignmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int")]
		public System.Nullable<int> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectSectionId", DbType="Int")]
		public System.Nullable<int> ProjectSectionId
		{
			get
			{
				return this._ProjectSectionId;
			}
			set
			{
				if ((this._ProjectSectionId != value))
				{
					if (this._ProjectSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectSectionId = value;
					this.SendPropertyChanged("ProjectSectionId");
					this.OnProjectSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int")]
		public System.Nullable<int> EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_ProjectAssignment", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.ProjectAssignments.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.ProjectAssignments.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_ProjectAssignment", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.ProjectAssignments.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.ProjectAssignments.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ProjectAssignment", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.ProjectAssignments.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.ProjectAssignments.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectAssignment", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectAssignments.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectAssignments.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectAssignment", Storage="_ProjectSection", ThisKey="ProjectSectionId", OtherKey="ProjectSectionId", IsForeignKey=true)]
		public ProjectSection ProjectSection
		{
			get
			{
				return this._ProjectSection.Entity;
			}
			set
			{
				ProjectSection previousValue = this._ProjectSection.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSection.Entity = null;
						previousValue.ProjectAssignments.Remove(this);
					}
					this._ProjectSection.Entity = value;
					if ((value != null))
					{
						value.ProjectAssignments.Add(this);
						this._ProjectSectionId = value.ProjectSectionId;
					}
					else
					{
						this._ProjectSectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectSection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectDocument")]
	public partial class ProjectDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectDocumentId;
		
		private int _ProjectSectionId;
		
		private string _Name;
		
		private string _Description;
		
		private string _Link;
		
		private string _Image;
		
		private System.DateTime _UploadedDate;
		
		private int _UploadedBy;
		
		private System.Nullable<int> _TemplateId;
		
		private System.Nullable<int> _FormId;
		
		private System.Nullable<int> _ProjectUsageId;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<ProjectSection> _ProjectSection;
		
		private EntityRef<ProjectUsage> _ProjectUsage;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectDocumentIdChanging(int value);
    partial void OnProjectDocumentIdChanged();
    partial void OnProjectSectionIdChanging(int value);
    partial void OnProjectSectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnUploadedDateChanging(System.DateTime value);
    partial void OnUploadedDateChanged();
    partial void OnUploadedByChanging(int value);
    partial void OnUploadedByChanged();
    partial void OnTemplateIdChanging(System.Nullable<int> value);
    partial void OnTemplateIdChanged();
    partial void OnFormIdChanging(System.Nullable<int> value);
    partial void OnFormIdChanged();
    partial void OnProjectUsageIdChanging(System.Nullable<int> value);
    partial void OnProjectUsageIdChanged();
    #endregion
		
		public ProjectDocument()
		{
			this._Form = default(EntityRef<Form>);
			this._ProjectSection = default(EntityRef<ProjectSection>);
			this._ProjectUsage = default(EntityRef<ProjectUsage>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectDocumentId
		{
			get
			{
				return this._ProjectDocumentId;
			}
			set
			{
				if ((this._ProjectDocumentId != value))
				{
					this.OnProjectDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectDocumentId = value;
					this.SendPropertyChanged("ProjectDocumentId");
					this.OnProjectDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectSectionId", DbType="Int NOT NULL")]
		public int ProjectSectionId
		{
			get
			{
				return this._ProjectSectionId;
			}
			set
			{
				if ((this._ProjectSectionId != value))
				{
					if (this._ProjectSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectSectionId = value;
					this.SendPropertyChanged("ProjectSectionId");
					this.OnProjectSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedDate
		{
			get
			{
				return this._UploadedDate;
			}
			set
			{
				if ((this._UploadedDate != value))
				{
					this.OnUploadedDateChanging(value);
					this.SendPropertyChanging();
					this._UploadedDate = value;
					this.SendPropertyChanged("UploadedDate");
					this.OnUploadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="Int NOT NULL")]
		public int UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int")]
		public System.Nullable<int> TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", DbType="Int")]
		public System.Nullable<int> FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", DbType="Int")]
		public System.Nullable<int> ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					if (this._ProjectUsage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectUsageIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectUsageId = value;
					this.SendPropertyChanged("ProjectUsageId");
					this.OnProjectUsageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_ProjectDocument", Storage="_Form", ThisKey="FormId", OtherKey="FormId", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.ProjectDocuments.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.ProjectDocuments.Add(this);
						this._FormId = value.FormId;
					}
					else
					{
						this._FormId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectDocument", Storage="_ProjectSection", ThisKey="ProjectSectionId", OtherKey="ProjectSectionId", IsForeignKey=true)]
		public ProjectSection ProjectSection
		{
			get
			{
				return this._ProjectSection.Entity;
			}
			set
			{
				ProjectSection previousValue = this._ProjectSection.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSection.Entity = null;
						previousValue.ProjectDocuments.Remove(this);
					}
					this._ProjectSection.Entity = value;
					if ((value != null))
					{
						value.ProjectDocuments.Add(this);
						this._ProjectSectionId = value.ProjectSectionId;
					}
					else
					{
						this._ProjectSectionId = default(int);
					}
					this.SendPropertyChanged("ProjectSection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_ProjectDocument", Storage="_ProjectUsage", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId", IsForeignKey=true)]
		public ProjectUsage ProjectUsage
		{
			get
			{
				return this._ProjectUsage.Entity;
			}
			set
			{
				ProjectUsage previousValue = this._ProjectUsage.Entity;
				if (((previousValue != value) 
							|| (this._ProjectUsage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectUsage.Entity = null;
						previousValue.ProjectDocuments.Remove(this);
					}
					this._ProjectUsage.Entity = value;
					if ((value != null))
					{
						value.ProjectDocuments.Add(this);
						this._ProjectUsageId = value.ProjectUsageId;
					}
					else
					{
						this._ProjectUsageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectUsage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_ProjectDocument", Storage="_Template", ThisKey="TemplateId", OtherKey="TemplateId", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.ProjectDocuments.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.ProjectDocuments.Add(this);
						this._TemplateId = value.TemplateId;
					}
					else
					{
						this._TemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectSection")]
	public partial class ProjectSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectSectionId;
		
		private System.Nullable<int> _ParentProjectSectionId;
		
		private string _Name;
		
		private int _ProjectId;
		
		private int _SectionTypeId;
		
		private System.Nullable<int> _TemplateId;
		
		private System.Nullable<int> _FormId;
		
		private int _AccessLevelId;
		
		private System.Nullable<int> _ToolLevelId;
		
		private System.Nullable<int> _SequenceNo;
		
		private System.Nullable<int> _fkTemplateOptionId;
		
		private EntitySet<ProjectAssignment> _ProjectAssignments;
		
		private EntitySet<ProjectDocument> _ProjectDocuments;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<ProjectSection> _ProjectSection1;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<SectionType> _SectionType;
		
		private EntityRef<Template> _Template;
		
		private EntityRef<TemplateOption> _TemplateOption;
		
		private EntityRef<ToolLevel> _ToolLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectSectionIdChanging(int value);
    partial void OnProjectSectionIdChanged();
    partial void OnParentProjectSectionIdChanging(System.Nullable<int> value);
    partial void OnParentProjectSectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnSectionTypeIdChanging(int value);
    partial void OnSectionTypeIdChanged();
    partial void OnTemplateIdChanging(System.Nullable<int> value);
    partial void OnTemplateIdChanged();
    partial void OnFormIdChanging(System.Nullable<int> value);
    partial void OnFormIdChanged();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    partial void OnToolLevelIdChanging(System.Nullable<int> value);
    partial void OnToolLevelIdChanged();
    partial void OnSequenceNoChanging(System.Nullable<int> value);
    partial void OnSequenceNoChanged();
    partial void OnfkTemplateOptionIdChanging(System.Nullable<int> value);
    partial void OnfkTemplateOptionIdChanged();
    #endregion
		
		public ProjectSection()
		{
			this._ProjectAssignments = new EntitySet<ProjectAssignment>(new Action<ProjectAssignment>(this.attach_ProjectAssignments), new Action<ProjectAssignment>(this.detach_ProjectAssignments));
			this._ProjectDocuments = new EntitySet<ProjectDocument>(new Action<ProjectDocument>(this.attach_ProjectDocuments), new Action<ProjectDocument>(this.detach_ProjectDocuments));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._AccessLevel = default(EntityRef<AccessLevel>);
			this._Form = default(EntityRef<Form>);
			this._ProjectSection1 = default(EntityRef<ProjectSection>);
			this._Project = default(EntityRef<Project>);
			this._SectionType = default(EntityRef<SectionType>);
			this._Template = default(EntityRef<Template>);
			this._TemplateOption = default(EntityRef<TemplateOption>);
			this._ToolLevel = default(EntityRef<ToolLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectSectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectSectionId
		{
			get
			{
				return this._ProjectSectionId;
			}
			set
			{
				if ((this._ProjectSectionId != value))
				{
					this.OnProjectSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectSectionId = value;
					this.SendPropertyChanged("ProjectSectionId");
					this.OnProjectSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentProjectSectionId", DbType="Int")]
		public System.Nullable<int> ParentProjectSectionId
		{
			get
			{
				return this._ParentProjectSectionId;
			}
			set
			{
				if ((this._ParentProjectSectionId != value))
				{
					if (this._ProjectSection1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentProjectSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ParentProjectSectionId = value;
					this.SendPropertyChanged("ParentProjectSectionId");
					this.OnParentProjectSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionTypeId", DbType="Int NOT NULL")]
		public int SectionTypeId
		{
			get
			{
				return this._SectionTypeId;
			}
			set
			{
				if ((this._SectionTypeId != value))
				{
					if (this._SectionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SectionTypeId = value;
					this.SendPropertyChanged("SectionTypeId");
					this.OnSectionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int")]
		public System.Nullable<int> TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormId", DbType="Int")]
		public System.Nullable<int> FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", DbType="Int NOT NULL")]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolLevelId", DbType="Int")]
		public System.Nullable<int> ToolLevelId
		{
			get
			{
				return this._ToolLevelId;
			}
			set
			{
				if ((this._ToolLevelId != value))
				{
					if (this._ToolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolLevelIdChanging(value);
					this.SendPropertyChanging();
					this._ToolLevelId = value;
					this.SendPropertyChanged("ToolLevelId");
					this.OnToolLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceNo", DbType="Int")]
		public System.Nullable<int> SequenceNo
		{
			get
			{
				return this._SequenceNo;
			}
			set
			{
				if ((this._SequenceNo != value))
				{
					this.OnSequenceNoChanging(value);
					this.SendPropertyChanging();
					this._SequenceNo = value;
					this.SendPropertyChanged("SequenceNo");
					this.OnSequenceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkTemplateOptionId", DbType="Int")]
		public System.Nullable<int> fkTemplateOptionId
		{
			get
			{
				return this._fkTemplateOptionId;
			}
			set
			{
				if ((this._fkTemplateOptionId != value))
				{
					if (this._TemplateOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfkTemplateOptionIdChanging(value);
					this.SendPropertyChanging();
					this._fkTemplateOptionId = value;
					this.SendPropertyChanged("fkTemplateOptionId");
					this.OnfkTemplateOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectAssignment", Storage="_ProjectAssignments", ThisKey="ProjectSectionId", OtherKey="ProjectSectionId")]
		public EntitySet<ProjectAssignment> ProjectAssignments
		{
			get
			{
				return this._ProjectAssignments;
			}
			set
			{
				this._ProjectAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectDocument", Storage="_ProjectDocuments", ThisKey="ProjectSectionId", OtherKey="ProjectSectionId")]
		public EntitySet<ProjectDocument> ProjectDocuments
		{
			get
			{
				return this._ProjectDocuments;
			}
			set
			{
				this._ProjectDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectSection", Storage="_ProjectSections", ThisKey="ProjectSectionId", OtherKey="ParentProjectSectionId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_ProjectSection", Storage="_AccessLevel", ThisKey="AccessLevelId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._AccessLevelId = value.AccessLevelId;
					}
					else
					{
						this._AccessLevelId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_ProjectSection", Storage="_Form", ThisKey="FormId", OtherKey="FormId", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._FormId = value.FormId;
					}
					else
					{
						this._FormId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectSection_ProjectSection", Storage="_ProjectSection1", ThisKey="ParentProjectSectionId", OtherKey="ProjectSectionId", IsForeignKey=true)]
		public ProjectSection ProjectSection1
		{
			get
			{
				return this._ProjectSection1.Entity;
			}
			set
			{
				ProjectSection previousValue = this._ProjectSection1.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSection1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSection1.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._ProjectSection1.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._ParentProjectSectionId = value.ProjectSectionId;
					}
					else
					{
						this._ParentProjectSectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectSection1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectSection", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SectionType_ProjectSection", Storage="_SectionType", ThisKey="SectionTypeId", OtherKey="SectionTypeId", IsForeignKey=true)]
		public SectionType SectionType
		{
			get
			{
				return this._SectionType.Entity;
			}
			set
			{
				SectionType previousValue = this._SectionType.Entity;
				if (((previousValue != value) 
							|| (this._SectionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SectionType.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._SectionType.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._SectionTypeId = value.SectionTypeId;
					}
					else
					{
						this._SectionTypeId = default(int);
					}
					this.SendPropertyChanged("SectionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_ProjectSection", Storage="_Template", ThisKey="TemplateId", OtherKey="TemplateId", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._TemplateId = value.TemplateId;
					}
					else
					{
						this._TemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_ProjectSection", Storage="_TemplateOption", ThisKey="fkTemplateOptionId", OtherKey="TemplateOptionId", IsForeignKey=true)]
		public TemplateOption TemplateOption
		{
			get
			{
				return this._TemplateOption.Entity;
			}
			set
			{
				TemplateOption previousValue = this._TemplateOption.Entity;
				if (((previousValue != value) 
							|| (this._TemplateOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateOption.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._TemplateOption.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._fkTemplateOptionId = value.TemplateOptionId;
					}
					else
					{
						this._fkTemplateOptionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TemplateOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_ProjectSection", Storage="_ToolLevel", ThisKey="ToolLevelId", OtherKey="ToolLevelId", IsForeignKey=true)]
		public ToolLevel ToolLevel
		{
			get
			{
				return this._ToolLevel.Entity;
			}
			set
			{
				ToolLevel previousValue = this._ToolLevel.Entity;
				if (((previousValue != value) 
							|| (this._ToolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolLevel.Entity = null;
						previousValue.ProjectSections.Remove(this);
					}
					this._ToolLevel.Entity = value;
					if ((value != null))
					{
						value.ProjectSections.Add(this);
						this._ToolLevelId = value.ToolLevelId;
					}
					else
					{
						this._ToolLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToolLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection = this;
		}
		
		private void detach_ProjectAssignments(ProjectAssignment entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection = null;
		}
		
		private void attach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection = this;
		}
		
		private void detach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection1 = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSection1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectUsage")]
	public partial class ProjectUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectUsageId;
		
		private int _ProjectId;
		
		private int _PracticeId;
		
		private System.Nullable<int> _SequenceNo;
		
		private bool _IsVisible;
		
		private EntitySet<FilledAnswer> _FilledAnswers;
		
		private EntitySet<FilledQuestionnaire> _FilledQuestionnaires;
		
		private EntitySet<ProjectDocument> _ProjectDocuments;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectUsageIdChanging(int value);
    partial void OnProjectUsageIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnPracticeIdChanging(int value);
    partial void OnPracticeIdChanged();
    partial void OnSequenceNoChanging(System.Nullable<int> value);
    partial void OnSequenceNoChanged();
    partial void OnIsVisibleChanging(bool value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public ProjectUsage()
		{
			this._FilledAnswers = new EntitySet<FilledAnswer>(new Action<FilledAnswer>(this.attach_FilledAnswers), new Action<FilledAnswer>(this.detach_FilledAnswers));
			this._FilledQuestionnaires = new EntitySet<FilledQuestionnaire>(new Action<FilledQuestionnaire>(this.attach_FilledQuestionnaires), new Action<FilledQuestionnaire>(this.detach_FilledQuestionnaires));
			this._ProjectDocuments = new EntitySet<ProjectDocument>(new Action<ProjectDocument>(this.attach_ProjectDocuments), new Action<ProjectDocument>(this.detach_ProjectDocuments));
			this._Practice = default(EntityRef<Practice>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					this.OnProjectUsageIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectUsageId = value;
					this.SendPropertyChanged("ProjectUsageId");
					this.OnProjectUsageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL")]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int NOT NULL")]
		public int PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceNo", DbType="Int")]
		public System.Nullable<int> SequenceNo
		{
			get
			{
				return this._SequenceNo;
			}
			set
			{
				if ((this._SequenceNo != value))
				{
					this.OnSequenceNoChanging(value);
					this.SendPropertyChanging();
					this._SequenceNo = value;
					this.SendPropertyChanged("SequenceNo");
					this.OnSequenceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit NOT NULL")]
		public bool IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_FilledAnswer", Storage="_FilledAnswers", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId")]
		public EntitySet<FilledAnswer> FilledAnswers
		{
			get
			{
				return this._FilledAnswers;
			}
			set
			{
				this._FilledAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_FilledQuestionnaire", Storage="_FilledQuestionnaires", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId")]
		public EntitySet<FilledQuestionnaire> FilledQuestionnaires
		{
			get
			{
				return this._FilledQuestionnaires;
			}
			set
			{
				this._FilledQuestionnaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectUsage_ProjectDocument", Storage="_ProjectDocuments", ThisKey="ProjectUsageId", OtherKey="ProjectUsageId")]
		public EntitySet<ProjectDocument> ProjectDocuments
		{
			get
			{
				return this._ProjectDocuments;
			}
			set
			{
				this._ProjectDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ProjectUsage", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.ProjectUsages.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.ProjectUsages.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(int);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUsage", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectUsages.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectUsages.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = this;
		}
		
		private void detach_FilledAnswers(FilledAnswer entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = null;
		}
		
		private void attach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = this;
		}
		
		private void detach_FilledQuestionnaires(FilledQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = null;
		}
		
		private void attach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = this;
		}
		
		private void detach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.ProjectUsage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProviderType")]
	public partial class ProviderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProviderTypeId;
		
		private string _Name;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderTypeIdChanging(int value);
    partial void OnProviderTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProviderType()
		{
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProviderTypeId
		{
			get
			{
				return this._ProviderTypeId;
			}
			set
			{
				if ((this._ProviderTypeId != value))
				{
					this.OnProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderTypeId = value;
					this.SendPropertyChanged("ProviderTypeId");
					this.OnProviderTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProviderType_PracticeUser", Storage="_PracticeUsers", ThisKey="ProviderTypeId", OtherKey="ProviderTypeId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.ProviderType = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.ProviderType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relationship")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipId;
		
		private string _Name;
		
		private EntitySet<PracticeConsultant> _PracticeConsultants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(int value);
    partial void OnRelationshipIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Relationship()
		{
			this._PracticeConsultants = new EntitySet<PracticeConsultant>(new Action<PracticeConsultant>(this.attach_PracticeConsultants), new Action<PracticeConsultant>(this.detach_PracticeConsultants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Relationship_PracticeConsultant", Storage="_PracticeConsultants", ThisKey="RelationshipId", OtherKey="RelationshipId")]
		public EntitySet<PracticeConsultant> PracticeConsultants
		{
			get
			{
				return this._PracticeConsultants;
			}
			set
			{
				this._PracticeConsultants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeConsultants(PracticeConsultant entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_PracticeConsultants(PracticeConsultant entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportSection")]
	public partial class ReportSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportSectionId;
		
		private System.Nullable<int> _ParentReportSectionId;
		
		private string _Name;
		
		private string _ContentType;
		
		private System.Nullable<int> _MedicalGroupId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportSectionIdChanging(int value);
    partial void OnReportSectionIdChanged();
    partial void OnParentReportSectionIdChanging(System.Nullable<int> value);
    partial void OnParentReportSectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    #endregion
		
		public ReportSection()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportSectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportSectionId
		{
			get
			{
				return this._ReportSectionId;
			}
			set
			{
				if ((this._ReportSectionId != value))
				{
					this.OnReportSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ReportSectionId = value;
					this.SendPropertyChanged("ReportSectionId");
					this.OnReportSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentReportSectionId", DbType="Int")]
		public System.Nullable<int> ParentReportSectionId
		{
			get
			{
				return this._ParentReportSectionId;
			}
			set
			{
				if ((this._ParentReportSectionId != value))
				{
					this.OnParentReportSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ParentReportSectionId = value;
					this.SendPropertyChanged("ParentReportSectionId");
					this.OnParentReportSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Page> _Pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Page", Storage="_Pages", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScoringRule")]
	public partial class ScoringRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoringRuleId;
		
		private int _KnowledgeBaseTemplateId;
		
		private string _Score;
		
		private System.Nullable<int> _MinYesFactor;
		
		private System.Nullable<int> _MaxYesFactor;
		
		private string _MustPresentFactorSequence;
		
		private string _AbsentFactorSequence;
		
		private string _MustPassFactorSequence;
		
		private EntityRef<KnowledgeBaseTemplate> _KnowledgeBaseTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoringRuleIdChanging(int value);
    partial void OnScoringRuleIdChanged();
    partial void OnKnowledgeBaseTemplateIdChanging(int value);
    partial void OnKnowledgeBaseTemplateIdChanged();
    partial void OnScoreChanging(string value);
    partial void OnScoreChanged();
    partial void OnMinYesFactorChanging(System.Nullable<int> value);
    partial void OnMinYesFactorChanged();
    partial void OnMaxYesFactorChanging(System.Nullable<int> value);
    partial void OnMaxYesFactorChanged();
    partial void OnMustPresentFactorSequenceChanging(string value);
    partial void OnMustPresentFactorSequenceChanged();
    partial void OnAbsentFactorSequenceChanging(string value);
    partial void OnAbsentFactorSequenceChanged();
    partial void OnMustPassFactorSequenceChanging(string value);
    partial void OnMustPassFactorSequenceChanged();
    #endregion
		
		public ScoringRule()
		{
			this._KnowledgeBaseTemplate = default(EntityRef<KnowledgeBaseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoringRuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoringRuleId
		{
			get
			{
				return this._ScoringRuleId;
			}
			set
			{
				if ((this._ScoringRuleId != value))
				{
					this.OnScoringRuleIdChanging(value);
					this.SendPropertyChanging();
					this._ScoringRuleId = value;
					this.SendPropertyChanged("ScoringRuleId");
					this.OnScoringRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int NOT NULL")]
		public int KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					if (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeBaseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeBaseTemplateId = value;
					this.SendPropertyChanged("KnowledgeBaseTemplateId");
					this.OnKnowledgeBaseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinYesFactor", DbType="Int")]
		public System.Nullable<int> MinYesFactor
		{
			get
			{
				return this._MinYesFactor;
			}
			set
			{
				if ((this._MinYesFactor != value))
				{
					this.OnMinYesFactorChanging(value);
					this.SendPropertyChanging();
					this._MinYesFactor = value;
					this.SendPropertyChanged("MinYesFactor");
					this.OnMinYesFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxYesFactor", DbType="Int")]
		public System.Nullable<int> MaxYesFactor
		{
			get
			{
				return this._MaxYesFactor;
			}
			set
			{
				if ((this._MaxYesFactor != value))
				{
					this.OnMaxYesFactorChanging(value);
					this.SendPropertyChanging();
					this._MaxYesFactor = value;
					this.SendPropertyChanged("MaxYesFactor");
					this.OnMaxYesFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustPresentFactorSequence", DbType="VarChar(50)")]
		public string MustPresentFactorSequence
		{
			get
			{
				return this._MustPresentFactorSequence;
			}
			set
			{
				if ((this._MustPresentFactorSequence != value))
				{
					this.OnMustPresentFactorSequenceChanging(value);
					this.SendPropertyChanging();
					this._MustPresentFactorSequence = value;
					this.SendPropertyChanged("MustPresentFactorSequence");
					this.OnMustPresentFactorSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentFactorSequence", DbType="VarChar(50)")]
		public string AbsentFactorSequence
		{
			get
			{
				return this._AbsentFactorSequence;
			}
			set
			{
				if ((this._AbsentFactorSequence != value))
				{
					this.OnAbsentFactorSequenceChanging(value);
					this.SendPropertyChanging();
					this._AbsentFactorSequence = value;
					this.SendPropertyChanged("AbsentFactorSequence");
					this.OnAbsentFactorSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustPassFactorSequence", DbType="VarChar(50)")]
		public string MustPassFactorSequence
		{
			get
			{
				return this._MustPassFactorSequence;
			}
			set
			{
				if ((this._MustPassFactorSequence != value))
				{
					this.OnMustPassFactorSequenceChanging(value);
					this.SendPropertyChanging();
					this._MustPassFactorSequence = value;
					this.SendPropertyChanged("MustPassFactorSequence");
					this.OnMustPassFactorSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeBaseTemplate_ScoringRule", Storage="_KnowledgeBaseTemplate", ThisKey="KnowledgeBaseTemplateId", OtherKey="KnowledgeBaseTemplateId", IsForeignKey=true)]
		public KnowledgeBaseTemplate KnowledgeBaseTemplate
		{
			get
			{
				return this._KnowledgeBaseTemplate.Entity;
			}
			set
			{
				KnowledgeBaseTemplate previousValue = this._KnowledgeBaseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeBaseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeBaseTemplate.Entity = null;
						previousValue.ScoringRules.Remove(this);
					}
					this._KnowledgeBaseTemplate.Entity = value;
					if ((value != null))
					{
						value.ScoringRules.Add(this);
						this._KnowledgeBaseTemplateId = value.KnowledgeBaseTemplateId;
					}
					else
					{
						this._KnowledgeBaseTemplateId = default(int);
					}
					this.SendPropertyChanged("KnowledgeBaseTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SectionType")]
	public partial class SectionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionTypeId;
		
		private string _SectionName;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionTypeIdChanging(int value);
    partial void OnSectionTypeIdChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    #endregion
		
		public SectionType()
		{
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionTypeId
		{
			get
			{
				return this._SectionTypeId;
			}
			set
			{
				if ((this._SectionTypeId != value))
				{
					this.OnSectionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SectionTypeId = value;
					this.SendPropertyChanged("SectionTypeId");
					this.OnSectionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SectionName
		{
			get
			{
				return this._SectionName;
			}
			set
			{
				if ((this._SectionName != value))
				{
					this.OnSectionNameChanging(value);
					this.SendPropertyChanging();
					this._SectionName = value;
					this.SendPropertyChanged("SectionName");
					this.OnSectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SectionType_ProjectSection", Storage="_ProjectSections", ThisKey="SectionTypeId", OtherKey="SectionTypeId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.SectionType = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.SectionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialityId;
		
		private string _Name;
		
		private EntitySet<Practice> _Practices;
		
		private EntitySet<PracticeSite> _PracticeSites;
		
		private EntitySet<PracticeUser> _PracticeUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialityIdChanging(int value);
    partial void OnSpecialityIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Speciality()
		{
			this._Practices = new EntitySet<Practice>(new Action<Practice>(this.attach_Practices), new Action<Practice>(this.detach_Practices));
			this._PracticeSites = new EntitySet<PracticeSite>(new Action<PracticeSite>(this.attach_PracticeSites), new Action<PracticeSite>(this.detach_PracticeSites));
			this._PracticeUsers = new EntitySet<PracticeUser>(new Action<PracticeUser>(this.attach_PracticeUsers), new Action<PracticeUser>(this.detach_PracticeUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Practice", Storage="_Practices", ThisKey="SpecialityId", OtherKey="SpecialityId")]
		public EntitySet<Practice> Practices
		{
			get
			{
				return this._Practices;
			}
			set
			{
				this._Practices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_PracticeSite", Storage="_PracticeSites", ThisKey="SpecialityId", OtherKey="SpecialityId")]
		public EntitySet<PracticeSite> PracticeSites
		{
			get
			{
				return this._PracticeSites;
			}
			set
			{
				this._PracticeSites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_PracticeUser", Storage="_PracticeUsers", ThisKey="SpecialityId", OtherKey="SpecialityId")]
		public EntitySet<PracticeUser> PracticeUsers
		{
			get
			{
				return this._PracticeUsers;
			}
			set
			{
				this._PracticeUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Practices(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_PracticeSites(PracticeSite entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_PracticeUsers(PracticeUser entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StandardDocument")]
	public partial class StandardDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StandardDocumentId;
		
		private int _StandardFolderId;
		
		private string _Name;
		
		private string _Description;
		
		private string _Link;
		
		private string _Image;
		
		private System.DateTime _UploadedDate;
		
		private int _UploadedBy;
		
		private EntityRef<StandardFolder> _StandardFolder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStandardDocumentIdChanging(int value);
    partial void OnStandardDocumentIdChanged();
    partial void OnStandardFolderIdChanging(int value);
    partial void OnStandardFolderIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnUploadedDateChanging(System.DateTime value);
    partial void OnUploadedDateChanged();
    partial void OnUploadedByChanging(int value);
    partial void OnUploadedByChanged();
    #endregion
		
		public StandardDocument()
		{
			this._StandardFolder = default(EntityRef<StandardFolder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardDocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StandardDocumentId
		{
			get
			{
				return this._StandardDocumentId;
			}
			set
			{
				if ((this._StandardDocumentId != value))
				{
					this.OnStandardDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._StandardDocumentId = value;
					this.SendPropertyChanged("StandardDocumentId");
					this.OnStandardDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardFolderId", DbType="Int NOT NULL")]
		public int StandardFolderId
		{
			get
			{
				return this._StandardFolderId;
			}
			set
			{
				if ((this._StandardFolderId != value))
				{
					if (this._StandardFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardFolderIdChanging(value);
					this.SendPropertyChanging();
					this._StandardFolderId = value;
					this.SendPropertyChanged("StandardFolderId");
					this.OnStandardFolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedDate
		{
			get
			{
				return this._UploadedDate;
			}
			set
			{
				if ((this._UploadedDate != value))
				{
					this.OnUploadedDateChanging(value);
					this.SendPropertyChanging();
					this._UploadedDate = value;
					this.SendPropertyChanged("UploadedDate");
					this.OnUploadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="Int NOT NULL")]
		public int UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardFolder_StandardDocument", Storage="_StandardFolder", ThisKey="StandardFolderId", OtherKey="StandardFolderId", IsForeignKey=true)]
		public StandardFolder StandardFolder
		{
			get
			{
				return this._StandardFolder.Entity;
			}
			set
			{
				StandardFolder previousValue = this._StandardFolder.Entity;
				if (((previousValue != value) 
							|| (this._StandardFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardFolder.Entity = null;
						previousValue.StandardDocuments.Remove(this);
					}
					this._StandardFolder.Entity = value;
					if ((value != null))
					{
						value.StandardDocuments.Add(this);
						this._StandardFolderId = value.StandardFolderId;
					}
					else
					{
						this._StandardFolderId = default(int);
					}
					this.SendPropertyChanged("StandardFolder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StandardFolder")]
	public partial class StandardFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StandardFolderId;
		
		private string _Name;
		
		private EntitySet<StandardDocument> _StandardDocuments;
		
		private EntitySet<Template> _Templates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStandardFolderIdChanging(int value);
    partial void OnStandardFolderIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public StandardFolder()
		{
			this._StandardDocuments = new EntitySet<StandardDocument>(new Action<StandardDocument>(this.attach_StandardDocuments), new Action<StandardDocument>(this.detach_StandardDocuments));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardFolderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StandardFolderId
		{
			get
			{
				return this._StandardFolderId;
			}
			set
			{
				if ((this._StandardFolderId != value))
				{
					this.OnStandardFolderIdChanging(value);
					this.SendPropertyChanging();
					this._StandardFolderId = value;
					this.SendPropertyChanged("StandardFolderId");
					this.OnStandardFolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardFolder_StandardDocument", Storage="_StandardDocuments", ThisKey="StandardFolderId", OtherKey="StandardFolderId")]
		public EntitySet<StandardDocument> StandardDocuments
		{
			get
			{
				return this._StandardDocuments;
			}
			set
			{
				this._StandardDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardFolder_Template", Storage="_Templates", ThisKey="StandardFolderId", OtherKey="StandardFolderId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StandardDocuments(StandardDocument entity)
		{
			this.SendPropertyChanging();
			entity.StandardFolder = this;
		}
		
		private void detach_StandardDocuments(StandardDocument entity)
		{
			this.SendPropertyChanging();
			entity.StandardFolder = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.StandardFolder = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.StandardFolder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubmissionStatus")]
	public partial class SubmissionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubmissionStatusId;
		
		private string _Name;
		
		private EntitySet<PracticeSiteSubmission> _PracticeSiteSubmissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionStatusIdChanging(int value);
    partial void OnSubmissionStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SubmissionStatus()
		{
			this._PracticeSiteSubmissions = new EntitySet<PracticeSiteSubmission>(new Action<PracticeSiteSubmission>(this.attach_PracticeSiteSubmissions), new Action<PracticeSiteSubmission>(this.detach_PracticeSiteSubmissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubmissionStatusId
		{
			get
			{
				return this._SubmissionStatusId;
			}
			set
			{
				if ((this._SubmissionStatusId != value))
				{
					this.OnSubmissionStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionStatusId = value;
					this.SendPropertyChanged("SubmissionStatusId");
					this.OnSubmissionStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubmissionStatus_PracticeSiteSubmission", Storage="_PracticeSiteSubmissions", ThisKey="SubmissionStatusId", OtherKey="StatusId")]
		public EntitySet<PracticeSiteSubmission> PracticeSiteSubmissions
		{
			get
			{
				return this._PracticeSiteSubmissions;
			}
			set
			{
				this._PracticeSiteSubmissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PracticeSiteSubmissions(PracticeSiteSubmission entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionStatus = this;
		}
		
		private void detach_PracticeSiteSubmissions(PracticeSiteSubmission entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemInfo")]
	public partial class SystemInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemInfoId;
		
		private string _Key;
		
		private string _Value;
		
		private System.Nullable<int> _EnterpriseId;
		
		private EntityRef<Enterprise> _Enterprise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemInfoIdChanging(int value);
    partial void OnSystemInfoIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnEnterpriseIdChanged();
    #endregion
		
		public SystemInfo()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemInfoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SystemInfoId
		{
			get
			{
				return this._SystemInfoId;
			}
			set
			{
				if ((this._SystemInfoId != value))
				{
					this.OnSystemInfoIdChanging(value);
					this.SendPropertyChanging();
					this._SystemInfoId = value;
					this.SendPropertyChanged("SystemInfoId");
					this.OnSystemInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int")]
		public System.Nullable<int> EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_SystemInfo", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.SystemInfos.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.SystemInfos.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Template")]
	public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateId;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Description;
		
		private int _TemplateTypeId;
		
		private int _TemplateCategoryId;
		
		private int _AccessLevelId;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private int _LastUpdatedBy;
		
		private System.DateTime _LastUpdatedDate;
		
		private System.Nullable<int> _PracticeId;
		
		private System.Nullable<int> _EnterpriseId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private int _SubmitActionId;
		
		private System.Nullable<bool> _IsCorporate;
		
		private bool _IsActive;
		
		private string _DocPath;
		
		private System.Nullable<int> _ToolLevelId;
		
		private System.Nullable<bool> _HasStandardFolder;
		
		private System.Nullable<int> _StandardFolderId;
		
		private System.Nullable<bool> _HasDocumentStore;
		
		private string _DocumentStoreName;
		
		private EntitySet<KnowledgeBaseTemplate> _KnowledgeBaseTemplates;
		
		private EntitySet<ProjectDocument> _ProjectDocuments;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntitySet<TemplateOption> _TemplateOptions;
		
		private EntityRef<StandardFolder> _StandardFolder;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
		private EntityRef<TemplateCategory> _TemplateCategory;
		
		private EntityRef<TemplateSubmitAction> _TemplateSubmitAction;
		
		private EntityRef<TemplateType> _TemplateType;
		
		private EntityRef<ToolLevel> _ToolLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateIdChanging(int value);
    partial void OnTemplateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTemplateTypeIdChanging(int value);
    partial void OnTemplateTypeIdChanged();
    partial void OnTemplateCategoryIdChanging(int value);
    partial void OnTemplateCategoryIdChanged();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnLastUpdatedByChanging(int value);
    partial void OnLastUpdatedByChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    partial void OnEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnEnterpriseIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnSubmitActionIdChanging(int value);
    partial void OnSubmitActionIdChanged();
    partial void OnIsCorporateChanging(System.Nullable<bool> value);
    partial void OnIsCorporateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDocPathChanging(string value);
    partial void OnDocPathChanged();
    partial void OnToolLevelIdChanging(System.Nullable<int> value);
    partial void OnToolLevelIdChanged();
    partial void OnHasStandardFolderChanging(System.Nullable<bool> value);
    partial void OnHasStandardFolderChanged();
    partial void OnStandardFolderIdChanging(System.Nullable<int> value);
    partial void OnStandardFolderIdChanged();
    partial void OnHasDocumentStoreChanging(System.Nullable<bool> value);
    partial void OnHasDocumentStoreChanged();
    partial void OnDocumentStoreNameChanging(string value);
    partial void OnDocumentStoreNameChanged();
    #endregion
		
		public Template()
		{
			this._KnowledgeBaseTemplates = new EntitySet<KnowledgeBaseTemplate>(new Action<KnowledgeBaseTemplate>(this.attach_KnowledgeBaseTemplates), new Action<KnowledgeBaseTemplate>(this.detach_KnowledgeBaseTemplates));
			this._ProjectDocuments = new EntitySet<ProjectDocument>(new Action<ProjectDocument>(this.attach_ProjectDocuments), new Action<ProjectDocument>(this.detach_ProjectDocuments));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._TemplateOptions = new EntitySet<TemplateOption>(new Action<TemplateOption>(this.attach_TemplateOptions), new Action<TemplateOption>(this.detach_TemplateOptions));
			this._StandardFolder = default(EntityRef<StandardFolder>);
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._Practice = default(EntityRef<Practice>);
			this._AccessLevel = default(EntityRef<AccessLevel>);
			this._TemplateCategory = default(EntityRef<TemplateCategory>);
			this._TemplateSubmitAction = default(EntityRef<TemplateSubmitAction>);
			this._TemplateType = default(EntityRef<TemplateType>);
			this._ToolLevel = default(EntityRef<ToolLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateTypeId", DbType="Int NOT NULL")]
		public int TemplateTypeId
		{
			get
			{
				return this._TemplateTypeId;
			}
			set
			{
				if ((this._TemplateTypeId != value))
				{
					if (this._TemplateType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeId = value;
					this.SendPropertyChanged("TemplateTypeId");
					this.OnTemplateTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateCategoryId", DbType="Int NOT NULL")]
		public int TemplateCategoryId
		{
			get
			{
				return this._TemplateCategoryId;
			}
			set
			{
				if ((this._TemplateCategoryId != value))
				{
					if (this._TemplateCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateCategoryId = value;
					this.SendPropertyChanged("TemplateCategoryId");
					this.OnTemplateCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", DbType="Int NOT NULL")]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedBy", DbType="Int NOT NULL")]
		public int LastUpdatedBy
		{
			get
			{
				return this._LastUpdatedBy;
			}
			set
			{
				if ((this._LastUpdatedBy != value))
				{
					this.OnLastUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedBy = value;
					this.SendPropertyChanged("LastUpdatedBy");
					this.OnLastUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int")]
		public System.Nullable<int> EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitActionId", DbType="Int NOT NULL")]
		public int SubmitActionId
		{
			get
			{
				return this._SubmitActionId;
			}
			set
			{
				if ((this._SubmitActionId != value))
				{
					if (this._TemplateSubmitAction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmitActionIdChanging(value);
					this.SendPropertyChanging();
					this._SubmitActionId = value;
					this.SendPropertyChanged("SubmitActionId");
					this.OnSubmitActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorporate", DbType="Bit")]
		public System.Nullable<bool> IsCorporate
		{
			get
			{
				return this._IsCorporate;
			}
			set
			{
				if ((this._IsCorporate != value))
				{
					this.OnIsCorporateChanging(value);
					this.SendPropertyChanging();
					this._IsCorporate = value;
					this.SendPropertyChanged("IsCorporate");
					this.OnIsCorporateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocPath", DbType="VarChar(MAX)")]
		public string DocPath
		{
			get
			{
				return this._DocPath;
			}
			set
			{
				if ((this._DocPath != value))
				{
					this.OnDocPathChanging(value);
					this.SendPropertyChanging();
					this._DocPath = value;
					this.SendPropertyChanged("DocPath");
					this.OnDocPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolLevelId", DbType="Int")]
		public System.Nullable<int> ToolLevelId
		{
			get
			{
				return this._ToolLevelId;
			}
			set
			{
				if ((this._ToolLevelId != value))
				{
					if (this._ToolLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolLevelIdChanging(value);
					this.SendPropertyChanging();
					this._ToolLevelId = value;
					this.SendPropertyChanged("ToolLevelId");
					this.OnToolLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasStandardFolder", DbType="Bit")]
		public System.Nullable<bool> HasStandardFolder
		{
			get
			{
				return this._HasStandardFolder;
			}
			set
			{
				if ((this._HasStandardFolder != value))
				{
					this.OnHasStandardFolderChanging(value);
					this.SendPropertyChanging();
					this._HasStandardFolder = value;
					this.SendPropertyChanged("HasStandardFolder");
					this.OnHasStandardFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardFolderId", DbType="Int")]
		public System.Nullable<int> StandardFolderId
		{
			get
			{
				return this._StandardFolderId;
			}
			set
			{
				if ((this._StandardFolderId != value))
				{
					if (this._StandardFolder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardFolderIdChanging(value);
					this.SendPropertyChanging();
					this._StandardFolderId = value;
					this.SendPropertyChanged("StandardFolderId");
					this.OnStandardFolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasDocumentStore", DbType="Bit")]
		public System.Nullable<bool> HasDocumentStore
		{
			get
			{
				return this._HasDocumentStore;
			}
			set
			{
				if ((this._HasDocumentStore != value))
				{
					this.OnHasDocumentStoreChanging(value);
					this.SendPropertyChanging();
					this._HasDocumentStore = value;
					this.SendPropertyChanged("HasDocumentStore");
					this.OnHasDocumentStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentStoreName", DbType="VarChar(50)")]
		public string DocumentStoreName
		{
			get
			{
				return this._DocumentStoreName;
			}
			set
			{
				if ((this._DocumentStoreName != value))
				{
					this.OnDocumentStoreNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentStoreName = value;
					this.SendPropertyChanged("DocumentStoreName");
					this.OnDocumentStoreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_KnowledgeBaseTemplate", Storage="_KnowledgeBaseTemplates", ThisKey="TemplateId", OtherKey="TemplateId")]
		public EntitySet<KnowledgeBaseTemplate> KnowledgeBaseTemplates
		{
			get
			{
				return this._KnowledgeBaseTemplates;
			}
			set
			{
				this._KnowledgeBaseTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_ProjectDocument", Storage="_ProjectDocuments", ThisKey="TemplateId", OtherKey="TemplateId")]
		public EntitySet<ProjectDocument> ProjectDocuments
		{
			get
			{
				return this._ProjectDocuments;
			}
			set
			{
				this._ProjectDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_ProjectSection", Storage="_ProjectSections", ThisKey="TemplateId", OtherKey="TemplateId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_TemplateOption", Storage="_TemplateOptions", ThisKey="TemplateId", OtherKey="fkTemplateId")]
		public EntitySet<TemplateOption> TemplateOptions
		{
			get
			{
				return this._TemplateOptions;
			}
			set
			{
				this._TemplateOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardFolder_Template", Storage="_StandardFolder", ThisKey="StandardFolderId", OtherKey="StandardFolderId", IsForeignKey=true)]
		public StandardFolder StandardFolder
		{
			get
			{
				return this._StandardFolder.Entity;
			}
			set
			{
				StandardFolder previousValue = this._StandardFolder.Entity;
				if (((previousValue != value) 
							|| (this._StandardFolder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardFolder.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._StandardFolder.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._StandardFolderId = value.StandardFolderId;
					}
					else
					{
						this._StandardFolderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StandardFolder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_Template", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_Template", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Template", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_Template", Storage="_AccessLevel", ThisKey="AccessLevelId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._AccessLevelId = value.AccessLevelId;
					}
					else
					{
						this._AccessLevelId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateCategory_Template", Storage="_TemplateCategory", ThisKey="TemplateCategoryId", OtherKey="TemplateCategoryId", IsForeignKey=true)]
		public TemplateCategory TemplateCategory
		{
			get
			{
				return this._TemplateCategory.Entity;
			}
			set
			{
				TemplateCategory previousValue = this._TemplateCategory.Entity;
				if (((previousValue != value) 
							|| (this._TemplateCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateCategory.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._TemplateCategory.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._TemplateCategoryId = value.TemplateCategoryId;
					}
					else
					{
						this._TemplateCategoryId = default(int);
					}
					this.SendPropertyChanged("TemplateCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateSubmitAction_Template", Storage="_TemplateSubmitAction", ThisKey="SubmitActionId", OtherKey="TemplateSubmitActionId", IsForeignKey=true)]
		public TemplateSubmitAction TemplateSubmitAction
		{
			get
			{
				return this._TemplateSubmitAction.Entity;
			}
			set
			{
				TemplateSubmitAction previousValue = this._TemplateSubmitAction.Entity;
				if (((previousValue != value) 
							|| (this._TemplateSubmitAction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateSubmitAction.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._TemplateSubmitAction.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._SubmitActionId = value.TemplateSubmitActionId;
					}
					else
					{
						this._SubmitActionId = default(int);
					}
					this.SendPropertyChanged("TemplateSubmitAction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateType_Template", Storage="_TemplateType", ThisKey="TemplateTypeId", OtherKey="TemplateTypeId", IsForeignKey=true)]
		public TemplateType TemplateType
		{
			get
			{
				return this._TemplateType.Entity;
			}
			set
			{
				TemplateType previousValue = this._TemplateType.Entity;
				if (((previousValue != value) 
							|| (this._TemplateType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateType.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._TemplateType.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._TemplateTypeId = value.TemplateTypeId;
					}
					else
					{
						this._TemplateTypeId = default(int);
					}
					this.SendPropertyChanged("TemplateType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_Template", Storage="_ToolLevel", ThisKey="ToolLevelId", OtherKey="ToolLevelId", IsForeignKey=true)]
		public ToolLevel ToolLevel
		{
			get
			{
				return this._ToolLevel.Entity;
			}
			set
			{
				ToolLevel previousValue = this._ToolLevel.Entity;
				if (((previousValue != value) 
							|| (this._ToolLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolLevel.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._ToolLevel.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._ToolLevelId = value.ToolLevelId;
					}
					else
					{
						this._ToolLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToolLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_KnowledgeBaseTemplates(KnowledgeBaseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
		
		private void attach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_ProjectDocuments(ProjectDocument entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
		
		private void attach_TemplateOptions(TemplateOption entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_TemplateOptions(TemplateOption entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateCategory")]
	public partial class TemplateCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateCategoryId;
		
		private string _TemplateCategory1;
		
		private EntitySet<Template> _Templates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateCategoryIdChanging(int value);
    partial void OnTemplateCategoryIdChanged();
    partial void OnTemplateCategory1Changing(string value);
    partial void OnTemplateCategory1Changed();
    #endregion
		
		public TemplateCategory()
		{
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateCategoryId
		{
			get
			{
				return this._TemplateCategoryId;
			}
			set
			{
				if ((this._TemplateCategoryId != value))
				{
					this.OnTemplateCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateCategoryId = value;
					this.SendPropertyChanged("TemplateCategoryId");
					this.OnTemplateCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TemplateCategory", Storage="_TemplateCategory1", DbType="NVarChar(MAX)")]
		public string TemplateCategory1
		{
			get
			{
				return this._TemplateCategory1;
			}
			set
			{
				if ((this._TemplateCategory1 != value))
				{
					this.OnTemplateCategory1Changing(value);
					this.SendPropertyChanging();
					this._TemplateCategory1 = value;
					this.SendPropertyChanged("TemplateCategory1");
					this.OnTemplateCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateCategory_Template", Storage="_Templates", ThisKey="TemplateCategoryId", OtherKey="TemplateCategoryId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateCategory = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateDocument")]
	public partial class TemplateDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentId;
		
		private string _Name;
		
		private string _ReferencePages;
		
		private string _Path;
		
		private string _RelevencyLevel;
		
		private string _DocumentType;
		
		private EntitySet<FilledTemplateDocument> _FilledTemplateDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIdChanging(int value);
    partial void OnDocumentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnReferencePagesChanging(string value);
    partial void OnReferencePagesChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnRelevencyLevelChanging(string value);
    partial void OnRelevencyLevelChanged();
    partial void OnDocumentTypeChanging(string value);
    partial void OnDocumentTypeChanged();
    #endregion
		
		public TemplateDocument()
		{
			this._FilledTemplateDocuments = new EntitySet<FilledTemplateDocument>(new Action<FilledTemplateDocument>(this.attach_FilledTemplateDocuments), new Action<FilledTemplateDocument>(this.detach_FilledTemplateDocuments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentId
		{
			get
			{
				return this._DocumentId;
			}
			set
			{
				if ((this._DocumentId != value))
				{
					this.OnDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentId = value;
					this.SendPropertyChanged("DocumentId");
					this.OnDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencePages", DbType="NVarChar(50)")]
		public string ReferencePages
		{
			get
			{
				return this._ReferencePages;
			}
			set
			{
				if ((this._ReferencePages != value))
				{
					this.OnReferencePagesChanging(value);
					this.SendPropertyChanging();
					this._ReferencePages = value;
					this.SendPropertyChanged("ReferencePages");
					this.OnReferencePagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelevencyLevel", DbType="NVarChar(50)")]
		public string RelevencyLevel
		{
			get
			{
				return this._RelevencyLevel;
			}
			set
			{
				if ((this._RelevencyLevel != value))
				{
					this.OnRelevencyLevelChanging(value);
					this.SendPropertyChanging();
					this._RelevencyLevel = value;
					this.SendPropertyChanged("RelevencyLevel");
					this.OnRelevencyLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="NVarChar(50)")]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateDocument_FilledTemplateDocument", Storage="_FilledTemplateDocuments", ThisKey="DocumentId", OtherKey="DocumentId")]
		public EntitySet<FilledTemplateDocument> FilledTemplateDocuments
		{
			get
			{
				return this._FilledTemplateDocuments;
			}
			set
			{
				this._FilledTemplateDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.TemplateDocument = this;
		}
		
		private void detach_FilledTemplateDocuments(FilledTemplateDocument entity)
		{
			this.SendPropertyChanging();
			entity.TemplateDocument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateOption")]
	public partial class TemplateOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateOptionId;
		
		private string _Name;
		
		private string _Description;
		
		private int _AccessLevelId;
		
		private int _fkTemplateId;
		
		private EntitySet<FilledAnswersOption> _FilledAnswersOptions;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntitySet<TemplateOptionAssignment> _TemplateOptionAssignments;
		
		private EntityRef<AccessLevel> _AccessLevel;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateOptionIdChanging(int value);
    partial void OnTemplateOptionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccessLevelIdChanging(int value);
    partial void OnAccessLevelIdChanged();
    partial void OnfkTemplateIdChanging(int value);
    partial void OnfkTemplateIdChanged();
    #endregion
		
		public TemplateOption()
		{
			this._FilledAnswersOptions = new EntitySet<FilledAnswersOption>(new Action<FilledAnswersOption>(this.attach_FilledAnswersOptions), new Action<FilledAnswersOption>(this.detach_FilledAnswersOptions));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._TemplateOptionAssignments = new EntitySet<TemplateOptionAssignment>(new Action<TemplateOptionAssignment>(this.attach_TemplateOptionAssignments), new Action<TemplateOptionAssignment>(this.detach_TemplateOptionAssignments));
			this._AccessLevel = default(EntityRef<AccessLevel>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateOptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateOptionId
		{
			get
			{
				return this._TemplateOptionId;
			}
			set
			{
				if ((this._TemplateOptionId != value))
				{
					this.OnTemplateOptionIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateOptionId = value;
					this.SendPropertyChanged("TemplateOptionId");
					this.OnTemplateOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevelId", DbType="Int NOT NULL")]
		public int AccessLevelId
		{
			get
			{
				return this._AccessLevelId;
			}
			set
			{
				if ((this._AccessLevelId != value))
				{
					if (this._AccessLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessLevelIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLevelId = value;
					this.SendPropertyChanged("AccessLevelId");
					this.OnAccessLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fkTemplateId", DbType="Int NOT NULL")]
		public int fkTemplateId
		{
			get
			{
				return this._fkTemplateId;
			}
			set
			{
				if ((this._fkTemplateId != value))
				{
					if (this._Template.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfkTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._fkTemplateId = value;
					this.SendPropertyChanged("fkTemplateId");
					this.OnfkTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_FilledAnswersOption", Storage="_FilledAnswersOptions", ThisKey="TemplateOptionId", OtherKey="OptionId")]
		public EntitySet<FilledAnswersOption> FilledAnswersOptions
		{
			get
			{
				return this._FilledAnswersOptions;
			}
			set
			{
				this._FilledAnswersOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_ProjectSection", Storage="_ProjectSections", ThisKey="TemplateOptionId", OtherKey="fkTemplateOptionId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_TemplateOptionAssignment", Storage="_TemplateOptionAssignments", ThisKey="TemplateOptionId", OtherKey="TemplateOptionId")]
		public EntitySet<TemplateOptionAssignment> TemplateOptionAssignments
		{
			get
			{
				return this._TemplateOptionAssignments;
			}
			set
			{
				this._TemplateOptionAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessLevel_TemplateOption", Storage="_AccessLevel", ThisKey="AccessLevelId", OtherKey="AccessLevelId", IsForeignKey=true)]
		public AccessLevel AccessLevel
		{
			get
			{
				return this._AccessLevel.Entity;
			}
			set
			{
				AccessLevel previousValue = this._AccessLevel.Entity;
				if (((previousValue != value) 
							|| (this._AccessLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessLevel.Entity = null;
						previousValue.TemplateOptions.Remove(this);
					}
					this._AccessLevel.Entity = value;
					if ((value != null))
					{
						value.TemplateOptions.Add(this);
						this._AccessLevelId = value.AccessLevelId;
					}
					else
					{
						this._AccessLevelId = default(int);
					}
					this.SendPropertyChanged("AccessLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Template_TemplateOption", Storage="_Template", ThisKey="fkTemplateId", OtherKey="TemplateId", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.TemplateOptions.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.TemplateOptions.Add(this);
						this._fkTemplateId = value.TemplateId;
					}
					else
					{
						this._fkTemplateId = default(int);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledAnswersOptions(FilledAnswersOption entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = this;
		}
		
		private void detach_FilledAnswersOptions(FilledAnswersOption entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = null;
		}
		
		private void attach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = this;
		}
		
		private void detach_TemplateOptionAssignments(TemplateOptionAssignment entity)
		{
			this.SendPropertyChanging();
			entity.TemplateOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateOptionAssignment")]
	public partial class TemplateOptionAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateOptionAssignmentId;
		
		private System.Nullable<int> _TemplateOptionId;
		
		private System.Nullable<int> _EnterpriseId;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private System.Nullable<int> _PracticeId;
		
		private EntityRef<Enterprise> _Enterprise;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<TemplateOption> _TemplateOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateOptionAssignmentIdChanging(int value);
    partial void OnTemplateOptionAssignmentIdChanged();
    partial void OnTemplateOptionIdChanging(System.Nullable<int> value);
    partial void OnTemplateOptionIdChanged();
    partial void OnEnterpriseIdChanging(System.Nullable<int> value);
    partial void OnEnterpriseIdChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    partial void OnPracticeIdChanging(System.Nullable<int> value);
    partial void OnPracticeIdChanged();
    #endregion
		
		public TemplateOptionAssignment()
		{
			this._Enterprise = default(EntityRef<Enterprise>);
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._Practice = default(EntityRef<Practice>);
			this._TemplateOption = default(EntityRef<TemplateOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateOptionAssignmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateOptionAssignmentId
		{
			get
			{
				return this._TemplateOptionAssignmentId;
			}
			set
			{
				if ((this._TemplateOptionAssignmentId != value))
				{
					this.OnTemplateOptionAssignmentIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateOptionAssignmentId = value;
					this.SendPropertyChanged("TemplateOptionAssignmentId");
					this.OnTemplateOptionAssignmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateOptionId", DbType="Int")]
		public System.Nullable<int> TemplateOptionId
		{
			get
			{
				return this._TemplateOptionId;
			}
			set
			{
				if ((this._TemplateOptionId != value))
				{
					if (this._TemplateOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateOptionIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateOptionId = value;
					this.SendPropertyChanged("TemplateOptionId");
					this.OnTemplateOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseId", DbType="Int")]
		public System.Nullable<int> EnterpriseId
		{
			get
			{
				return this._EnterpriseId;
			}
			set
			{
				if ((this._EnterpriseId != value))
				{
					if (this._Enterprise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIdChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseId = value;
					this.SendPropertyChanged("EnterpriseId");
					this.OnEnterpriseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeId", DbType="Int")]
		public System.Nullable<int> PracticeId
		{
			get
			{
				return this._PracticeId;
			}
			set
			{
				if ((this._PracticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIdChanging(value);
					this.SendPropertyChanging();
					this._PracticeId = value;
					this.SendPropertyChanged("PracticeId");
					this.OnPracticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enterprise_TemplateOptionAssignment", Storage="_Enterprise", ThisKey="EnterpriseId", OtherKey="EnterpriseId", IsForeignKey=true)]
		public Enterprise Enterprise
		{
			get
			{
				return this._Enterprise.Entity;
			}
			set
			{
				Enterprise previousValue = this._Enterprise.Entity;
				if (((previousValue != value) 
							|| (this._Enterprise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enterprise.Entity = null;
						previousValue.TemplateOptionAssignments.Remove(this);
					}
					this._Enterprise.Entity = value;
					if ((value != null))
					{
						value.TemplateOptionAssignments.Add(this);
						this._EnterpriseId = value.EnterpriseId;
					}
					else
					{
						this._EnterpriseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Enterprise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_TemplateOptionAssignment", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.TemplateOptionAssignments.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.TemplateOptionAssignments.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_TemplateOptionAssignment", Storage="_Practice", ThisKey="PracticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.TemplateOptionAssignments.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.TemplateOptionAssignments.Add(this);
						this._PracticeId = value.PracticeId;
					}
					else
					{
						this._PracticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateOption_TemplateOptionAssignment", Storage="_TemplateOption", ThisKey="TemplateOptionId", OtherKey="TemplateOptionId", IsForeignKey=true)]
		public TemplateOption TemplateOption
		{
			get
			{
				return this._TemplateOption.Entity;
			}
			set
			{
				TemplateOption previousValue = this._TemplateOption.Entity;
				if (((previousValue != value) 
							|| (this._TemplateOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TemplateOption.Entity = null;
						previousValue.TemplateOptionAssignments.Remove(this);
					}
					this._TemplateOption.Entity = value;
					if ((value != null))
					{
						value.TemplateOptionAssignments.Add(this);
						this._TemplateOptionId = value.TemplateOptionId;
					}
					else
					{
						this._TemplateOptionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TemplateOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateSubmitAction")]
	public partial class TemplateSubmitAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateSubmitActionId;
		
		private string _SubmitTo;
		
		private string _SubmitButtonText;
		
		private string _SubmitType;
		
		private string _SubmitAddress;
		
		private EntitySet<Template> _Templates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateSubmitActionIdChanging(int value);
    partial void OnTemplateSubmitActionIdChanged();
    partial void OnSubmitToChanging(string value);
    partial void OnSubmitToChanged();
    partial void OnSubmitButtonTextChanging(string value);
    partial void OnSubmitButtonTextChanged();
    partial void OnSubmitTypeChanging(string value);
    partial void OnSubmitTypeChanged();
    partial void OnSubmitAddressChanging(string value);
    partial void OnSubmitAddressChanged();
    #endregion
		
		public TemplateSubmitAction()
		{
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateSubmitActionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateSubmitActionId
		{
			get
			{
				return this._TemplateSubmitActionId;
			}
			set
			{
				if ((this._TemplateSubmitActionId != value))
				{
					this.OnTemplateSubmitActionIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateSubmitActionId = value;
					this.SendPropertyChanged("TemplateSubmitActionId");
					this.OnTemplateSubmitActionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitTo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SubmitTo
		{
			get
			{
				return this._SubmitTo;
			}
			set
			{
				if ((this._SubmitTo != value))
				{
					this.OnSubmitToChanging(value);
					this.SendPropertyChanging();
					this._SubmitTo = value;
					this.SendPropertyChanged("SubmitTo");
					this.OnSubmitToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitButtonText", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubmitButtonText
		{
			get
			{
				return this._SubmitButtonText;
			}
			set
			{
				if ((this._SubmitButtonText != value))
				{
					this.OnSubmitButtonTextChanging(value);
					this.SendPropertyChanging();
					this._SubmitButtonText = value;
					this.SendPropertyChanged("SubmitButtonText");
					this.OnSubmitButtonTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitType", DbType="NVarChar(100)")]
		public string SubmitType
		{
			get
			{
				return this._SubmitType;
			}
			set
			{
				if ((this._SubmitType != value))
				{
					this.OnSubmitTypeChanging(value);
					this.SendPropertyChanging();
					this._SubmitType = value;
					this.SendPropertyChanged("SubmitType");
					this.OnSubmitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitAddress", DbType="NVarChar(MAX)")]
		public string SubmitAddress
		{
			get
			{
				return this._SubmitAddress;
			}
			set
			{
				if ((this._SubmitAddress != value))
				{
					this.OnSubmitAddressChanging(value);
					this.SendPropertyChanging();
					this._SubmitAddress = value;
					this.SendPropertyChanged("SubmitAddress");
					this.OnSubmitAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateSubmitAction_Template", Storage="_Templates", ThisKey="TemplateSubmitActionId", OtherKey="SubmitActionId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateSubmitAction = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateSubmitAction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateType")]
	public partial class TemplateType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateTypeId;
		
		private string _TemplateType1;
		
		private EntitySet<KnowledgeBaseType> _KnowledgeBaseTypes;
		
		private EntitySet<Template> _Templates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateTypeIdChanging(int value);
    partial void OnTemplateTypeIdChanged();
    partial void OnTemplateType1Changing(string value);
    partial void OnTemplateType1Changed();
    #endregion
		
		public TemplateType()
		{
			this._KnowledgeBaseTypes = new EntitySet<KnowledgeBaseType>(new Action<KnowledgeBaseType>(this.attach_KnowledgeBaseTypes), new Action<KnowledgeBaseType>(this.detach_KnowledgeBaseTypes));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TemplateTypeId
		{
			get
			{
				return this._TemplateTypeId;
			}
			set
			{
				if ((this._TemplateTypeId != value))
				{
					this.OnTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeId = value;
					this.SendPropertyChanged("TemplateTypeId");
					this.OnTemplateTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TemplateType", Storage="_TemplateType1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TemplateType1
		{
			get
			{
				return this._TemplateType1;
			}
			set
			{
				if ((this._TemplateType1 != value))
				{
					this.OnTemplateType1Changing(value);
					this.SendPropertyChanging();
					this._TemplateType1 = value;
					this.SendPropertyChanged("TemplateType1");
					this.OnTemplateType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateType_KnowledgeBaseType", Storage="_KnowledgeBaseTypes", ThisKey="TemplateTypeId", OtherKey="TemplateTypeId")]
		public EntitySet<KnowledgeBaseType> KnowledgeBaseTypes
		{
			get
			{
				return this._KnowledgeBaseTypes;
			}
			set
			{
				this._KnowledgeBaseTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TemplateType_Template", Storage="_Templates", ThisKey="TemplateTypeId", OtherKey="TemplateTypeId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeBaseTypes(KnowledgeBaseType entity)
		{
			this.SendPropertyChanging();
			entity.TemplateType = this;
		}
		
		private void detach_KnowledgeBaseTypes(KnowledgeBaseType entity)
		{
			this.SendPropertyChanging();
			entity.TemplateType = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateType = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.TemplateType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolDocument")]
	public partial class ToolDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToolDocumentId;
		
		private System.Nullable<int> _ToolSectionId;
		
		private string _Name;
		
		private string _Link;
		
		private System.DateTime _UploadedDate;
		
		private int _UploadedBy;
		
		private string _Description;
		
		private string _Image;
		
		private System.Nullable<int> _PraticeId;
		
		private EntityRef<Practice> _Practice;
		
		private EntityRef<ToolSection> _ToolSection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolDocumentIdChanging(int value);
    partial void OnToolDocumentIdChanged();
    partial void OnToolSectionIdChanging(System.Nullable<int> value);
    partial void OnToolSectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnUploadedDateChanging(System.DateTime value);
    partial void OnUploadedDateChanged();
    partial void OnUploadedByChanging(int value);
    partial void OnUploadedByChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnPraticeIdChanging(System.Nullable<int> value);
    partial void OnPraticeIdChanged();
    #endregion
		
		public ToolDocument()
		{
			this._Practice = default(EntityRef<Practice>);
			this._ToolSection = default(EntityRef<ToolSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolDocumentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ToolDocumentId
		{
			get
			{
				return this._ToolDocumentId;
			}
			set
			{
				if ((this._ToolDocumentId != value))
				{
					this.OnToolDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._ToolDocumentId = value;
					this.SendPropertyChanged("ToolDocumentId");
					this.OnToolDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolSectionId", DbType="Int")]
		public System.Nullable<int> ToolSectionId
		{
			get
			{
				return this._ToolSectionId;
			}
			set
			{
				if ((this._ToolSectionId != value))
				{
					if (this._ToolSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ToolSectionId = value;
					this.SendPropertyChanged("ToolSectionId");
					this.OnToolSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedDate
		{
			get
			{
				return this._UploadedDate;
			}
			set
			{
				if ((this._UploadedDate != value))
				{
					this.OnUploadedDateChanging(value);
					this.SendPropertyChanging();
					this._UploadedDate = value;
					this.SendPropertyChanged("UploadedDate");
					this.OnUploadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="Int NOT NULL")]
		public int UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(5000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(500)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PraticeId", DbType="Int")]
		public System.Nullable<int> PraticeId
		{
			get
			{
				return this._PraticeId;
			}
			set
			{
				if ((this._PraticeId != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPraticeIdChanging(value);
					this.SendPropertyChanging();
					this._PraticeId = value;
					this.SendPropertyChanged("PraticeId");
					this.OnPraticeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_ToolDocument", Storage="_Practice", ThisKey="PraticeId", OtherKey="PracticeId", IsForeignKey=true)]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.ToolDocuments.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.ToolDocuments.Add(this);
						this._PraticeId = value.PracticeId;
					}
					else
					{
						this._PraticeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_ToolDocument", Storage="_ToolSection", ThisKey="ToolSectionId", OtherKey="ToolSectionId", IsForeignKey=true)]
		public ToolSection ToolSection
		{
			get
			{
				return this._ToolSection.Entity;
			}
			set
			{
				ToolSection previousValue = this._ToolSection.Entity;
				if (((previousValue != value) 
							|| (this._ToolSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolSection.Entity = null;
						previousValue.ToolDocuments.Remove(this);
					}
					this._ToolSection.Entity = value;
					if ((value != null))
					{
						value.ToolDocuments.Add(this);
						this._ToolSectionId = value.ToolSectionId;
					}
					else
					{
						this._ToolSectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToolSection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolLevel")]
	public partial class ToolLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToolLevelId;
		
		private string _ToolLevelName;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<ProjectSection> _ProjectSections;
		
		private EntitySet<Template> _Templates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolLevelIdChanging(int value);
    partial void OnToolLevelIdChanged();
    partial void OnToolLevelNameChanging(string value);
    partial void OnToolLevelNameChanged();
    #endregion
		
		public ToolLevel()
		{
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._ProjectSections = new EntitySet<ProjectSection>(new Action<ProjectSection>(this.attach_ProjectSections), new Action<ProjectSection>(this.detach_ProjectSections));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolLevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ToolLevelId
		{
			get
			{
				return this._ToolLevelId;
			}
			set
			{
				if ((this._ToolLevelId != value))
				{
					this.OnToolLevelIdChanging(value);
					this.SendPropertyChanging();
					this._ToolLevelId = value;
					this.SendPropertyChanged("ToolLevelId");
					this.OnToolLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolLevelName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ToolLevelName
		{
			get
			{
				return this._ToolLevelName;
			}
			set
			{
				if ((this._ToolLevelName != value))
				{
					this.OnToolLevelNameChanging(value);
					this.SendPropertyChanging();
					this._ToolLevelName = value;
					this.SendPropertyChanged("ToolLevelName");
					this.OnToolLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_Form", Storage="_Forms", ThisKey="ToolLevelId", OtherKey="ToolLevelId")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_ProjectSection", Storage="_ProjectSections", ThisKey="ToolLevelId", OtherKey="ToolLevelId")]
		public EntitySet<ProjectSection> ProjectSections
		{
			get
			{
				return this._ProjectSections;
			}
			set
			{
				this._ProjectSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolLevel_Template", Storage="_Templates", ThisKey="ToolLevelId", OtherKey="ToolLevelId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = null;
		}
		
		private void attach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = this;
		}
		
		private void detach_ProjectSections(ProjectSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.ToolLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolSection")]
	public partial class ToolSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToolSectionId;
		
		private System.Nullable<int> _ParentToolSectionId;
		
		private string _Name;
		
		private string _ContentType;
		
		private System.Nullable<int> _MedicalGroupId;
		
		private EntitySet<EnterpriseToolSection> _EnterpriseToolSections;
		
		private EntitySet<ToolDocument> _ToolDocuments;
		
		private EntitySet<ToolSection> _ToolSections;
		
		private EntityRef<MedicalGroup> _MedicalGroup;
		
		private EntityRef<ToolSection> _ToolSection1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolSectionIdChanging(int value);
    partial void OnToolSectionIdChanged();
    partial void OnParentToolSectionIdChanging(System.Nullable<int> value);
    partial void OnParentToolSectionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnMedicalGroupIdChanging(System.Nullable<int> value);
    partial void OnMedicalGroupIdChanged();
    #endregion
		
		public ToolSection()
		{
			this._EnterpriseToolSections = new EntitySet<EnterpriseToolSection>(new Action<EnterpriseToolSection>(this.attach_EnterpriseToolSections), new Action<EnterpriseToolSection>(this.detach_EnterpriseToolSections));
			this._ToolDocuments = new EntitySet<ToolDocument>(new Action<ToolDocument>(this.attach_ToolDocuments), new Action<ToolDocument>(this.detach_ToolDocuments));
			this._ToolSections = new EntitySet<ToolSection>(new Action<ToolSection>(this.attach_ToolSections), new Action<ToolSection>(this.detach_ToolSections));
			this._MedicalGroup = default(EntityRef<MedicalGroup>);
			this._ToolSection1 = default(EntityRef<ToolSection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolSectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ToolSectionId
		{
			get
			{
				return this._ToolSectionId;
			}
			set
			{
				if ((this._ToolSectionId != value))
				{
					this.OnToolSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ToolSectionId = value;
					this.SendPropertyChanged("ToolSectionId");
					this.OnToolSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentToolSectionId", DbType="Int")]
		public System.Nullable<int> ParentToolSectionId
		{
			get
			{
				return this._ParentToolSectionId;
			}
			set
			{
				if ((this._ParentToolSectionId != value))
				{
					if (this._ToolSection1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentToolSectionIdChanging(value);
					this.SendPropertyChanging();
					this._ParentToolSectionId = value;
					this.SendPropertyChanged("ParentToolSectionId");
					this.OnParentToolSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalGroupId", DbType="Int")]
		public System.Nullable<int> MedicalGroupId
		{
			get
			{
				return this._MedicalGroupId;
			}
			set
			{
				if ((this._MedicalGroupId != value))
				{
					if (this._MedicalGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalGroupIdChanging(value);
					this.SendPropertyChanging();
					this._MedicalGroupId = value;
					this.SendPropertyChanged("MedicalGroupId");
					this.OnMedicalGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_EnterpriseToolSection", Storage="_EnterpriseToolSections", ThisKey="ToolSectionId", OtherKey="ToolSectionId")]
		public EntitySet<EnterpriseToolSection> EnterpriseToolSections
		{
			get
			{
				return this._EnterpriseToolSections;
			}
			set
			{
				this._EnterpriseToolSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_ToolDocument", Storage="_ToolDocuments", ThisKey="ToolSectionId", OtherKey="ToolSectionId")]
		public EntitySet<ToolDocument> ToolDocuments
		{
			get
			{
				return this._ToolDocuments;
			}
			set
			{
				this._ToolDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_ToolSection", Storage="_ToolSections", ThisKey="ToolSectionId", OtherKey="ParentToolSectionId")]
		public EntitySet<ToolSection> ToolSections
		{
			get
			{
				return this._ToolSections;
			}
			set
			{
				this._ToolSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalGroup_ToolSection", Storage="_MedicalGroup", ThisKey="MedicalGroupId", OtherKey="MedicalGroupId", IsForeignKey=true)]
		public MedicalGroup MedicalGroup
		{
			get
			{
				return this._MedicalGroup.Entity;
			}
			set
			{
				MedicalGroup previousValue = this._MedicalGroup.Entity;
				if (((previousValue != value) 
							|| (this._MedicalGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalGroup.Entity = null;
						previousValue.ToolSections.Remove(this);
					}
					this._MedicalGroup.Entity = value;
					if ((value != null))
					{
						value.ToolSections.Add(this);
						this._MedicalGroupId = value.MedicalGroupId;
					}
					else
					{
						this._MedicalGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MedicalGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToolSection_ToolSection", Storage="_ToolSection1", ThisKey="ParentToolSectionId", OtherKey="ToolSectionId", IsForeignKey=true)]
		public ToolSection ToolSection1
		{
			get
			{
				return this._ToolSection1.Entity;
			}
			set
			{
				ToolSection previousValue = this._ToolSection1.Entity;
				if (((previousValue != value) 
							|| (this._ToolSection1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToolSection1.Entity = null;
						previousValue.ToolSections.Remove(this);
					}
					this._ToolSection1.Entity = value;
					if ((value != null))
					{
						value.ToolSections.Add(this);
						this._ParentToolSectionId = value.ToolSectionId;
					}
					else
					{
						this._ParentToolSectionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToolSection1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection = this;
		}
		
		private void detach_EnterpriseToolSections(EnterpriseToolSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection = null;
		}
		
		private void attach_ToolDocuments(ToolDocument entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection = this;
		}
		
		private void detach_ToolDocuments(ToolDocument entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection = null;
		}
		
		private void attach_ToolSections(ToolSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection1 = this;
		}
		
		private void detach_ToolSections(ToolSection entity)
		{
			this.SendPropertyChanging();
			entity.ToolSection1 = null;
		}
	}
	
	public partial class usp_Get_All_KnowledgeBase_TemplateResult
	{
		
		private System.Nullable<int> _KnowledgeBaseTemplateId;
		
		private System.Nullable<int> _KnowledgeBaseId;
		
		private System.Nullable<int> _TemplateId;
		
		private System.Nullable<int> _ParentKnowledgeBaseId;
		
		private System.Nullable<int> _Sequence;
		
		private System.Nullable<int> _AnswerTypeId;
		
		private System.Nullable<int> _MaxPoints;
		
		private System.Nullable<bool> _IsCritical;
		
		private string _CriticalToolTip;
		
		private System.Nullable<bool> _IsDataBox;
		
		private string _DataBoxHeader;
		
		private System.Nullable<bool> _IsCorporateElement;
		
		private System.Nullable<bool> _IsInfoDocEnable;
		
		private System.Nullable<int> _ReferencePages;
		
		private string _Name;
		
		private string _DisplayName;
		
		private string _InstructionText;
		
		private System.Nullable<bool> _MustPass;
		
		private System.Nullable<int> _FilledAnswersId;
		
		private System.Nullable<int> _AnswerTypeEnumId;
		
		private System.Nullable<bool> _Complete;
		
		private string _DataBoxComments;
		
		private string _DefaultScore;
		
		private System.Nullable<int> _PoliciesDocumentCount;
		
		private System.Nullable<int> _ReportsDocumentCount;
		
		private System.Nullable<int> _ScreenShotsDocumentCount;
		
		private System.Nullable<int> _LogsOrToolsDocumentCount;
		
		private System.Nullable<int> _OtherDocumentsCount;
		
		private string _PrivateNotes;
		
		private string _ReviewNotes;
		
		private string _EvaluationNotes;
		
		private string _DiscreteValue;
		
		public usp_Get_All_KnowledgeBase_TemplateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int")]
		public System.Nullable<int> KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					this._KnowledgeBaseTemplateId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseId", DbType="Int")]
		public System.Nullable<int> KnowledgeBaseId
		{
			get
			{
				return this._KnowledgeBaseId;
			}
			set
			{
				if ((this._KnowledgeBaseId != value))
				{
					this._KnowledgeBaseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int")]
		public System.Nullable<int> TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					this._TemplateId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKnowledgeBaseId", DbType="Int")]
		public System.Nullable<int> ParentKnowledgeBaseId
		{
			get
			{
				return this._ParentKnowledgeBaseId;
			}
			set
			{
				if ((this._ParentKnowledgeBaseId != value))
				{
					this._ParentKnowledgeBaseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
		public System.Nullable<int> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this._Sequence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeId", DbType="Int")]
		public System.Nullable<int> AnswerTypeId
		{
			get
			{
				return this._AnswerTypeId;
			}
			set
			{
				if ((this._AnswerTypeId != value))
				{
					this._AnswerTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPoints", DbType="Int")]
		public System.Nullable<int> MaxPoints
		{
			get
			{
				return this._MaxPoints;
			}
			set
			{
				if ((this._MaxPoints != value))
				{
					this._MaxPoints = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCritical", DbType="Bit")]
		public System.Nullable<bool> IsCritical
		{
			get
			{
				return this._IsCritical;
			}
			set
			{
				if ((this._IsCritical != value))
				{
					this._IsCritical = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CriticalToolTip", DbType="NVarChar(250)")]
		public string CriticalToolTip
		{
			get
			{
				return this._CriticalToolTip;
			}
			set
			{
				if ((this._CriticalToolTip != value))
				{
					this._CriticalToolTip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDataBox", DbType="Bit")]
		public System.Nullable<bool> IsDataBox
		{
			get
			{
				return this._IsDataBox;
			}
			set
			{
				if ((this._IsDataBox != value))
				{
					this._IsDataBox = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxHeader", DbType="VarChar(100)")]
		public string DataBoxHeader
		{
			get
			{
				return this._DataBoxHeader;
			}
			set
			{
				if ((this._DataBoxHeader != value))
				{
					this._DataBoxHeader = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorporateElement", DbType="Bit")]
		public System.Nullable<bool> IsCorporateElement
		{
			get
			{
				return this._IsCorporateElement;
			}
			set
			{
				if ((this._IsCorporateElement != value))
				{
					this._IsCorporateElement = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInfoDocEnable", DbType="Bit")]
		public System.Nullable<bool> IsInfoDocEnable
		{
			get
			{
				return this._IsInfoDocEnable;
			}
			set
			{
				if ((this._IsInfoDocEnable != value))
				{
					this._IsInfoDocEnable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencePages", DbType="Int")]
		public System.Nullable<int> ReferencePages
		{
			get
			{
				return this._ReferencePages;
			}
			set
			{
				if ((this._ReferencePages != value))
				{
					this._ReferencePages = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(250)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this._DisplayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionText", DbType="NVarChar(MAX)")]
		public string InstructionText
		{
			get
			{
				return this._InstructionText;
			}
			set
			{
				if ((this._InstructionText != value))
				{
					this._InstructionText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MustPass", DbType="Bit")]
		public System.Nullable<bool> MustPass
		{
			get
			{
				return this._MustPass;
			}
			set
			{
				if ((this._MustPass != value))
				{
					this._MustPass = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilledAnswersId", DbType="Int")]
		public System.Nullable<int> FilledAnswersId
		{
			get
			{
				return this._FilledAnswersId;
			}
			set
			{
				if ((this._FilledAnswersId != value))
				{
					this._FilledAnswersId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerTypeEnumId", DbType="Int")]
		public System.Nullable<int> AnswerTypeEnumId
		{
			get
			{
				return this._AnswerTypeEnumId;
			}
			set
			{
				if ((this._AnswerTypeEnumId != value))
				{
					this._AnswerTypeEnumId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="Bit")]
		public System.Nullable<bool> Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this._Complete = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxComments", DbType="NVarChar(MAX)")]
		public string DataBoxComments
		{
			get
			{
				return this._DataBoxComments;
			}
			set
			{
				if ((this._DataBoxComments != value))
				{
					this._DataBoxComments = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultScore", DbType="NVarChar(20)")]
		public string DefaultScore
		{
			get
			{
				return this._DefaultScore;
			}
			set
			{
				if ((this._DefaultScore != value))
				{
					this._DefaultScore = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoliciesDocumentCount", DbType="Int")]
		public System.Nullable<int> PoliciesDocumentCount
		{
			get
			{
				return this._PoliciesDocumentCount;
			}
			set
			{
				if ((this._PoliciesDocumentCount != value))
				{
					this._PoliciesDocumentCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportsDocumentCount", DbType="Int")]
		public System.Nullable<int> ReportsDocumentCount
		{
			get
			{
				return this._ReportsDocumentCount;
			}
			set
			{
				if ((this._ReportsDocumentCount != value))
				{
					this._ReportsDocumentCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenShotsDocumentCount", DbType="Int")]
		public System.Nullable<int> ScreenShotsDocumentCount
		{
			get
			{
				return this._ScreenShotsDocumentCount;
			}
			set
			{
				if ((this._ScreenShotsDocumentCount != value))
				{
					this._ScreenShotsDocumentCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogsOrToolsDocumentCount", DbType="Int")]
		public System.Nullable<int> LogsOrToolsDocumentCount
		{
			get
			{
				return this._LogsOrToolsDocumentCount;
			}
			set
			{
				if ((this._LogsOrToolsDocumentCount != value))
				{
					this._LogsOrToolsDocumentCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherDocumentsCount", DbType="Int")]
		public System.Nullable<int> OtherDocumentsCount
		{
			get
			{
				return this._OtherDocumentsCount;
			}
			set
			{
				if ((this._OtherDocumentsCount != value))
				{
					this._OtherDocumentsCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateNotes", DbType="NVarChar(MAX)")]
		public string PrivateNotes
		{
			get
			{
				return this._PrivateNotes;
			}
			set
			{
				if ((this._PrivateNotes != value))
				{
					this._PrivateNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewNotes", DbType="NVarChar(MAX)")]
		public string ReviewNotes
		{
			get
			{
				return this._ReviewNotes;
			}
			set
			{
				if ((this._ReviewNotes != value))
				{
					this._ReviewNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationNotes", DbType="NVarChar(MAX)")]
		public string EvaluationNotes
		{
			get
			{
				return this._EvaluationNotes;
			}
			set
			{
				if ((this._EvaluationNotes != value))
				{
					this._EvaluationNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscreteValue", DbType="NVarChar(20)")]
		public string DiscreteValue
		{
			get
			{
				return this._DiscreteValue;
			}
			set
			{
				if ((this._DiscreteValue != value))
				{
					this._DiscreteValue = value;
				}
			}
		}
	}
	
	public partial class usp_Get_All_Template_DocumentsResult
	{
		
		private string _Name;
		
		private string _ReferencePages;
		
		private string _DocPath;
		
		private string _RelevencyLevel;
		
		private string _DocumentType;
		
		private System.Nullable<int> _KnowledgeBaseTemplateId;
		
		private System.Nullable<int> _KnowledgeBaseId;
		
		private System.Nullable<int> _TemplateId;
		
		private System.Nullable<int> _ParentKnowledgeBaseId;
		
		private System.Nullable<int> _Sequence;
		
		private string _DataBoxHeader;
		
		private string _DataBoxComments;
		
		private string _PrivateNotes;
		
		private string _ReviewNotes;
		
		private string _EvaluationNotes;
		
		public usp_Get_All_Template_DocumentsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencePages", DbType="NVarChar(50)")]
		public string ReferencePages
		{
			get
			{
				return this._ReferencePages;
			}
			set
			{
				if ((this._ReferencePages != value))
				{
					this._ReferencePages = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocPath", DbType="NVarChar(MAX)")]
		public string DocPath
		{
			get
			{
				return this._DocPath;
			}
			set
			{
				if ((this._DocPath != value))
				{
					this._DocPath = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelevencyLevel", DbType="NVarChar(50)")]
		public string RelevencyLevel
		{
			get
			{
				return this._RelevencyLevel;
			}
			set
			{
				if ((this._RelevencyLevel != value))
				{
					this._RelevencyLevel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="NVarChar(50)")]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this._DocumentType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseTemplateId", DbType="Int")]
		public System.Nullable<int> KnowledgeBaseTemplateId
		{
			get
			{
				return this._KnowledgeBaseTemplateId;
			}
			set
			{
				if ((this._KnowledgeBaseTemplateId != value))
				{
					this._KnowledgeBaseTemplateId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeBaseId", DbType="Int")]
		public System.Nullable<int> KnowledgeBaseId
		{
			get
			{
				return this._KnowledgeBaseId;
			}
			set
			{
				if ((this._KnowledgeBaseId != value))
				{
					this._KnowledgeBaseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateId", DbType="Int")]
		public System.Nullable<int> TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					this._TemplateId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentKnowledgeBaseId", DbType="Int")]
		public System.Nullable<int> ParentKnowledgeBaseId
		{
			get
			{
				return this._ParentKnowledgeBaseId;
			}
			set
			{
				if ((this._ParentKnowledgeBaseId != value))
				{
					this._ParentKnowledgeBaseId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
		public System.Nullable<int> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this._Sequence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxHeader", DbType="VarChar(100)")]
		public string DataBoxHeader
		{
			get
			{
				return this._DataBoxHeader;
			}
			set
			{
				if ((this._DataBoxHeader != value))
				{
					this._DataBoxHeader = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataBoxComments", DbType="NVarChar(MAX)")]
		public string DataBoxComments
		{
			get
			{
				return this._DataBoxComments;
			}
			set
			{
				if ((this._DataBoxComments != value))
				{
					this._DataBoxComments = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateNotes", DbType="NVarChar(MAX)")]
		public string PrivateNotes
		{
			get
			{
				return this._PrivateNotes;
			}
			set
			{
				if ((this._PrivateNotes != value))
				{
					this._PrivateNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewNotes", DbType="NVarChar(MAX)")]
		public string ReviewNotes
		{
			get
			{
				return this._ReviewNotes;
			}
			set
			{
				if ((this._ReviewNotes != value))
				{
					this._ReviewNotes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationNotes", DbType="NVarChar(MAX)")]
		public string EvaluationNotes
		{
			get
			{
				return this._EvaluationNotes;
			}
			set
			{
				if ((this._EvaluationNotes != value))
				{
					this._EvaluationNotes = value;
				}
			}
		}
	}
	
	public partial class usp_Get_Practice_DetailsResult
	{
		
		private string _SecurePracticeId;
		
		private string _PracticeName;
		
		private System.Nullable<int> _ProjectUsageId;
		
		private System.Nullable<int> _PracticeSiteId;
		
		private string _SiteName;
		
		private string _Points;
		
		private string _Documents;
		
		private System.Nullable<System.DateTime> _LastActivity;
		
		private string _ContactName;
		
		private string _ContactPhone;
		
		private string _EmailText;
		
		private string _DateForeColor;
		
		public usp_Get_Practice_DetailsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurePracticeId", DbType="VarChar(30)")]
		public string SecurePracticeId
		{
			get
			{
				return this._SecurePracticeId;
			}
			set
			{
				if ((this._SecurePracticeId != value))
				{
					this._SecurePracticeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeName", DbType="VarChar(200)")]
		public string PracticeName
		{
			get
			{
				return this._PracticeName;
			}
			set
			{
				if ((this._PracticeName != value))
				{
					this._PracticeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUsageId", DbType="Int")]
		public System.Nullable<int> ProjectUsageId
		{
			get
			{
				return this._ProjectUsageId;
			}
			set
			{
				if ((this._ProjectUsageId != value))
				{
					this._ProjectUsageId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeSiteId", DbType="Int")]
		public System.Nullable<int> PracticeSiteId
		{
			get
			{
				return this._PracticeSiteId;
			}
			set
			{
				if ((this._PracticeSiteId != value))
				{
					this._PracticeSiteId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="VarChar(200)")]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this._SiteName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="VarChar(30)")]
		public string Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this._Points = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Documents", DbType="VarChar(30)")]
		public string Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				if ((this._Documents != value))
				{
					this._Documents = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivity", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivity
		{
			get
			{
				return this._LastActivity;
			}
			set
			{
				if ((this._LastActivity != value))
				{
					this._LastActivity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="VarChar(100)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this._ContactPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailText", DbType="VarChar(200)")]
		public string EmailText
		{
			get
			{
				return this._EmailText;
			}
			set
			{
				if ((this._EmailText != value))
				{
					this._EmailText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateForeColor", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string DateForeColor
		{
			get
			{
				return this._DateForeColor;
			}
			set
			{
				if ((this._DateForeColor != value))
				{
					this._DateForeColor = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
